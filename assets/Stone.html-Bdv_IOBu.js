import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as r,a as e,d as s,e as t,w as o,r as l,o as c}from"./app-CrbMk51G.js";const d={};function u(m,a){const n=l("RouteLink");return c(),p("div",null,[a[12]||(a[12]=r(`<h1 id="variable-stone" tabindex="-1"><a class="header-anchor" href="#variable-stone"><span>Variable: Stone()</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> Stone<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ClassDecorator <span class="token operator">=</span> Service<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Stone decorator to mark a class as a stone and automatically bind it to the container.</p><p>This decorator can be used to easily mark a class as injectable within the Stone.js framework, allowing it to be managed by the service container.</p><p>Service decorator to mark a class as a service and automatically bind it to the container.</p><p>This decorator is useful for marking classes that should be treated as services by the Stone.js framework, making them easily injectable and manageable by the service container.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3>`,8)),e("p",null,[a[2]||(a[2]=e("code",null,"T",-1)),a[3]||(a[3]=s()),a[4]||(a[4]=e("em",null,"extends",-1)),a[5]||(a[5]=s()),t(n,{to:"/api/core/declarations/type-aliases/ClassType.html"},{default:o(()=>a[0]||(a[0]=[e("code",null,"ClassType",-1)])),_:1,__:[0]}),a[6]||(a[6]=s(" = ")),t(n,{to:"/api/core/declarations/type-aliases/ClassType.html"},{default:o(()=>a[1]||(a[1]=[e("code",null,"ClassType",-1)])),_:1,__:[1]})]),a[13]||(a[13]=e("h2",{id:"parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters"},[e("span",null,"Parameters")])],-1)),a[14]||(a[14]=e("h3",{id:"options",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#options"},[e("span",null,"options")])],-1)),e("p",null,[a[8]||(a[8]=e("code",null,"Partial",-1)),a[9]||(a[9]=s("<")),t(n,{to:"/api/core/declarations/interfaces/ServiceOptions.html"},{default:o(()=>a[7]||(a[7]=[e("code",null,"ServiceOptions",-1)])),_:1,__:[7]}),a[10]||(a[10]=s("> = ")),a[11]||(a[11]=e("code",null,"{}",-1))]),a[15]||(a[15]=r(`<p>The configuration options for the service, including singleton and alias settings.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>ClassDecorator</code></p><p>A decorator function to set metadata on the target class.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Service</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> singleton<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> alias<span class="token operator">:</span> <span class="token string">&#39;MyService&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Service class logic here.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="param" tabindex="-1"><a class="header-anchor" href="#param"><span>Param</span></a></h2><p>The configuration options for the service.</p><h2 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h2><p>A function to set the class as a service.</p><h2 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> singleton<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> alias<span class="token operator">:</span> <span class="token string">&#39;MyInjectableService&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyInjectableService</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Service class logic here.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12))])}const k=i(d,[["render",u]]),v=JSON.parse('{"path":"/api/core/decorators/Stone/variables/Stone.html","title":"Variable: Stone()","lang":"en-US","frontmatter":{"description":"Variable: Stone() Stone decorator to mark a class as a stone and automatically bind it to the container. This decorator can be used to easily mark a class as injectable within t...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Variable: Stone()\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/api/core/decorators/Stone/variables/Stone.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Variable: Stone()"}],["meta",{"property":"og:description","content":"Variable: Stone() Stone decorator to mark a class as a stone and automatically bind it to the container. This decorator can be used to easily mark a class as injectable within t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.59,"words":177},"filePathRelative":"api/core/decorators/Stone/variables/Stone.md","autoDesc":true}');export{k as comp,v as data};
