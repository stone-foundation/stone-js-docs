import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as i,e as l,a as n,w as e,d as s,r,o as k}from"./app-B3SZc_3K.js";const g={};function m(h,a){const p=r("Tabs"),c=r("RouteLink");return k(),d("div",null,[a[22]||(a[22]=i('<p>Routing in Stone.js is not just about navigating between views, it’s about <strong>matching user intent with system logic</strong> in a way that works seamlessly across <strong>all execution contexts</strong>: browser, server, or serverless.</p><p>In traditional frameworks, routing is often tightly coupled to components or file-based conventions. In Stone.js, routing is decoupled, explicit, and unified. It operates on <strong>event handlers</strong>, and since every <strong>page is an event handler</strong>, routing pages becomes a natural extension of the Stone.js architecture.</p><p>This gives you a powerful and declarative way to:</p><ul><li>Match routes to pages</li><li>Inject parameters and services</li><li>Define bindings</li><li>Support dynamic registration</li><li>And ensure routing works the same way across SPA, SSR, and SOR</li></ul><p>Whether you&#39;re building a small client-side app or a large distributed system, your routing model stays consistent and continuum-aligned.</p><div class="hint-container info"><p class="hint-container-title">Intentions</p><p>In Stone.js, pages don’t just render views, they handle intentions.<br> And routing is how we connect those intentions to the right handler.</p></div><h2 id="defining-routes-for-pages" tabindex="-1"><a class="header-anchor" href="#defining-routes-for-pages"><span>Defining Routes for Pages</span></a></h2><p>In Stone.js, you define page routes using the same techniques available for any event handler, because <strong>pages are just handlers</strong> in the view dimension.</p><p>You can register a route to a page using:</p><ul><li>The <strong>declarative API</strong>, with the <code>@Page()</code> decorator</li><li>The <strong>imperative API</strong>, with the <code>definePage()</code> utility</li></ul><p>These definitions are static, they’re evaluated during the application’s setup phase and are ideal for most applications.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>All advanced router features are available for pages: parameters, regex validation, aliases assignment, bindings, and more.</p></div>',12)),l(p,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:e(({value:t,isActive:o})=>a[0]||(a[0]=[s("Declarative")])),title1:e(({value:t,isActive:o})=>a[1]||(a[1]=[s("Imperative")])),tab0:e(({value:t,isActive:o})=>a[2]||(a[2]=[n("h3",{id:"declarative-example",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative-example"},[n("span",null,"Declarative Example")])],-1),n("p",null,[s("Use the "),n("code",null,"@Page()"),s(" decorator for class-based pages. It provides better introspection, supports lazy loading out of the box, and works perfectly with the blueprint system.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Page "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/use-react'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Page")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'/users/:id@user(\\\\d+)'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'user.view'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  bindings"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" id"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'userService@findOneBy'"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserPage"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},[s("IComponentEventHandler"),n("span",{class:"token operator"},"<"),s("ReactIncomingEvent"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" event "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(" RenderContext"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" React"),n("span",{class:"token punctuation"},"."),s("ReactNode "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"const"),s(" user "),n("span",{class:"token operator"},"="),s(" event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'user'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"<"),s("div"),n("span",{class:"token operator"},">"),s("Hello "),n("span",{class:"token punctuation"},"{"),s("user"),n("span",{class:"token punctuation"},"."),s("fullname"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("div"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:o})=>a[3]||(a[3]=[n("h3",{id:"imperative-example",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imperative-example"},[n("span",null,"Imperative Example")])],-1),n("p",null,[s("Use "),n("code",null,"definePage()"),s(" when working with factory-based pages or when you prefer full control.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" definePage "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/use-react'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"UserPage"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" event "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(" RenderContext"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" React"),n("span",{class:"token punctuation"},"."),s("ReactNode "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"const"),s(" user "),n("span",{class:"token operator"},"="),s(" event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'user'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"<"),s("div"),n("span",{class:"token operator"},">"),s("Hello "),n("span",{class:"token punctuation"},"{"),s("user"),n("span",{class:"token punctuation"},"."),s("fullname"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("div"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token function"},"definePage"),n("span",{class:"token punctuation"},"("),s("UserPage"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'user.view'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  path"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'/users/:id@user(\\\\d+)'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  bindings"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" id"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'userService@findOneBy'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[23]||(a[23]=i(`<h3 id="why-static-definitions" tabindex="-1"><a class="header-anchor" href="#why-static-definitions"><span>Why Static Definitions?</span></a></h3><p>Static routes:</p><ul><li>Are fully introspectable</li><li>Support lazy-loading</li><li>Are compatible with all adapter types (browser/server/etc.)</li><li>Integrate naturally with the Blueprint setup</li></ul><p>For more dynamic or runtime-driven scenarios, refer to the <strong>Runtime Page Registration</strong> section or the <a href="../router/definitions">Router documentation</a>.</p><h2 id="dynamic-route-bindings" tabindex="-1"><a class="header-anchor" href="#dynamic-route-bindings"><span>Dynamic Route Bindings</span></a></h2><p>Stone.js allows you to define smart, declarative routes that not only match a path, but also <strong>inject data directly into the request context</strong>, before your page handler is even called.</p><p>This is done using <strong>route bindings</strong>.</p><p>Bindings enable you to:</p><ul><li>Validate and extract route parameters</li><li>Automatically resolve data from services (e.g., load a user by ID)</li><li>Reduce boilerplate in your <code>handle()</code> or <code>render()</code> methods</li></ul><h3 id="syntax-param-alias-regex" tabindex="-1"><a class="header-anchor" href="#syntax-param-alias-regex"><span>Syntax: <code>:param@alias(regex)</code></span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Page</span></span><span class="token punctuation">(</span><span class="token string">&#39;/users/:id@user(\\\\d+)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  bindings<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    id<span class="token operator">:</span> <span class="token string">&#39;userService@findOneBy&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This tells Stone.js:</p><ul><li><code>:id</code> is the route parameter</li><li><code>user</code> is the binding alias</li><li><code>\\\\d+</code> is the regex that validates the parameter</li><li><code>userService@findOneBy</code> is the service method to call with <code>id</code> as argument</li></ul><h3 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How it works</span></a></h3><p>With that definition in place:</p><ul><li>Before your page is executed, Stone.js calls <code>userService.findOneBy(key, value)</code></li><li>The result is injected as <code>event.params.user</code></li><li>No <code>handle()</code> method is required, you can access the user directly in <code>render()</code></li></ul><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> event <span class="token punctuation">}</span><span class="token operator">:</span> RenderContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> user <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>fullname<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This makes pages lighter, especially when your data model is tightly bound to your URL structure.</p></div><h3 id="ssr-notice-bindings-are-not-snapshotted-automatically" tabindex="-1"><a class="header-anchor" href="#ssr-notice-bindings-are-not-snapshotted-automatically"><span>SSR Notice: Bindings are not snapshotted automatically</span></a></h3><p>If you&#39;re using <strong>SSR</strong> and want to pass the bound data to the client without fetching again, you must <strong>explicitly snapshot it</strong> in your service using <code>reactRuntime.snapshot()</code>.</p><p>Refer to the <a href="./fetching#snapshot">Snapshot documentation</a> for guidance.</p><h3 id="when-to-use-bindings" tabindex="-1"><a class="header-anchor" href="#when-to-use-bindings"><span>When to use bindings</span></a></h3><p>Use bindings when:</p><ul><li>The parameter maps directly to a resource (e.g., <code>/users/:id</code>)</li><li>You want to inject data into <code>event</code> with minimal code</li><li>You want to keep pages minimal and focused</li></ul><p>Avoid bindings when:</p><ul><li>You need conditional logic, branching, or multiple service calls, use <code>handle()</code> instead.</li></ul><h2 id="lazy-loading" tabindex="-1"><a class="header-anchor" href="#lazy-loading"><span>Lazy Loading</span></a></h2><p>Stone.js fully supports <strong>lazy loading</strong> for pages, allowing you to load only the code needed for the active route. This improves performance, reduces initial bundle size, and makes large applications more scalable.</p><p>The way lazy loading is handled depends on which API you use to register your page.</p>`,29)),l(p,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:e(({value:t,isActive:o})=>a[4]||(a[4]=[s("Declarative")])),title1:e(({value:t,isActive:o})=>a[5]||(a[5]=[s("Imperative")])),tab0:e(({value:t,isActive:o})=>a[6]||(a[6]=[n("h3",{id:"declarative-api-lazy-by-default",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative-api-lazy-by-default"},[n("span",null,"Declarative API: Lazy by default")])],-1),n("p",null,[s("When you register pages using the "),n("code",null,"@Page()"),s(" decorator, "),n("strong",null,"lazy loading is enabled automatically"),s(".")],-1),n("p",null,"Stone.js uses dynamic imports behind the scenes to ensure your page module is only loaded when its route is accessed.",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Page")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'/about'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'about'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"AboutPage"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},[s("IComponentEventHandler"),n("span",{class:"token operator"},"<"),s("ReactIncomingEvent"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" React"),n("span",{class:"token punctuation"},"."),s("ReactNode "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"<"),s("div"),n("span",{class:"token operator"},">"),s("About Us"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("div"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("Even though this looks like a normal class, Stone.js will isolate the file and load it only when the "),n("code",null,"/about"),s(" route is activated.")],-1),n("p",null,"No manual configuration required, declarative pages are lazy by design.",-1)])),tab1:e(({value:t,isActive:o})=>a[7]||(a[7]=[n("h3",{id:"imperative-api-lazy-by-manual-setup",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imperative-api-lazy-by-manual-setup"},[n("span",null,"Imperative API: Lazy by manual setup")])],-1),n("p",null,[s("When using the imperative "),n("code",null,"definePage()"),s(" function, "),n("strong",null,"you must configure lazy loading explicitly"),s(".")],-1),n("p",null,"You do this by:",-1),n("ol",null,[n("li",null,[s("Returning a function that performs a dynamic "),n("code",null,"import()")]),n("li",null,[s("Setting the "),n("code",null,"lazy: true"),s(" flag in the route options")])],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token function"},"definePage"),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'./HomePage'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),s("v "),n("span",{class:"token operator"},"=>"),s(" Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"values"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'home'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    path"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'/home'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    lazy"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token boolean"},"true")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,"Let’s break it down:",-1),n("ul",null,[n("li",null,[n("code",null,"() => import('./HomePage')"),s(" is a function returning a Promise of the module.")]),n("li",null,[n("code",null,"Object.values(v)[0]"),s(" grabs the first export (your page class or factory).")]),n("li",null,[n("code",null,"lazy: true"),s(" tells the router to defer loading this page until the route is accessed.")])],-1),n("p",null,[n("strong",null,"Important:"),s(" The module must contain only "),n("strong",null,"one page per file"),s(" to avoid ambiguity.")],-1)])),_:1}),a[24]||(a[24]=i('<p>Whether you prefer full control or automatic behavior, Stone.js gives you both:</p><ul><li><strong>Automatic lazy loading when you want it</strong></li><li><strong>Manual control when you need it</strong></li></ul><h2 id="runtime-page-registration" tabindex="-1"><a class="header-anchor" href="#runtime-page-registration"><span>Runtime Page Registration</span></a></h2><p>While static route definitions are ideal for most use cases, Stone.js also supports <strong>runtime page registration</strong>, giving you the flexibility to define routes dynamically after the application has started.</p><p>This is useful when:</p><ul><li>Routes depend on runtime data (e.g. feature toggles, plugin systems)</li><li>You want to load routes from external sources</li><li>You&#39;re building an admin panel, CMS, or multi-tenant app</li></ul><p>Since pages are just handlers, you register them at runtime using the <strong>same APIs</strong> as any other event handler, via the <code>router</code> instance.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>Runtime routes should always be registered inside a <strong>service provider’s <code>boot()</code> method</strong>, where the <code>Router</code> service is guaranteed to be available.</p></div>',8)),l(p,{data:[{id:"Fluent"},{id:"Option"},{id:"Collection"}],active:0,"tab-id":"runtime-definitions"},{title0:e(({value:t,isActive:o})=>a[8]||(a[8]=[s("Fluent")])),title1:e(({value:t,isActive:o})=>a[9]||(a[9]=[s("Option")])),title2:e(({value:t,isActive:o})=>a[10]||(a[10]=[s("Collection")])),tab0:e(({value:t,isActive:o})=>a[11]||(a[11]=[n("h3",{id:"fluent-api-chained",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fluent-api-chained"},[n("span",null,"Fluent API (Chained)")])],-1),n("p",null,[s("You can define routes fluently using methods like "),n("code",null,".page()"),s(" and pass a page handler directly:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Provider")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"PageProvider"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"IServiceProvider"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"readonly"),s(" container"),n("span",{class:"token operator"},":"),s(" IContainer"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"boot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"const"),s(" router "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("container"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"make"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("Router"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'router'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    router"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"page"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'/help'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"defineEventHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token function"},"render"),s(),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" ReactIncomingEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"reactResponse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" content"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Help Page'"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:o})=>a[12]||(a[12]=[n("h3",{id:"option-based-definition",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#option-based-definition"},[n("span",null,"Option-based Definition")])],-1),n("p",null,[s("Prefer a structured format? Use "),n("code",null,"router.define()"),s(" and pass route definitions in array form:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[s("router"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"define"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"[")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    method"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'GET'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    path"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'/legal'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    handler"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"defineEventHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token function"},"render"),s(),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" ReactIncomingEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"reactResponse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" content"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Legal Page'"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab2:e(({value:t,isActive:o})=>a[13]||(a[13]=[n("h3",{id:"advanced-collection-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#advanced-collection-api"},[n("span",null,"Advanced: Collection API")])],-1),n("p",null,[s("Need full control over routing structures? Use "),n("code",null,"Route"),s(" and "),n("code",null,"RouteCollection"),s(":")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(" routes "),n("span",{class:"token operator"},"="),s(" RouteCollection"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"create"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("routes"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("Route"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"create"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  method"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'GET'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  path"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'/faq'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  handler"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"defineEventHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"render"),s(),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" ReactIncomingEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"reactResponse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" content"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'FAQ Page'"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("router"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setRoutes"),n("span",{class:"token punctuation"},"("),s("routes"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[25]||(a[25]=i(`<h3 id="runtime-pages-work-the-same" tabindex="-1"><a class="header-anchor" href="#runtime-pages-work-the-same"><span>Runtime Pages Work the Same</span></a></h3><p>The handler for a runtime-registered route can be a valid <strong>page</strong>, as long as it implements the <code>IComponentEventHandler</code> interface and returns JSX in its <code>render()</code> method.</p><p>But be aware:</p><ul><li><strong>Lazy loading is not automatic</strong></li><li>You must use <code>import()</code> and pass a proper handler instance</li><li>Runtime pages are not introspected during setup</li></ul><p>For more details on dynamic routing, see the <a href="../router/definitions#runtime-definition">Router documentation</a>.</p><h2 id="navigation" tabindex="-1"><a class="header-anchor" href="#navigation"><span>Navigation</span></a></h2><p>Stone.js provides two primary ways to navigate between pages:</p><ol><li><strong>Declaratively</strong>, using the built-in <code>&lt;StoneLink /&gt;</code> component</li><li><strong>Programmatically</strong>, using the <code>Router</code> service</li></ol><p>Both approaches are <strong>context-aware</strong> and adapt automatically depending on whether your app is running in <strong>CSR</strong>, <strong>SSR</strong>, or <strong>SOR</strong>.</p><h3 id="declarative-navigation-with-stonelink" tabindex="-1"><a class="header-anchor" href="#declarative-navigation-with-stonelink"><span>Declarative Navigation with <code>&lt;StoneLink /&gt;</code></span></a></h3><p>Use <code>&lt;StoneLink /&gt;</code> to create links between pages in your application.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> StoneLink <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/use-react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StoneLink</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/profile<span class="token punctuation">&quot;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-primary<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  Go to Profile</span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StoneLink</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Why use it instead of a regular <code>&lt;a&gt;</code> tag?</strong></p><p>Because <code>&lt;StoneLink /&gt;</code> is:</p><ul><li>Smart: Uses client-side navigation in SPA/SSR</li><li>Safe: Falls back to traditional navigation in SOR</li><li>Seamless: Keeps routing platform-agnostic</li></ul><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt"><pre><code class="language-txt"><span class="line">CSR / SSR → router.navigate()</span>
<span class="line">SOR       → &lt;a href=&quot;...&quot;&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="programmatic-navigation-with-router-navigate" tabindex="-1"><a class="header-anchor" href="#programmatic-navigation-with-router-navigate"><span>Programmatic Navigation with <code>Router.navigate()</code></span></a></h3><p>You can also navigate manually, typically after a user interaction, like form submission or authentication.</p><h4 id="in-a-page-via-di" tabindex="-1"><a class="header-anchor" href="#in-a-page-via-di"><span>In a Page (via DI):</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> router<span class="token operator">:</span> Router<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">&#39;/dashboard&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="in-a-component-via-stonecontext" tabindex="-1"><a class="header-anchor" href="#in-a-component-via-stonecontext"><span>In a Component (via StoneContext):</span></a></h4><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/router&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> StoneContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/use-react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> container <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>StoneContext<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> router <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">router<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">&#39;/logout&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="where-is-navigate-supported" tabindex="-1"><a class="header-anchor" href="#where-is-navigate-supported"><span>Where is <code>navigate()</code> supported?</span></a></h3><table><thead><tr><th>Context</th><th>Supported?</th><th>Behavior</th></tr></thead><tbody><tr><td>SPA (CSR)</td><td>✅</td><td>Uses history API for seamless nav</td></tr><tr><td>SSR (hydrated)</td><td>✅</td><td>Behaves like CSR after hydration</td></tr><tr><td>SOR</td><td>❌</td><td>Not available, use <code>&lt;StoneLink /&gt;</code></td></tr></tbody></table><p>In <strong>SOR (Server-Only Rendering)</strong>, there is <strong>no JavaScript runtime</strong> in the browser. That’s why <code>router.navigate()</code> cannot work there.</p><p>To ensure safe navigation in SOR, always use <code>&lt;StoneLink /&gt;</code>.</p><h2 id="router-features-available-to-pages" tabindex="-1"><a class="header-anchor" href="#router-features-available-to-pages"><span>Router Features Available to Pages</span></a></h2><p>Because every <strong>page</strong> in Stone.js is just a specialized <strong>event handler</strong>, it inherits <strong>all router features</strong> available through the <code>@stone-js/router</code> module.</p><p>This means you don’t need a separate routing system for pages, everything you can do with the router, you can do with pages.</p><p>Here’s what’s available:</p><h3 id="declarative-and-imperative-definitions" tabindex="-1"><a class="header-anchor" href="#declarative-and-imperative-definitions"><span>Declarative and Imperative Definitions</span></a></h3><p>You can define routes using:</p><ul><li><code>@Page()</code> for class-based declarative registration</li><li><code>definePage()</code> for factory-based or runtime control</li></ul><p>Both support lazy loading, bindings, and more.</p><h3 id="route-bindings" tabindex="-1"><a class="header-anchor" href="#route-bindings"><span>Route Bindings</span></a></h3><p>Automatically fetch and inject resources based on route parameters:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Page</span></span><span class="token punctuation">(</span><span class="token string">&#39;/articles/:slug@article&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  bindings<span class="token operator">:</span> <span class="token punctuation">{</span> slug<span class="token operator">:</span> <span class="token string">&#39;articleService@findBySlug&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The resolved <code>article</code> is available in <code>event.get(&#39;article&#39;)</code>.</p><div class="hint-container info"><p class="hint-container-title">Reminder</p><p>Bindings are <strong>not</strong> snapshotted automatically, use <code>reactRuntime.snapshot()</code> when needed.</p></div><h3 id="nested-grouped-routes" tabindex="-1"><a class="header-anchor" href="#nested-grouped-routes"><span>Nested &amp; Grouped Routes</span></a></h3><p>Organize your routes using naming conventions or use nested path structures:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Page</span></span><span class="token punctuation">(</span><span class="token string">&#39;/admin/users/:id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;admin.users.view&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can group routes logically by domain, module, or adapter.</p><h3 id="regex-parameter-validation" tabindex="-1"><a class="header-anchor" href="#regex-parameter-validation"><span>Regex Parameter Validation</span></a></h3><p>Validate route parameters inline:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Page</span></span><span class="token punctuation">(</span><span class="token string">&#39;/posts/:id(\\\\d+)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;posts.detail&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This matches only numeric IDs.</p><h3 id="repeatable-optional-parameters" tabindex="-1"><a class="header-anchor" href="#repeatable-optional-parameters"><span>Repeatable &amp; Optional Parameters</span></a></h3><p>Use advanced path patterns for more expressive URLs:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Page</span></span><span class="token punctuation">(</span><span class="token string">&#39;/tags/:names*&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;tags.filter&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// Repeatable</span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Page</span></span><span class="token punctuation">(</span><span class="token string">&#39;/archive/:year?/:month?&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;archive&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// Optional</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aliases-and-protocol-specific-routes" tabindex="-1"><a class="header-anchor" href="#aliases-and-protocol-specific-routes"><span>Aliases and Protocol-Specific Routes</span></a></h3><p>You can define multiple paths for a single page or restrict a route to a specific protocol (e.g., <code>http</code>, <code>https</code>, <code>ws</code>).</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Page</span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;/faq&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/help&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;support.faq&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,53)),n("p",null,[a[15]||(a[15]=s("📘 For the full list of routing features, see the ")),l(c,{to:"/docs/router/"},{default:e(()=>a[14]||(a[14]=[s("Router documentation")])),_:1,__:[14]}),a[16]||(a[16]=s(". Pages follow the same model and benefit from every router capability."))]),a[26]||(a[26]=i(`<h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>Routing in Stone.js gives you an expressive, flexible system with full control over behavior, structure, and context. But with flexibility comes the need for discipline.</p><p>Here are the recommended practices to keep your routing layer clean, robust, and continuum-aligned.</p><h4 id="use-page-for-most-routes" tabindex="-1"><a class="header-anchor" href="#use-page-for-most-routes"><span>Use <code>@Page()</code> for most routes</span></a></h4><p>Prefer the declarative API (<code>@Page()</code>) whenever possible:</p><ul><li>Automatically lazy-loads the page</li><li>Keeps route logic close to the handler</li><li>Provides better introspection and developer tooling</li><li>Aligns with Blueprint and Dimension registration patterns</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Page</span></span><span class="token punctuation">(</span><span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;about&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AboutPage</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="use-definepage-only-when-necessary" tabindex="-1"><a class="header-anchor" href="#use-definepage-only-when-necessary"><span>Use <code>definePage()</code> only when necessary</span></a></h4><p>Reserve imperative registration for:</p><ul><li>Factory-based pages</li><li>Runtime-assembled apps</li><li>Dynamic plugin/module injection</li><li>Third-party libraries</li></ul><p>Don&#39;t overuse imperative routes just for stylistic reasons, declarative is more maintainable long-term.</p><h4 id="don-t-overuse-bindings" tabindex="-1"><a class="header-anchor" href="#don-t-overuse-bindings"><span>Don’t overuse bindings</span></a></h4><p>Route bindings are a great way to simplify event handler logic, but they:</p><ul><li>Don’t snapshot data automatically</li><li>Should stay simple and predictable</li></ul><p>Use bindings for common resource loading (<code>/users/:id</code>), not for complex logic.</p><p>Snapshot your binding results explicitly if needed in SSR.</p><h4 id="avoid-router-navigate-in-sor" tabindex="-1"><a class="header-anchor" href="#avoid-router-navigate-in-sor"><span>Avoid <code>router.navigate()</code> in SOR</span></a></h4><p>In Server-Only Rendering (SOR) mode, there’s no JavaScript runtime on the client, so <code>router.navigate()</code> doesn’t work.</p><p>Always use <code>&lt;StoneLink /&gt;</code> in components and templates when you need cross-platform-safe navigation.</p><h4 id="use-stonelink-by-default" tabindex="-1"><a class="header-anchor" href="#use-stonelink-by-default"><span>Use <code>&lt;StoneLink /&gt;</code> by default</span></a></h4><p>Use <code>&lt;StoneLink to=&quot;...&quot; /&gt;</code> instead of <code>&lt;a href=&quot;...&quot; /&gt;</code> to:</p><ul><li>Enable seamless navigation in SPA/SSR</li><li>Fallback gracefully to real links in SOR</li><li>Keep the user experience consistent</li></ul><h4 id="keep-routes-grouped-by-domain" tabindex="-1"><a class="header-anchor" href="#keep-routes-grouped-by-domain"><span>Keep routes grouped by domain</span></a></h4><p>Use namespaces, naming conventions, or route groups to organize pages:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Page</span></span><span class="token punctuation">(</span><span class="token string">&#39;/admin/settings&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;admin.settings&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Page</span></span><span class="token punctuation">(</span><span class="token string">&#39;/admin/users/:id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;admin.users.view&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This improves readability, maintainability, and runtime introspection.</p><h4 id="validate-your-dynamic-parameters" tabindex="-1"><a class="header-anchor" href="#validate-your-dynamic-parameters"><span>Validate your dynamic parameters</span></a></h4><p>When using dynamic routes (<code>:id</code>, <code>:slug</code>), always add regex validation to:</p><ul><li>Prevent route matching ambiguity</li><li>Add light security and clarity</li><li>Make behavior predictable</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Page</span></span><span class="token punctuation">(</span><span class="token string">&#39;/orders/:id(\\\\d+)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;orders.detail&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="define-runtime-routes-in-boot" tabindex="-1"><a class="header-anchor" href="#define-runtime-routes-in-boot"><span>Define runtime routes in <code>boot()</code></span></a></h4><p>If you&#39;re registering routes dynamically, always do it inside a service provider’s <code>boot()</code> method:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Provider</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyModuleProvider</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">make</span><span class="token generic class-name"><span class="token operator">&lt;</span>Router<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;router&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    router<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token string">&#39;/docs&#39;</span><span class="token punctuation">,</span> DocsPageHandler<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This ensures that all dependencies are available and the router is initialized.</p><h4 id="don-t-bring-another-router" tabindex="-1"><a class="header-anchor" href="#don-t-bring-another-router"><span>Don’t bring another router</span></a></h4><p>Stone.js already provides a unified, multi-context router with support for SPA, SSR, SOR, and middleware.</p><p>You don’t need <code>react-router</code>, or any other third-party navigation library. Using them will lead to conflicts, redundancy, and unnecessary complexity.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>In Stone.js, routing is not a side feature, it’s a foundational mechanism that connects user intention with application behavior across every dimension of execution.</p><p>Pages in Stone.js are just context-aware event handlers, and routing is the way they’re discovered, matched, and invoked.</p><p>By aligning routing with the Continuum Architecture:</p><ul><li>You get consistent, introspectable routing behavior across SPA, SSR, and SOR</li><li>You can define routes declaratively or imperatively, statically or at runtime</li><li>You gain access to powerful features like route bindings, nested paths, protocol filters, and more</li><li>You avoid framework lock-in by using a router designed for both frontend and backend dimensions</li></ul><p>With <code>&lt;StoneLink /&gt;</code>, <code>Router.navigate()</code>, and adapter-aware navigation handling, you&#39;re always in control, no matter the environment.</p><h3 id="in-short" tabindex="-1"><a class="header-anchor" href="#in-short"><span>In short:</span></a></h3><ul><li>A <strong>Page</strong> is a handler.</li><li>A <strong>route</strong> is an intention pathway.</li><li>An <strong>Incoming Event</strong> is an intention.</li><li>And <strong>Stone.js routing</strong> is how you map one to the other, elegantly, contextually, and universally.</li></ul>`,45)),n("p",null,[a[18]||(a[18]=s("For more advanced features and low-level routing tools, refer to the full ")),l(c,{to:"/docs/router/"},{default:e(()=>a[17]||(a[17]=[s("Router documentation")])),_:1,__:[17]}),a[19]||(a[19]=s(".")),a[20]||(a[20]=n("br",null,null,-1)),a[21]||(a[21]=s(" But when it comes to Pages, this is everything you need to route with power and precision."))])])}const y=u(g,[["render",m]]),f=JSON.parse('{"path":"/docs/react/routing.html","title":"Routing","lang":"en-US","frontmatter":{"title":"Routing","description":"Routing in Stone.js is not just about navigating between views, it’s about matching user intent with system logic in a way that works seamlessly across all execution contexts: b...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Routing\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/docs/react/routing.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Routing"}],["meta",{"property":"og:description","content":"Routing in Stone.js is not just about navigating between views, it’s about matching user intent with system logic in a way that works seamlessly across all execution contexts: b..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":7.93,"words":2380},"filePathRelative":"docs/react/routing.md","autoDesc":true}');export{y as comp,f as data};
