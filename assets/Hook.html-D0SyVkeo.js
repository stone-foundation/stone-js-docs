import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as a,a as n,e as c,w as r,r as p,o as i}from"./app-D3YQYQ8j.js";const l={};function d(m,e){const s=p("RouteLink");return i(),o("div",null,[e[1]||(e[1]=a(`<h1 id="function-hook" tabindex="-1"><a class="header-anchor" href="#function-hook"><span>Function: Hook()</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">Hook</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">:</span> MethodDecorator<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Hook decorator to mark a method as a lifecycle hook And automatically add it to the global lifecycle hook registry.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> <em>extends</em> <code>Function</code> = <code>Function</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name"><span>name</span></a></h3>`,8)),n("p",null,[c(s,{to:"/api/core/declarations/type-aliases/HookName.html"},{default:r(()=>e[0]||(e[0]=[n("code",null,"HookName",-1)])),_:1,__:[0]})]),e[2]||(e[2]=a(`<p>The name of the lifecycle hook.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>MethodDecorator</code></p><p>A class decorator function that sets the metadata using the provided options.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// ...</span></span>
<span class="line">   <span class="token decorator"><span class="token at operator">@</span><span class="token function">Hook</span></span><span class="token punctuation">(</span><span class="token string">&#39;onStart&#39;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token function">onStart</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6))])}const k=t(l,[["render",d]]),y=JSON.parse('{"path":"/api/core/decorators/Hook/functions/Hook.html","title":"Function: Hook()","lang":"en-US","frontmatter":{"description":"Function: Hook() Hook decorator to mark a method as a lifecycle hook And automatically add it to the global lifecycle hook registry. Type Parameters T T extends Function = Funct...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function: Hook()\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/core/decorators/Hook/functions/Hook.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Function: Hook()"}],["meta",{"property":"og:description","content":"Function: Hook() Hook decorator to mark a method as a lifecycle hook And automatically add it to the global lifecycle hook registry. Type Parameters T T extends Function = Funct..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.23,"words":69},"filePathRelative":"api/core/decorators/Hook/functions/Hook.md","autoDesc":true}');export{k as comp,y as data};
