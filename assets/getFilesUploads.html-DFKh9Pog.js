import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as a,o as s}from"./app-D3YQYQ8j.js";const o={};function p(i,e){return s(),t("div",null,e[0]||(e[0]=[a(`<h1 id="function-getfilesuploads" tabindex="-1"><a class="header-anchor" href="#function-getfilesuploads"><span>Function: getFilesUploads()</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token function">getFilesUploads</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span></span>
<span class="line">  fields<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  files<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> UploadedFile<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Get file uploads.</p><p>Get streamed or pre-read(not streamed) file upload.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="event" tabindex="-1"><a class="header-anchor" href="#event"><span>event</span></a></h3><p>The incoming event containing the file data.</p><p><code>IncomingMessage</code> | { <code>body</code>: <code>unknown</code>; <code>headers</code>: <code>IncomingHttpHeaders</code>; }</p><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>options</span></a></h3><p><code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p><p>The options for file upload limits.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>Promise</code>&lt;{ <code>fields</code>: <code>Record</code>&lt;<code>string</code>, <code>string</code>&gt;; <code>files</code>: <code>Record</code>&lt;<code>string</code>, <code>UploadedFile</code>[]&gt;; }&gt;</p><p>A promise that resolves with the uploaded files and fields.</p>`,14)]))}const l=n(o,[["render",p]]),d=JSON.parse('{"path":"/api/http-core/utils/functions/getFilesUploads.html","title":"Function: getFilesUploads()","lang":"en-US","frontmatter":{"description":"Function: getFilesUploads() Get file uploads. Get streamed or pre-read(not streamed) file upload. Parameters event The incoming event containing the file data. IncomingMessage |...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function: getFilesUploads()\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/http-core/utils/functions/getFilesUploads.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Function: getFilesUploads()"}],["meta",{"property":"og:description","content":"Function: getFilesUploads() Get file uploads. Get streamed or pre-read(not streamed) file upload. Parameters event The incoming event containing the file data. IncomingMessage |..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.24,"words":72},"filePathRelative":"api/http-core/utils/functions/getFilesUploads.md","autoDesc":true}');export{l as comp,d as data};
