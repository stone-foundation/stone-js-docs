import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as p,a as s,e as r,w as o,r as i,o as c}from"./app-D3YQYQ8j.js";const l={};function d(h,a){const e=i("RouteLink");return c(),t("div",null,[a[1]||(a[1]=p(`<h1 id="class-commandinput" tabindex="-1"><a class="header-anchor" href="#class-commandinput"><span>Class: CommandInput</span></a></h1><p>Class representing a CommandInput Facade. Provides a simplified and consistent API for prompting users in the terminal using the <code>prompts</code> library. Supports a variety of question types, such as text, number, confirm, password, select, multiselect, and more.</p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h2><h3 id="ask" tabindex="-1"><a class="header-anchor" href="#ask"><span>ask()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">ask</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> fallback<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Asks the user for a string input.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><h5 id="message" tabindex="-1"><a class="header-anchor" href="#message"><span>message</span></a></h5><p><code>string</code></p><p>The question to display to the user.</p><h5 id="fallback" tabindex="-1"><a class="header-anchor" href="#fallback"><span>fallback?</span></a></h5><p><code>string</code></p><p>An optional default value.</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><p>The user&#39;s response as a string.</p><hr><h3 id="asknumber" tabindex="-1"><a class="header-anchor" href="#asknumber"><span>askNumber()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">askNumber</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> fallback<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Asks the user for a numeric input.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><h5 id="message-1" tabindex="-1"><a class="header-anchor" href="#message-1"><span>message</span></a></h5><p><code>string</code></p><p>The question to display to the user.</p><h5 id="fallback-1" tabindex="-1"><a class="header-anchor" href="#fallback-1"><span>fallback?</span></a></h5><p><code>number</code></p><p>An optional default numeric value.</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>number</code>&gt;</p><p>The user&#39;s response as a number.</p><hr><h3 id="choice" tabindex="-1"><a class="header-anchor" href="#choice"><span>choice()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">choice</span><span class="token punctuation">(</span></span>
<span class="line">   message<span class="token punctuation">,</span> </span>
<span class="line">   choices<span class="token punctuation">,</span> </span>
<span class="line">   fallbackIndex<span class="token punctuation">,</span> </span>
<span class="line">multiple<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Asks the user to choose from a list of options.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h4><h5 id="message-2" tabindex="-1"><a class="header-anchor" href="#message-2"><span>message</span></a></h5><p><code>string</code></p><p>The message to display to the user.</p><h5 id="choices" tabindex="-1"><a class="header-anchor" href="#choices"><span>choices</span></a></h5><p><code>Choice</code>[]</p><p>A list of string options to choose from.</p><h5 id="fallbackindex" tabindex="-1"><a class="header-anchor" href="#fallbackindex"><span>fallbackIndex</span></a></h5><p><code>number</code>[] = <code>...</code></p><p>An array of fallback selected indices (default is first).</p><h5 id="multiple" tabindex="-1"><a class="header-anchor" href="#multiple"><span>multiple</span></a></h5><p><code>boolean</code> = <code>false</code></p><p>Whether to allow multiple selections (checkbox style).</p><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>string</code> | <code>string</code>[]&gt;</p><p>The user&#39;s selection(s) as a string or array of strings.</p><hr><h3 id="confirm" tabindex="-1"><a class="header-anchor" href="#confirm"><span>confirm()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">confirm</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> fallback<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Asks the user for a yes/no confirmation.</p><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3"><span>Parameters</span></a></h4><h5 id="message-3" tabindex="-1"><a class="header-anchor" href="#message-3"><span>message</span></a></h5><p><code>string</code></p><p>The confirmation message to show.</p><h5 id="fallback-2" tabindex="-1"><a class="header-anchor" href="#fallback-2"><span>fallback</span></a></h5><p><code>boolean</code> = <code>false</code></p><p>The default value if the user provides no response (defaults to false).</p><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><p>The user&#39;s response as a boolean.</p><hr><h3 id="editor" tabindex="-1"><a class="header-anchor" href="#editor"><span>editor()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">editor</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> fallback<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Opens a pseudo-editor by asking the user to input a multi-line value in the terminal. (Note: actual editor support is limited in <code>prompts</code>, so this simulates one via text input).</p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4"><span>Parameters</span></a></h4><h5 id="message-4" tabindex="-1"><a class="header-anchor" href="#message-4"><span>message</span></a></h5><p><code>string</code></p><p>The message to display to the user.</p><h5 id="fallback-3" tabindex="-1"><a class="header-anchor" href="#fallback-3"><span>fallback?</span></a></h5><p><code>string</code></p><p>An optional default value.</p><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><p>The user&#39;s response as a string.</p><hr><h3 id="prompt" tabindex="-1"><a class="header-anchor" href="#prompt"><span>prompt()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token generic-function"><span class="token function">prompt</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>question<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Prompts the user with a single question and returns the response.</p><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h4><h5 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h5><p><code>T</code></p><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5"><span>Parameters</span></a></h4><h5 id="question" tabindex="-1"><a class="header-anchor" href="#question"><span>question</span></a></h5><p><code>Omit</code>&lt;<code>PromptObject</code>, <code>&quot;name&quot;</code>&gt;</p><p>A prompt object without a <code>name</code>, which will be set to &#39;value&#39;.</p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><p>The user&#39;s input cast to the specified type.</p><hr><h3 id="secret" tabindex="-1"><a class="header-anchor" href="#secret"><span>secret()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">secret</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Asks the user for a hidden (secret) input such as a password.</p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6"><span>Parameters</span></a></h4><h5 id="message-5" tabindex="-1"><a class="header-anchor" href="#message-5"><span>message</span></a></h5><p><code>string</code></p><p>The message to display to the user.</p><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><p>The user&#39;s input as a string.</p><hr><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create"><span>create()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token operator">:</span> CommandInput<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Factory method to create a new CommandInput instance.</p><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7"><span>Parameters</span></a></h4><h5 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>options</span></a></h5>`,109)),s("p",null,[r(e,{to:"/api/node-cli-adapter/command/CommandInput/interfaces/CommandInputOptions.html"},{default:o(()=>a[0]||(a[0]=[s("code",null,"CommandInputOptions",-1)])),_:1,__:[0]})]),a[2]||(a[2]=s("p",null,"The options to configure the CommandInput instance.",-1)),a[3]||(a[3]=s("h4",{id:"returns-7",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#returns-7"},[s("span",null,"Returns")])],-1)),a[4]||(a[4]=s("p",null,[s("code",null,"CommandInput")],-1)),a[5]||(a[5]=s("p",null,"A new instance of CommandInput.",-1))])}const g=n(l,[["render",d]]),b=JSON.parse('{"path":"/api/node-cli-adapter/command/CommandInput/classes/CommandInput.html","title":"Class: CommandInput","lang":"en-US","frontmatter":{"description":"Class: CommandInput Class representing a CommandInput Facade. Provides a simplified and consistent API for prompting users in the terminal using the prompts library. Supports a ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Class: CommandInput\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/node-cli-adapter/command/CommandInput/classes/CommandInput.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Class: CommandInput"}],["meta",{"property":"og:description","content":"Class: CommandInput Class representing a CommandInput Facade. Provides a simplified and consistent API for prompting users in the terminal using the prompts library. Supports a ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":1.46,"words":437},"filePathRelative":"api/node-cli-adapter/command/CommandInput/classes/CommandInput.md","autoDesc":true}');export{g as comp,b as data};
