import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,b as l,e as i,w as o,d as n,r as a,o as d}from"./app-C80Pz9_H.js";const u={};function m(f,e){const p=a("RouteLink");return d(),s("div",null,[t("p",null,[i(p,{to:"/api/pipeline/"},{default:o(()=>e[0]||(e[0]=[t("strong",null,"Pipeline Documentation",-1)])),_:1,__:[0]})]),e[37]||(e[37]=t("hr",null,null,-1)),t("p",null,[i(p,{to:"/api/pipeline/"},{default:o(()=>e[1]||(e[1]=[n("Pipeline Documentation")])),_:1,__:[1]}),e[3]||(e[3]=n(" / ")),i(p,{to:"/api/pipeline/declarations/"},{default:o(()=>e[2]||(e[2]=[n("declarations")])),_:1,__:[2]}),e[4]||(e[4]=n(" / PipeResolver"))]),e[38]||(e[38]=t("h1",{id:"type-alias-piperesolver-t-r-args",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-alias-piperesolver-t-r-args"},[t("span",null,"Type Alias: PipeResolver()<T, R, Args>")])],-1)),t("blockquote",null,[t("p",null,[e[6]||(e[6]=t("strong",null,"PipeResolver",-1)),e[7]||(e[7]=n("<")),e[8]||(e[8]=t("code",null,"T",-1)),e[9]||(e[9]=n(", ")),e[10]||(e[10]=t("code",null,"R",-1)),e[11]||(e[11]=n(", ")),e[12]||(e[12]=t("code",null,"Args",-1)),e[13]||(e[13]=n("> = (")),e[14]||(e[14]=t("code",null,"pipe",-1)),e[15]||(e[15]=n(") => ")),i(p,{to:"/api/pipeline/declarations/type-aliases/PipeInstance.html"},{default:o(()=>e[5]||(e[5]=[t("code",null,"PipeInstance",-1)])),_:1,__:[5]}),e[16]||(e[16]=n("<")),e[17]||(e[17]=t("code",null,"T",-1)),e[18]||(e[18]=n(", ")),e[19]||(e[19]=t("code",null,"R",-1)),e[20]||(e[20]=n("> | ")),e[21]||(e[21]=t("code",null,"undefined",-1))])]),e[39]||(e[39]=l('<p>Defined in: <a href="https://github.com/stonemjs/pipeline/blob/4373463e5220be8ed997c5e4b7e1c704715db014/src/declarations.ts#L82" target="_blank" rel="noopener noreferrer">declarations.ts:82</a></p><p>A function type that represents a resolver for a given pipe.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> = <code>unknown</code></p><p>The type of the passable object in the pipeline.</p><h3 id="r" tabindex="-1"><a class="header-anchor" href="#r"><span>R</span></a></h3><p><code>R</code> = <code>T</code></p><p>The type of the return value from the resolved pipe, which defaults to <code>T</code>.</p><h3 id="args" tabindex="-1"><a class="header-anchor" href="#args"><span>Args</span></a></h3><p><code>Args</code> <em>extends</em> <code>any</code>[] = <code>any</code>[]</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="pipe" tabindex="-1"><a class="header-anchor" href="#pipe"><span>pipe</span></a></h3>',13)),t("p",null,[i(p,{to:"/api/pipeline/declarations/interfaces/MetaPipe.html"},{default:o(()=>e[22]||(e[22]=[t("code",null,"MetaPipe",-1)])),_:1,__:[22]}),e[23]||(e[23]=n("<")),e[24]||(e[24]=t("code",null,"T",-1)),e[25]||(e[25]=n(", ")),e[26]||(e[26]=t("code",null,"R",-1)),e[27]||(e[27]=n(", ")),e[28]||(e[28]=t("code",null,"Args",-1)),e[29]||(e[29]=n(">"))]),e[40]||(e[40]=t("p",null,"The pipe that needs to be resolved, which can be either a simple pipe or a MetaPipe.",-1)),e[41]||(e[41]=t("h2",{id:"returns",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns"},[t("span",null,"Returns")])],-1)),t("p",null,[i(p,{to:"/api/pipeline/declarations/type-aliases/PipeInstance.html"},{default:o(()=>e[30]||(e[30]=[t("code",null,"PipeInstance",-1)])),_:1,__:[30]}),e[31]||(e[31]=n("<")),e[32]||(e[32]=t("code",null,"T",-1)),e[33]||(e[33]=n(", ")),e[34]||(e[34]=t("code",null,"R",-1)),e[35]||(e[35]=n("> | ")),e[36]||(e[36]=t("code",null,"undefined",-1))]),e[42]||(e[42]=t("p",null,[n("The resolved pipe instance of type "),t("code",null,"PipeInstance<T, R> | undefined"),n(".")],-1)),e[43]||(e[43]=t("p",null,"This type is used to provide a custom mechanism for resolving pipes before they are executed in the pipeline.",-1))])}const R=r(u,[["render",m]]),g=JSON.parse('{"path":"/api/pipeline/declarations/type-aliases/PipeResolver.html","title":"Type Alias: PipeResolver()<T, R, Args>","lang":"en-US","frontmatter":{"description":"/ / PipeResolver Type Alias: PipeResolver()<T, R, Args> PipeResolver<T, R, Args> = (pipe) => <T, R> | undefined Defined in: declarations.ts:82 A function type that represents a ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type Alias: PipeResolver()<T, R, Args>\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/api/pipeline/declarations/type-aliases/PipeResolver.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Type Alias: PipeResolver()<T, R, Args>"}],["meta",{"property":"og:description","content":"/ / PipeResolver Type Alias: PipeResolver()<T, R, Args> PipeResolver<T, R, Args> = (pipe) => <T, R> | undefined Defined in: declarations.ts:82 A function type that represents a ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":0.47,"words":142},"filePathRelative":"api/pipeline/declarations/type-aliases/PipeResolver.md","autoDesc":true}');export{R as comp,g as data};
