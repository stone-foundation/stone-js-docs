import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as p,a,e as s,w as r,d as t,r as i,o as l}from"./app-CIBZQWs4.js";const m={};function c(h,e){const n=i("RouteLink");return l(),o("div",null,[e[11]||(e[11]=p(`<h1 id="class-bodyeventmiddleware" tabindex="-1"><a class="header-anchor" href="#class-bodyeventmiddleware"><span>Class: BodyEventMiddleware</span></a></h1><p>Class representing a BodyEventMiddleware.</p><p>This middleware handles platform-specific messages and transforms them into Stone.js IncomingEvent objects.</p><h2 id="author" tabindex="-1"><a class="header-anchor" href="#author"><span>Author</span></a></h2><p>Mr. Stone</p><h2 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">new</span> <span class="token class-name">BodyEventMiddleware</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token operator">:</span> BodyEventMiddleware<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Create a BodyEventMiddleware.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><h5 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>options</span></a></h5><p>Options for creating the BodyEventMiddleware.</p><h6 id="blueprint" tabindex="-1"><a class="header-anchor" href="#blueprint"><span>blueprint</span></a></h6><p><code>IBlueprint</code></p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>BodyEventMiddleware</code></p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h2><h3 id="handle" tabindex="-1"><a class="header-anchor" href="#handle"><span>handle()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>AwsLambdaHttpAdapterResponseBuilder<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Handles the incoming event, processes it, and invokes the next middleware in the pipeline.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><h5 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>context</span></a></h5>`,22)),a("p",null,[s(n,{to:"/api/aws-lambda-http-adapter/declarations/interfaces/AwsLambdaHttpAdapterContext.html"},{default:r(()=>e[0]||(e[0]=[a("code",null,"AwsLambdaHttpAdapterContext",-1)])),_:1,__:[0]})]),e[12]||(e[12]=a("p",null,"The adapter context containing the raw event, execution context, and other data.",-1)),e[13]||(e[13]=a("h5",{id:"next",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#next"},[a("span",null,"next")])],-1)),a("p",null,[e[3]||(e[3]=a("code",null,"NextMiddleware",-1)),e[4]||(e[4]=t("<")),s(n,{to:"/api/aws-lambda-http-adapter/declarations/interfaces/AwsLambdaHttpAdapterContext.html"},{default:r(()=>e[1]||(e[1]=[a("code",null,"AwsLambdaHttpAdapterContext",-1)])),_:1,__:[1]}),e[5]||(e[5]=t(", ")),s(n,{to:"/api/aws-lambda-http-adapter/declarations/type-aliases/AwsLambdaHttpAdapterResponseBuilder.html"},{default:r(()=>e[2]||(e[2]=[a("code",null,"AwsLambdaHttpAdapterResponseBuilder",-1)])),_:1,__:[2]}),e[6]||(e[6]=t(">"))]),e[14]||(e[14]=a("p",null,"The next middleware to be invoked in the pipeline.",-1)),e[15]||(e[15]=a("h4",{id:"returns-1",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#returns-1"},[a("span",null,"Returns")])],-1)),a("p",null,[e[8]||(e[8]=a("code",null,"Promise",-1)),e[9]||(e[9]=t("<")),s(n,{to:"/api/aws-lambda-http-adapter/declarations/type-aliases/AwsLambdaHttpAdapterResponseBuilder.html"},{default:r(()=>e[7]||(e[7]=[a("code",null,"AwsLambdaHttpAdapterResponseBuilder",-1)])),_:1,__:[7]}),e[10]||(e[10]=t(">"))]),e[16]||(e[16]=a("p",null,"A promise that resolves to the destination type after processing.",-1)),e[17]||(e[17]=a("h4",{id:"throws",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#throws"},[a("span",null,"Throws")])],-1)),e[18]||(e[18]=a("p",null,"If required components such as the rawEvent or IncomingEventBuilder are not provided.",-1))])}const b=d(m,[["render",c]]),v=JSON.parse('{"path":"/api/aws-lambda-http-adapter/middleware/BodyEventMiddleware/classes/BodyEventMiddleware.html","title":"Class: BodyEventMiddleware","lang":"en-US","frontmatter":{"description":"Class: BodyEventMiddleware Class representing a BodyEventMiddleware. This middleware handles platform-specific messages and transforms them into Stone.js IncomingEvent objects. ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Class: BodyEventMiddleware\\",\\"image\\":[\\"/logo.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/aws-lambda-http-adapter/middleware/BodyEventMiddleware/classes/BodyEventMiddleware.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Class: BodyEventMiddleware"}],["meta",{"property":"og:description","content":"Class: BodyEventMiddleware Class representing a BodyEventMiddleware. This middleware handles platform-specific messages and transforms them into Stone.js IncomingEvent objects. ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1750220227000,"updatedTime":1750220227000,"contributors":[{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.42,"words":125},"filePathRelative":"api/aws-lambda-http-adapter/middleware/BodyEventMiddleware/classes/BodyEventMiddleware.md","autoDesc":true}');export{b as comp,v as data};
