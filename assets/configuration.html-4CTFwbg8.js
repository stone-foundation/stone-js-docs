import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as e,e as o,r as i,o as p}from"./app-7vCtLRjQ.js";const r={};function l(c,n){const s=i("Mermaid");return p(),t("div",null,[n[0]||(n[0]=e(`<p>In Stone.js, configuration is context-aware, and the best place to store contextual settings is outside your code. While most logic-level configuration lives inside your application’s <a href="../architecture/blueprint"><strong>Blueprint</strong></a>, this page focuses on <strong>environment configuration</strong>: the values that change between development, staging, and production, like API keys, ports, feature flags, and secrets. Environment variables are the recommended way to supply those values.</p><p>Stone.js embraces externalized configuration as a first-class concept in the Continuum Architecture. Configuration is not something you “import”, it’s something you <strong>adapt</strong> from your environment.</p><p>To help you do that, Stone.js provides:</p><ul><li>Support for <code>.env</code> files (private and public)</li><li>Full type-safe access through the <code>Env</code> module</li><li>Public env bundling for frontend deployment</li><li>CI/CD-friendly design for artifact reuse</li></ul><p>In short: configuration belongs in your environment, not in your logic, and Stone.js makes that easy to manage.</p><p>In this page, we’ll cover:</p><ul><li>How <code>.env</code> and <code>.env.public</code> files work</li><li>How variables are loaded and bundled</li><li>How to use the <code>Env</code> API to access them safely</li><li>How to customize env behavior via <code>stone.config.mjs</code></li></ul><div class="hint-container important"><p class="hint-container-title">Important</p><p><code>@stone-js/env</code> is not bundled with Stone.js by default.</p></div><p>To use environment configuration, install it with:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> @stone-js/env</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="the-role-of-env-in-the-continuum" tabindex="-1"><a class="header-anchor" href="#the-role-of-env-in-the-continuum"><span>The Role of Env in the Continuum</span></a></h2><p>In the Continuum Architecture, configuration is part of the <strong>external context</strong>, it’s unpredictable, environment-specific, and often unknown until runtime. That’s why Stone.js doesn’t treat configuration as just a static object, but as a <strong>relationship</strong> between your application and its deployment environment.</p><p>Your application doesn’t <strong>own</strong> its configuration, it <strong>adapts</strong> to it.</p><p>This means:</p><ul><li>You should avoid hardcoding values directly into your application.</li><li>Your application logic should ask the environment what it needs to know.</li><li>The system should validate and normalize that input before using it.</li></ul><p>The <code>Env</code> module acts as the <strong>bridge</strong> between external configuration and internal behavior. It gives your application a reliable and type-safe way to retrieve environment variables, enforce defaults, and catch invalid input early, without leaking domain concerns into the environment.</p><p>This aligns perfectly with the core principle of the Continuum:</p><blockquote><p><em>The domain must not depend directly on its context, but it must be aware that the context is uncertain.</em></p></blockquote><p>Environment configuration lets you <strong>embrace that uncertainty</strong>, with structure.</p><p>In serverless environments like <strong>AWS Lambda</strong>, environment variables are typically defined in the platform settings (e.g., Lambda console, deployment manifest).</p><p>The <code>Env</code> module abstracts <em>where</em> they come from, whether from <code>.env</code> files, runtime process variables, or injected by your FaaS provider, so you can write universal configuration code that works <strong>anywhere</strong>.</p><h2 id="working-with-environment-variables" tabindex="-1"><a class="header-anchor" href="#working-with-environment-variables"><span>Working with Environment Variables</span></a></h2><p>Stone.js supports two kinds of environment variable files:</p><h3 id="env-private-environment" tabindex="-1"><a class="header-anchor" href="#env-private-environment"><span><code>.env</code>, Private Environment</span></a></h3><p>Used for <strong>server-side only</strong> variables. These are sensitive values like database URLs, API keys, or internal feature flags.<br> They are <strong>never bundled</strong>, <strong>never exposed</strong>, and only available in the Node.js runtime.</p><p>You can define variants like:</p><ul><li><code>.env</code> (default)</li><li><code>.env.development</code></li><li><code>.env.production</code></li><li><code>.env.staging</code></li></ul><p>By default, <strong>only <code>.env</code> is loaded</strong>, but you can customize this in <code>stone.config.mjs</code>.</p><h3 id="env-public-public-environment" tabindex="-1"><a class="header-anchor" href="#env-public-public-environment"><span><code>.env.public</code>, Public Environment</span></a></h3><p>Used for <strong>frontend-safe</strong> variables. These can be shipped to the client or included in your SPA/SSR bundle.</p><p>You can define:</p><ul><li><code>.env.public</code></li><li><code>.env.public.development</code></li><li><code>.env.public.production</code>, etc.</li></ul><p>These are automatically transformed into JavaScript files during build time, placed inside the <code>dist/env</code> folder:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">dist/</span>
<span class="line">├── env/</span>
<span class="line">│   ├── enviroments.js</span>
<span class="line">│   ├── enviroments.development.js</span>
<span class="line">│   └── enviroments.production.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At runtime, <strong>only <code>enviroments.js</code> is loaded</strong>. This lets you create <strong>a single build artifact</strong> and override just that file during deployment, no rebuild required.</p><p>This is perfect for CI/CD pipelines where you deploy the same code to multiple environments and just swap out configuration files.</p><h3 id="example-one-artifact-many-environments" tabindex="-1"><a class="header-anchor" href="#example-one-artifact-many-environments"><span>Example: One Artifact, Many Environments</span></a></h3><ol><li>Build your frontend app once.</li><li>Deploy the artifact to all environments.</li><li>In your pipeline, overwrite <code>dist/env/enviroments.js</code> with: <ul><li><code>enviroments.development.js</code> on staging</li><li><code>enviroments.production.js</code> in prod</li></ul></li></ol><p>Your frontend will behave accordingly, without touching your code or rebuilding.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Stone.js works seamlessly in FaaS environments like Lambda, you can define your variables in the function settings and access them via the <code>Env</code> module just like local <code>.env</code> files.</p></div><h2 id="using-the-env-api" tabindex="-1"><a class="header-anchor" href="#using-the-env-api"><span>Using the <code>Env</code> API</span></a></h2><p>The <code>Env</code> module provides a rich set of utilities to retrieve and validate environment variables.<br> However, <strong>you should never call <code>Env</code> utilities directly inside your application logic.</strong></p>`,42)),o(s,{id:"mermaid-239",code:"eJyNjrFug0AMQHe+wrroNpBSNV0YKgWSTp2K1AUxXIIpVp07dDgNLeLfe7ks3Rovlt57sqz1TJYkh1lJjydUOaiDGVGlcAPvxpM5MI7BzAmA6pyVin5i+bAZJpVeKZPF0rHzV7xqH58267VKlmXROunYXY698QKvb6EF2Nb7SdBbw3AM13CSBrLsGYp6b7+amBQRlHWFch6gpRPakZy9yTLKXV3wGQdPVppEa6jkO3zxAZ3zYJjBuhbH2I/BIGzD9u4Tswu10ufh9bQj5nz1EudPWdxdlneXu3/KX9zJeP8="}),n[1]||(n[1]=e(`<p>Instead, you should use <code>Env</code> utilities <strong>only at configuration time</strong>, to pass validated values into the system via the <strong>Blueprint</strong>.</p><p>This guarantees a clean separation of concerns:</p><ul><li><code>Env</code> reads from the <strong>external context</strong></li><li>The <code>Blueprint</code> defines the <strong>internal context</strong></li><li>Your domain stays free of environmental assumptions</li></ul><h3 id="accessing-env-variables-via-blueprint" tabindex="-1"><a class="header-anchor" href="#accessing-env-variables-via-blueprint"><span>Accessing Env Variables via Blueprint</span></a></h3><p>Here’s how you inject a secret from your <code>.env</code> file into the system:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getString <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/env&#39;</span></span>
<span class="line"></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.secret&#39;</span><span class="token punctuation">,</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;APP_SECRET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;no-secret&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This ensures:</p><ul><li>The value is loaded from the external context</li><li>It is validated (or fallback is used)</li><li>It is injected once, during initialization</li><li>Your domain code never touches the <code>Env</code> module</li></ul><div class="hint-container important"><p class="hint-container-title">Important</p><p>This is the <strong>only supported way</strong> to use environment variables in a Stone.js app.</p></div><h3 id="api-overview" tabindex="-1"><a class="header-anchor" href="#api-overview"><span>API Overview</span></a></h3><p>The main function is <code>get()</code>, but Stone.js provides specialized helpers for many types:</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><code>getString</code></td><td>Get a string, with optional format (<code>url</code>, <code>host</code>, <code>email</code>)</td></tr><tr><td><code>getNumber</code></td><td>Get a number</td></tr><tr><td><code>getBoolean</code></td><td>Get a boolean (<code>true</code>, <code>false</code>, <code>1</code>, <code>0</code>)</td></tr><tr><td><code>getArray</code></td><td>Parse a comma-separated list (<code>value,value2</code>)</td></tr><tr><td><code>getObject</code></td><td>Parse a <code>key:value,key2:value2</code> pair list</td></tr><tr><td><code>getJson</code></td><td>Parse JSON string (<code>{ &quot;key&quot;: &quot;value&quot; }</code>)</td></tr><tr><td><code>getEmail</code></td><td>Validate email format</td></tr><tr><td><code>getUrl</code></td><td>Validate URL format</td></tr><tr><td><code>getHost</code></td><td>Validate IP or URL</td></tr><tr><td><code>getEnum</code></td><td>Ensure value is one of a list</td></tr><tr><td><code>custom()</code></td><td>Provide your own validation logic</td></tr></tbody></table><p>You can read more about the specific functions in the <a href="https://www.npmjs.com/package/@stone-js/env" target="_blank" rel="noopener noreferrer">API Reference</a>.</p><h3 id="required-by-default" tabindex="-1"><a class="header-anchor" href="#required-by-default"><span>Required by Default</span></a></h3><p>All <code>Env</code> functions throw an error if:</p><ul><li>The variable is <strong>missing</strong></li><li>The value is <strong>invalid</strong> for its type</li></ul><p>To avoid this, you must provide a default:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getString<span class="token punctuation">,</span> getNumber <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/env&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;APP_NAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;StoneApp&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// Safe: fallback provided</span></span>
<span class="line"><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token string">&#39;PORT&#39;</span><span class="token punctuation">)</span>                   <span class="token comment">// Unsafe: throws if PORT is missing or invalid</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This fail-fast behavior helps catch misconfiguration <strong>before your app starts</strong>, which is exactly what you want.</p><h3 id="env-helpers" tabindex="-1"><a class="header-anchor" href="#env-helpers"><span>Env Helpers</span></a></h3><p>Stone.js provides helper functions to inspect the current environment:</p><table><thead><tr><th>Helper</th><th>Description</th></tr></thead><tbody><tr><td><code>isProduction()</code></td><td>Returns <code>true</code> if the current env is <code>production</code> or <code>prod</code> according to <code>NODE_ENV</code> variable</td></tr><tr><td><code>isNotProduction()</code></td><td>Returns <code>true</code> if not in production</td></tr><tr><td><code>isTesting()</code></td><td>Returns <code>true</code> if in <code>test</code> or <code>testing</code> mode</td></tr><tr><td><code>isBrowser()</code></td><td>Returns <code>true</code> if the code is running in the browser</td></tr></tbody></table><p>These can help you set defaults conditionally:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">isProduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;DB_PROD_URL&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;DB_DEV_URL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mongodb://localhost/dev&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;db.url&#39;</span><span class="token punctuation">,</span> db<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clearing-cached-env-values" tabindex="-1"><a class="header-anchor" href="#clearing-cached-env-values"><span>Clearing Cached Env Values</span></a></h3><p>The <code>Env</code> module caches resolved values for performance.<br> In test environments, you may need to reset it to avoid contamination:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> clearCache <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/env&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="customizing-env-file-loading" tabindex="-1"><a class="header-anchor" href="#customizing-env-file-loading"><span>Customizing Env File Loading</span></a></h2><p>Stone.js gives you full control over how <code>.env</code> and <code>.env.public</code> files are loaded and expanded.<br> This is done through the <code>dotenv</code> configuration inside your <code>stone.config.mjs</code> file.</p><p>This setup lets you:</p><ul><li>Specify multiple env file paths</li><li>Expand variable references like <code>\${API_HOST}</code></li><li>Override values programmatically</li><li>Ignore system-level environment values</li></ul><h3 id="where-to-configure" tabindex="-1"><a class="header-anchor" href="#where-to-configure"><span>Where to Configure</span></a></h3><p>Edit your <code>stone.config.mjs</code> file and update the <code>dotenv</code> section:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// stone.config.mjs</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/cli&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">dotenv</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">expand</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">override</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">ignoreProcessEnv</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">private</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.env.production&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.env&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">override</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">production</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;.env.public.production&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">override</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">staging</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;.env.public.staging&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configuration-options" tabindex="-1"><a class="header-anchor" href="#configuration-options"><span>Configuration Options</span></a></h3><h4 id="options-applies-to-all-files" tabindex="-1"><a class="header-anchor" href="#options-applies-to-all-files"><span><code>options</code> (applies to all files)</span></a></h4><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>expand</code></td><td>Enable <code>\${VAR}</code> expansion</td></tr><tr><td><code>override</code></td><td>Allow file values to override existing env vars</td></tr><tr><td><code>ignoreProcessEnv</code></td><td>Ignore system <code>process.env</code> entirely</td></tr></tbody></table><h4 id="private" tabindex="-1"><a class="header-anchor" href="#private"><span><code>private</code></span></a></h4><p>Specify how <code>.env</code> files are loaded for the server. You can provide:</p><ul><li>A string path or array of paths</li><li><code>default: true</code> to use this config by default</li><li><code>override: true</code> to overwrite existing values</li></ul><h4 id="public" tabindex="-1"><a class="header-anchor" href="#public"><span><code>public</code></span></a></h4><p>This is a mapping per environment (<code>development</code>, <code>production</code>, etc.).</p><p>Each entry must point to a <code>.env.public.*</code> file that will be bundled and transformed into <code>enviroments.&lt;env&gt;.js</code>.</p><h3 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h3><h4 id="use-the-blueprint-not-direct-env-access" tabindex="-1"><a class="header-anchor" href="#use-the-blueprint-not-direct-env-access"><span>Use the Blueprint, Not Direct Env Access</span></a></h4><p>Never call <code>getString()</code> or <code>getNumber()</code> directly inside your domain or handler logic.<br> All configuration should go through the <code>Blueprint</code>:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Good</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;db.host&#39;</span><span class="token punctuation">,</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;DB_HOST&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Bad</span></span>
<span class="line"><span class="token keyword">const</span> dbClient <span class="token operator">=</span> <span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span> url<span class="token operator">:</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;DB_HOST&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This ensures a clean separation between external context and internal behavior, as encouraged by the Continuum Architecture. And a single source of truth for your configuration, the <code>Blueprint</code>.</p><h4 id="validate-and-fail-fast" tabindex="-1"><a class="header-anchor" href="#validate-and-fail-fast"><span>Validate and Fail Fast</span></a></h4><p>All <code>Env</code> functions throw an error when a required variable is missing or invalid, <strong>unless you provide a fallback</strong>.</p><p>Always validate on startup:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token string">&#39;MAX_RETRIES&#39;</span><span class="token punctuation">)</span>         <span class="token comment">// throws if invalid or missing</span></span>
<span class="line"><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token string">&#39;MAX_RETRIES&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>      <span class="token comment">// safe fallback</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This guarantees your app won’t start with an invalid configuration.</p><h4 id="never-hardcode-configuration" tabindex="-1"><a class="header-anchor" href="#never-hardcode-configuration"><span>Never Hardcode Configuration</span></a></h4><p>Avoid hardcoded strings or numbers for things like ports, credentials, feature flags, or URLs.<br> Use <code>.env</code> or <code>.env.public</code> instead.</p><p>Hardcoding breaks portability, testability, and surprises future-you 😄.</p><h4 id="use-env-public-sparingly-and-deliberately" tabindex="-1"><a class="header-anchor" href="#use-env-public-sparingly-and-deliberately"><span>Use <code>.env.public</code> Sparingly and Deliberately</span></a></h4><p>Only put values in <code>.env.public</code> that are:</p><ul><li>Safe to expose to the browser</li><li>Needed by your frontend (e.g. public API URL, brand name, etc.)</li></ul><p>Never include secrets, internal paths, or server-only settings.</p><h4 id="reuse-build-artifacts-with-enviroments-js" tabindex="-1"><a class="header-anchor" href="#reuse-build-artifacts-with-enviroments-js"><span>Reuse Build Artifacts with <code>enviroments.js</code></span></a></h4><p>Take advantage of the Stone.js bundling mechanism:</p><ul><li>Build once</li><li>Deploy anywhere</li><li>Just replace <code>dist/env/enviroments.js</code> in CI/CD</li></ul><p>This approach improves deployment speed and consistency across environments.</p><h4 id="reset-env-cache-in-tests" tabindex="-1"><a class="header-anchor" href="#reset-env-cache-in-tests"><span>Reset Env Cache in Tests</span></a></h4><p>If you&#39;re mocking environment variables during tests, make sure to reset the cache:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> clearCache <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/env&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Stone.js embraces configuration as an external, mutable part of the system, something that should be adapted, not hardcoded.</p><p>Here’s what you need to remember:</p><ul><li>Use <strong><code>.env</code></strong> for private, backend-only variables, not bundled, not exposed</li><li>Use <strong><code>.env.public</code></strong> for safe-to-share variables needed in the frontend, bundled into <code>enviroments.js</code></li><li>Never access <code>Env</code> directly in your domain code, always inject values through the <strong>Blueprint</strong></li><li>All <code>Env</code> functions validate and fail fast unless you provide a default</li><li>You can customize how <code>.env</code> files are loaded via <code>stone.config.mjs</code></li><li>Public env files enable <strong>single-artifact CI/CD</strong> by allowing runtime config replacement</li><li>Works out-of-the-box in <strong>FaaS environments</strong> like AWS Lambda, no need for extra setup</li></ul><p>In the Continuum, configuration is just another expression of <strong>context</strong>,<br> and <code>Env</code> is the clean, structured way to bind that context into your application.</p>`,72))])}const v=a(r,[["render",l]]),h=JSON.parse('{"path":"/docs/essentials/configuration.html","title":"Environment Configuration","lang":"en-US","frontmatter":{"title":"Environment Configuration","description":"In Stone.js, configuration is context-aware, and the best place to store contextual settings is outside your code. While most logic-level configuration lives inside your applica...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Environment Configuration\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/docs/essentials/configuration.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Environment Configuration"}],["meta",{"property":"og:description","content":"In Stone.js, configuration is context-aware, and the best place to store contextual settings is outside your code. While most logic-level configuration lives inside your applica..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":5.82,"words":1745},"filePathRelative":"docs/essentials/configuration.md","autoDesc":true}');export{v as comp,h as data};
