import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,a as e,e as n,w as o,d as r,r as i,o as d}from"./app-BJyWHIWB.js";const c={};function g(u,a){const s=i("RouteLink");return d(),l("div",null,[a[18]||(a[18]=t(`<h1 id="class-consolelogger" tabindex="-1"><a class="header-anchor" href="#class-consolelogger"><span>Class: ConsoleLogger</span></a></h1><p>Console Logger class.</p><p>This class implements the ILogger interface and uses either the native console object or a custom logging tool.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> ConsoleLogger<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> blueprint <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Application started&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="implements" tabindex="-1"><a class="header-anchor" href="#implements"><span>Implements</span></a></h2>`,6)),e("ul",null,[e("li",null,[n(s,{to:"/api/core/declarations/interfaces/ILogger.html"},{default:o(()=>a[0]||(a[0]=[e("code",null,"ILogger",-1)])),_:1,__:[0]})])]),a[19]||(a[19]=t(`<h2 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">new</span> <span class="token class-name">ConsoleLogger</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token operator">:</span> ConsoleLogger<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Constructs a ConsoleLogger instance.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><h5 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>options</span></a></h5>`,6)),e("p",null,[n(s,{to:"/api/core/logger/ConsoleLogger/interfaces/LoggerOptions.html"},{default:o(()=>a[1]||(a[1]=[e("code",null,"LoggerOptions",-1)])),_:1,__:[1]})]),a[20]||(a[20]=t(`<p>Options for creating the ConsoleLogger.</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>ConsoleLogger</code></p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h2><h3 id="debug" tabindex="-1"><a class="header-anchor" href="#debug"><span>debug()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">debug</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Logs debug-level messages, used for debugging purposes.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><h5 id="message" tabindex="-1"><a class="header-anchor" href="#message"><span>message</span></a></h5><p><code>string</code></p><p>The message to log.</p><h5 id="optionalparams" tabindex="-1"><a class="header-anchor" href="#optionalparams"><span>optionalParams</span></a></h5><p>...<code>unknown</code>[]</p><p>Optional parameters to log.</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>void</code></p><h4 id="implementation-of" tabindex="-1"><a class="header-anchor" href="#implementation-of"><span>Implementation of</span></a></h4>`,17)),e("p",null,[n(s,{to:"/api/core/declarations/interfaces/ILogger.html"},{default:o(()=>a[2]||(a[2]=[e("code",null,"ILogger",-1)])),_:1,__:[2]}),a[4]||(a[4]=r(".")),n(s,{to:"/api/core/declarations/interfaces/ILogger.html#debug"},{default:o(()=>a[3]||(a[3]=[e("code",null,"debug",-1)])),_:1,__:[3]})]),a[21]||(a[21]=t(`<hr><h3 id="error" tabindex="-1"><a class="header-anchor" href="#error"><span>error()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Logs errors, used to report errors or exceptions.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h4><h5 id="message-1" tabindex="-1"><a class="header-anchor" href="#message-1"><span>message</span></a></h5><p><code>string</code></p><p>The error message to log.</p><h5 id="optionalparams-1" tabindex="-1"><a class="header-anchor" href="#optionalparams-1"><span>optionalParams</span></a></h5><p>...<code>unknown</code>[]</p><p>Optional parameters to log.</p><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2"><span>Returns</span></a></h4><p><code>void</code></p><h4 id="implementation-of-1" tabindex="-1"><a class="header-anchor" href="#implementation-of-1"><span>Implementation of</span></a></h4>`,14)),e("p",null,[n(s,{to:"/api/core/declarations/interfaces/ILogger.html"},{default:o(()=>a[5]||(a[5]=[e("code",null,"ILogger",-1)])),_:1,__:[5]}),a[7]||(a[7]=r(".")),n(s,{to:"/api/core/declarations/interfaces/ILogger.html#error"},{default:o(()=>a[6]||(a[6]=[e("code",null,"error",-1)])),_:1,__:[6]})]),a[22]||(a[22]=t(`<hr><h3 id="info" tabindex="-1"><a class="header-anchor" href="#info"><span>info()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">info</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Logs informational messages.</p><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3"><span>Parameters</span></a></h4><h5 id="message-2" tabindex="-1"><a class="header-anchor" href="#message-2"><span>message</span></a></h5><p><code>string</code></p><p>The message to log.</p><h5 id="optionalparams-2" tabindex="-1"><a class="header-anchor" href="#optionalparams-2"><span>optionalParams</span></a></h5><p>...<code>unknown</code>[]</p><p>Optional parameters to log.</p><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3"><span>Returns</span></a></h4><p><code>void</code></p><h4 id="implementation-of-2" tabindex="-1"><a class="header-anchor" href="#implementation-of-2"><span>Implementation of</span></a></h4>`,14)),e("p",null,[n(s,{to:"/api/core/declarations/interfaces/ILogger.html"},{default:o(()=>a[8]||(a[8]=[e("code",null,"ILogger",-1)])),_:1,__:[8]}),a[10]||(a[10]=r(".")),n(s,{to:"/api/core/declarations/interfaces/ILogger.html#info"},{default:o(()=>a[9]||(a[9]=[e("code",null,"info",-1)])),_:1,__:[9]})]),a[23]||(a[23]=t(`<hr><h3 id="log" tabindex="-1"><a class="header-anchor" href="#log"><span>log()?</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">optional <span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Logs general messages, similar to <code>info</code> but less specific.</p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4"><span>Parameters</span></a></h4><h5 id="message-3" tabindex="-1"><a class="header-anchor" href="#message-3"><span>message</span></a></h5><p><code>string</code></p><p>The message to log.</p><h5 id="optionalparams-3" tabindex="-1"><a class="header-anchor" href="#optionalparams-3"><span>optionalParams</span></a></h5><p>...<code>unknown</code>[]</p><p>Optional parameters to log.</p><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4"><span>Returns</span></a></h4><p><code>void</code></p><h4 id="implementation-of-3" tabindex="-1"><a class="header-anchor" href="#implementation-of-3"><span>Implementation of</span></a></h4>`,14)),e("p",null,[n(s,{to:"/api/core/declarations/interfaces/ILogger.html"},{default:o(()=>a[11]||(a[11]=[e("code",null,"ILogger",-1)])),_:1,__:[11]}),a[13]||(a[13]=r(".")),n(s,{to:"/api/core/declarations/interfaces/ILogger.html#log"},{default:o(()=>a[12]||(a[12]=[e("code",null,"log",-1)])),_:1,__:[12]})]),a[24]||(a[24]=t(`<hr><h3 id="warn" tabindex="-1"><a class="header-anchor" href="#warn"><span>warn()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">warn</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Logs warnings, used to indicate potential issues.</p><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5"><span>Parameters</span></a></h4><h5 id="message-4" tabindex="-1"><a class="header-anchor" href="#message-4"><span>message</span></a></h5><p><code>string</code></p><p>The warning message to log.</p><h5 id="optionalparams-4" tabindex="-1"><a class="header-anchor" href="#optionalparams-4"><span>optionalParams</span></a></h5><p>...<code>unknown</code>[]</p><p>Optional parameters to log.</p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5"><span>Returns</span></a></h4><p><code>void</code></p><h4 id="implementation-of-4" tabindex="-1"><a class="header-anchor" href="#implementation-of-4"><span>Implementation of</span></a></h4>`,14)),e("p",null,[n(s,{to:"/api/core/declarations/interfaces/ILogger.html"},{default:o(()=>a[14]||(a[14]=[e("code",null,"ILogger",-1)])),_:1,__:[14]}),a[16]||(a[16]=r(".")),n(s,{to:"/api/core/declarations/interfaces/ILogger.html#warn"},{default:o(()=>a[15]||(a[15]=[e("code",null,"warn",-1)])),_:1,__:[15]})]),a[25]||(a[25]=t(`<hr><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create"><span>create()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token operator">:</span> ConsoleLogger<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Create a new ConsoleLogger instance.</p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6"><span>Parameters</span></a></h4><h5 id="options-1" tabindex="-1"><a class="header-anchor" href="#options-1"><span>options</span></a></h5>`,6)),e("p",null,[n(s,{to:"/api/core/logger/ConsoleLogger/interfaces/LoggerOptions.html"},{default:o(()=>a[17]||(a[17]=[e("code",null,"LoggerOptions",-1)])),_:1,__:[17]})]),a[26]||(a[26]=e("p",null,"Options for creating the ConsoleLogger.",-1)),a[27]||(a[27]=e("h4",{id:"returns-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-6"},[e("span",null,"Returns")])],-1)),a[28]||(a[28]=e("p",null,[e("code",null,"ConsoleLogger")],-1)),a[29]||(a[29]=e("ul",null,[e("li",null,"A new instance of ConsoleLogger.")],-1))])}const f=p(c,[["render",g]]),b=JSON.parse('{"path":"/api/core/logger/ConsoleLogger/classes/ConsoleLogger.html","title":"Class: ConsoleLogger","lang":"en-US","frontmatter":{"description":"Class: ConsoleLogger Console Logger class. This class implements the ILogger interface and uses either the native console object or a custom logging tool. Example Implements Con...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Class: ConsoleLogger\\",\\"image\\":[\\"/logo_square.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/core/logger/ConsoleLogger/classes/ConsoleLogger.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Class: ConsoleLogger"}],["meta",{"property":"og:description","content":"Class: ConsoleLogger Console Logger class. This class implements the ILogger interface and uses either the native console object or a custom logging tool. Example Implements Con..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo_square.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.91,"words":273},"filePathRelative":"api/core/logger/ConsoleLogger/classes/ConsoleLogger.md","autoDesc":true}');export{f as comp,b as data};
