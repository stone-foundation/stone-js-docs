import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as i,e as r,w as e,r as u,o as d,a as s,d as n}from"./app-D3YQYQ8j.js";const k={};function m(v,a){const o=u("Tabs");return d(),c("div",null,[a[4]||(a[4]=i(`<p>Stone.js is a micro-framework by design, lightweight, composable, and cloud-native. Its true power, however, unfolds through packages. Packages allow you to extend, specialize, or modularize Stone.js capabilities across projects, teams, or entire ecosystems.</p><p>In Stone.js, a <strong>package</strong> is simply a module that exposes a set of features through the Continuum Architecture. These features can include services, utilities, decorators, middleware, commands, event handlers, or even entire integrations with third-party tools or platforms.</p><p>There are <strong>two kinds of packages</strong> you can build:</p><ul><li><p><strong>Standalone Packages</strong> These are universal libraries, not bound to Stone.js. They provide general-purpose utilities or logic and can be used in any JavaScript or TypeScript environment. You can still make them Stone-compatible by exposing a blueprint wrapper, more on that later.</p></li><li><p><strong>Stone.js-specific Packages</strong> These are deeply integrated into the Stone ecosystem. They speak the language of blueprints, adapters, providers, and the Continuum. Examples include the official <code>@stone-js/router</code> or <code>@stone-js/use-react</code>.</p></li></ul><p>This documentation will guide you through building both types, from creating a reusable, framework-agnostic module, to turning it into a fully integrated, declarative-first Stone.js package.</p><p>Whether you&#39;re crafting new utilities, wrapping external services, or formalizing your team’s internal logic into reusable features, you&#39;re in the right place.</p><p><strong>By the end of this guide, you&#39;ll know how to:</strong></p><ul><li>Structure and build modern ESM packages.</li><li>Support both JavaScript and TypeScript consumers.</li><li>Create blueprints and service providers.</li><li>Expose your logic using both imperative and declarative APIs.</li><li>Integrate with the Continuum&#39;s Setup and Initialization dimensions.</li><li>Package, test, document, and publish your work like a pro.</li></ul><p>Welcome to the power of modular, continuum-native package development.</p><h2 id="authoring-a-package" tabindex="-1"><a class="header-anchor" href="#authoring-a-package"><span>Authoring a Package</span></a></h2><p>Stone.js encourages you to think modular. Each package is its own universe, encapsulating functionality in a clean, reusable, and portable way, whether it’s a CLI utility, a middleware suite, or a full-blown service layer.</p><p>Here’s how to build that universe properly.</p><h3 id="language-and-format" tabindex="-1"><a class="header-anchor" href="#language-and-format"><span>Language and Format</span></a></h3><p>Stone.js is built for the modern JavaScript ecosystem. That means:</p><ul><li><p><strong>Pure ESM only</strong> All packages must be shipped as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreferrer">ES Modules</a>. No CommonJS, no <code>require()</code>, no <code>module.exports</code>. This ensures compatibility across browsers, runtimes, and serverless environments.</p></li><li><p><strong>TypeScript or JavaScript? Both.</strong> You’re free to use either language to write your package, but <strong>you must expose typings</strong>. Stone.js is strongly typed under the hood, and consumers of your package (especially TypeScript users) rely on your types to benefit from autocomplete, validation, and context awareness.</p></li></ul><p>If you write in JavaScript, use <a href="https://jsdoc.app/" target="_blank" rel="noopener noreferrer">JSDoc</a> to generate typings. If you write in TypeScript, just emit the <code>.d.ts</code> files during build.</p><p>Example using JSDoc in JS:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">x</span></span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">y</span></span>
<span class="line"> * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="build-and-transpile" tabindex="-1"><a class="header-anchor" href="#build-and-transpile"><span>Build and Transpile</span></a></h3><p>Even if you develop in TypeScript, your package must be <strong>transpiled to ESM JavaScript</strong> before publishing.</p><p>Key principles:</p><ul><li>Don’t minify. Stone.js handles optimization and minification during deployment.</li><li>Externalize dependencies. Don’t bundle them, let the application resolve them.</li><li>Transpile to ESM. Use <code>tsc</code>, <code>rollup</code>, <code>esbuild</code>, or your tool of choice.</li><li>Optionally bundle your code (e.g. into <code>dist/index.js</code>) for convenience, but it’s not required.</li></ul><p>Stone.js core packages use <a href="https://rollupjs.org/" target="_blank" rel="noopener noreferrer">Rollup</a> for bundling and tree-shaking. You’re free to use the same setup for consistency and performance.</p><h3 id="exporting-modules" tabindex="-1"><a class="header-anchor" href="#exporting-modules"><span>Exporting Modules</span></a></h3><p>Stone.js expects your <code>package.json</code> to declare exports cleanly.</p><p>Use the modern <a href="https://nodejs.org/api/packages.html#exports" target="_blank" rel="noopener noreferrer">Node.js exports field</a>, not <code>main</code>.</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/index.d.ts&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;.&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/index.d.ts&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/index.js&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This makes your package compatible with both JavaScript and TypeScript, and ensures Stone.js can resolve your modules precisely.</p><h3 id="directory-structure-recommended" tabindex="-1"><a class="header-anchor" href="#directory-structure-recommended"><span>Directory Structure (Recommended)</span></a></h3><p>Stone.js doesn’t force a strict folder structure, but if you want to keep things clean and predictable (which you should), here’s a recommended layout:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">my-package/</span>
<span class="line">├── src/</span>
<span class="line">│   ├── commands/</span>
<span class="line">│   ├── decorators/</span>
<span class="line">│   ├── middleware/</span>
<span class="line">│   ├── errors/</span>
<span class="line">│   ├── options/</span>
<span class="line">│   ├── events/</span>
<span class="line">│   ├── declarations.ts</span>
<span class="line">│   ├── blueprintUtils.ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What goes where:</p><ul><li><code>commands/</code>: CLI handlers</li><li><code>decorators/</code>: Your custom decorators (for declarative API)</li><li><code>middleware/</code>: Integration or HTTP middleware</li><li><code>errors/</code>: Custom error classes</li><li><code>options/</code>: Configuration types or options interfaces</li><li><code>events/</code>: Custom event types</li><li><code>declarations.ts</code>: All exposed types</li><li><code>blueprintUtils.ts</code>: Utility functions to help with blueprint creation</li></ul><p>This structure isn&#39;t mandatory, but it’s battle-tested and scales well.</p><h2 id="api-paradigms-for-consumers" tabindex="-1"><a class="header-anchor" href="#api-paradigms-for-consumers"><span>API Paradigms for Consumers</span></a></h2><p>Stone.js supports both <strong>imperative</strong> and <strong>declarative</strong> programming styles, and your package should too.</p><p>Internally, you’re free to build your logic however you want (hint: imperative is required). But when exposing your API to developers, <strong>you must support both paradigms</strong> so users can choose what fits their flow.</p>`,37)),r(o,{data:[{id:"Imperative"},{id:"Declarative"}],active:0,"tab-id":"declarative-imperative"},{title0:e(({value:t,isActive:p})=>a[0]||(a[0]=[n("Imperative")])),title1:e(({value:t,isActive:p})=>a[1]||(a[1]=[n("Declarative")])),tab0:e(({value:t,isActive:p})=>a[2]||(a[2]=[s("h3",{id:"imperative-usage",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#imperative-usage"},[s("span",null,"Imperative Usage")])],-1),s("p",null,[n("This is the "),s("em",null,"foundational"),n(" way Stone.js packages are consumed.")],-1),s("p",null,[n("You "),s("strong",null,"must expose a blueprint"),n(", a static object that tells Stone.js what your package provides and how to configure it. Think of it as the package's contract with the framework.")],-1),s("p",null,"Example:",-1),s("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[s("pre",null,[s("code",{class:"language-typescript"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"export"),n(),s("span",{class:"token keyword"},"const"),n(" myLibBlueprint "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  stone"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    providers"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"[")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token punctuation"},"{"),n(" module"),s("span",{class:"token operator"},":"),n(" MyLibProvider"),s("span",{class:"token punctuation"},","),n(" isClass"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token boolean"},"true"),n(),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"]")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  myLib"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    maxServices"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token number"},"1")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,"Then users can activate it like this:",-1),s("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[s("pre",null,[s("code",{class:"language-typescript"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" myLibBlueprint "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},"'my-lib'")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("blueprint"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"set"),s("span",{class:"token punctuation"},"("),n("myLibBlueprint"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,[n("You can also expose helper functions like "),s("code",null,"defineMyFeature()"),n(" to allow more granular control if needed.")],-1)])),tab1:e(({value:t,isActive:p})=>a[3]||(a[3]=[s("h3",{id:"declarative-usage",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#declarative-usage"},[s("span",null,"Declarative Usage")])],-1),s("p",null,"This is the sugar on top, a clean and elegant way for developers to enable your package through decorators.",-1),s("p",null,[n("Stone.js uses the Stage 3 "),s("a",{href:"https://github.com/tc39/proposal-decorators",target:"_blank",rel:"noopener noreferrer"},"decorators proposal"),n(", but also provides utility wrappers to maintain compatibility with existing decorator syntax.")],-1),s("p",null,"To expose declarative usage:",-1),s("ol",null,[s("li",null,[n("Create a class decorator using "),s("code",null,"classDecoratorLegacyWrapper"),n(".")]),s("li",null,[n("Inside it, inject your blueprint using "),s("code",null,"addBlueprint(...)"),n(".")])],-1),s("p",null,"Example:",-1),s("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[s("pre",null,[s("code",{class:"language-typescript"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" myLibBlueprint "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},"'./myLibBlueprint'")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" ClassType"),s("span",{class:"token punctuation"},","),n(" classDecoratorLegacyWrapper"),s("span",{class:"token punctuation"},","),n(" addBlueprint "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},"'@stone-js/core'")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"export"),n(),s("span",{class:"token keyword"},"const"),n(" MyLib "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token operator"},"<"),s("span",{class:"token constant"},"T"),n(),s("span",{class:"token keyword"},"extends"),n(),s("span",{class:"token class-name"},"ClassType"),n(),s("span",{class:"token operator"},"="),n(" ClassType"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"("),n("options "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(" ClassDecorator "),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token generic-function"},[s("span",{class:"token function"},"classDecoratorLegacyWrapper"),s("span",{class:"token generic class-name"},[s("span",{class:"token operator"},"<"),s("span",{class:"token constant"},"T"),s("span",{class:"token operator"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),n("target"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token constant"},"T"),s("span",{class:"token punctuation"},","),n(" context"),s("span",{class:"token punctuation"},")"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token keyword"},"undefined"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token function"},"addBlueprint"),s("span",{class:"token punctuation"},"("),n("target"),s("span",{class:"token punctuation"},","),n(" context"),s("span",{class:"token punctuation"},","),n(" myLibBlueprint"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token punctuation"},"{"),n(" myLib"),s("span",{class:"token operator"},":"),n(" options "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"as"),n(),s("span",{class:"token builtin"},"any"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,"Then the user activates it like this:",-1),s("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[s("pre",null,[s("code",{class:"language-typescript"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" MyLib "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},"'my-lib'")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" StoneApp "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},"'@stone-js/core'")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token decorator"},[s("span",{class:"token at operator"},"@"),s("span",{class:"token function"},"StoneApp")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token decorator"},[s("span",{class:"token at operator"},"@"),s("span",{class:"token function"},"MyLib")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"{"),n(" maxServices"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token number"},"2"),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"export"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"Application"),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,"This approach makes it easy for users to plug in your package with minimal friction, no manual blueprint juggling required.",-1)])),_:1}),a[5]||(a[5]=i(`<div class="hint-container important"><p class="hint-container-title">Important</p><p>Even in declarative mode, you&#39;re still injecting a blueprint under the hood. It&#39;s just hidden behind a nice decorator wrapper.</p></div><p>Declarative for elegance, imperative for control, your package should offer both.</p><h2 id="blueprint-service-integration" tabindex="-1"><a class="header-anchor" href="#blueprint-service-integration"><span>Blueprint &amp; Service Integration</span></a></h2><p>Stone.js uses the <strong>blueprint</strong> as the universal setup interface. It’s how your package introduces itself to the framework, and how users configure it in a predictable, declarative or imperative way.</p><p>This section covers all the integration points your package may expose: setup (blueprint), integration (adapters), and initialization (providers).</p><h3 id="static-blueprint" tabindex="-1"><a class="header-anchor" href="#static-blueprint"><span>Static Blueprint</span></a></h3><p>The <strong>blueprint</strong> is a plain object that describes:</p><ul><li>What your package provides (services, middlewares, options, etc.)</li><li>How it should be configured</li><li>Where it fits within Stone.js (under <code>stone</code> namespace or a custom one)</li></ul><p>Example:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> myLibBlueprint <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  stone<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    providers<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span> module<span class="token operator">:</span> MyLibProvider<span class="token punctuation">,</span> isClass<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  myLib<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    maxServices<span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can define custom namespaces (<code>myLib</code>) for package-specific options, or use the <code>stone</code> namespace for framework-native components (services, middleware, etc).</p><p>This blueprint is what users will pass into <code>blueprint.set(...)</code> or inject via decorators.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>A package without a blueprint is invisible to Stone.js. No blueprint, no setup, no activation.</p></div><p>You can refer to the <a href="../architecture/blueprint">blueprint documentation</a> for more details on how to structure your blueprint.</p><h3 id="decorator-wrapper-for-declarative-setup" tabindex="-1"><a class="header-anchor" href="#decorator-wrapper-for-declarative-setup"><span>Decorator Wrapper (for Declarative Setup)</span></a></h3><p>As seen earlier, your blueprint decorator is just a convenient way to inject this blueprint into the system.</p><p>Recap:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">StoneApp</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">MyLib</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> maxServices<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Behind the scenes:</p><ul><li>Your decorator wraps the blueprint.</li><li>Stone.js merges the options.</li><li>The setup dimension activates your package.</li></ul><p>Use this to reduce friction and make your package feel <strong>first-class</strong> to declarative developers.</p><h3 id="service-providers" tabindex="-1"><a class="header-anchor" href="#service-providers"><span>Service Providers</span></a></h3><p>Service providers are how your package injects functionality into the <strong>Service Container</strong>, which is part of the Continuum’s <strong>Initialization dimension</strong>.</p><p>You must:</p><ol><li>Create a provider class that registers services into the container.</li><li>Reference that provider in your blueprint under <code>stone.providers</code>.</li></ol><p>Example provider:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyLibProvider</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> container<span class="token operator">:</span> IContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span></span>
<span class="line">      <span class="token punctuation">.</span>container</span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span>MyLibService<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">MyLibService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span>MyLibService<span class="token punctuation">,</span> <span class="token string">&#39;myLibService&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Blueprint registration:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> myLibBlueprint <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  stone<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    providers<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span> module<span class="token operator">:</span> MyLibProvider<span class="token punctuation">,</span> isClass<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>Stone.js only supports <strong>imperative</strong> service registration for third-party library, this is by design.</p></div><h3 id="blueprint-middleware-dynamic-logic" tabindex="-1"><a class="header-anchor" href="#blueprint-middleware-dynamic-logic"><span>Blueprint Middleware (Dynamic Logic)</span></a></h3><p>Some things can’t be defined statically, like conditionally injecting middleware based on the active adapter or runtime context.</p><p>In these cases, you can provide a <strong>blueprint middleware</strong>.</p><p>Blueprint middleware runs after the blueprint is loaded but before the application starts, giving you access to dynamic state (like the current adapter, runtime environment, etc).</p><p>Example registration:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> myLibBlueprint <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  stone<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    providers<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span> module<span class="token operator">:</span> MyLibProvider<span class="token punctuation">,</span> isClass<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    blueprint<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      middleware<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span> module<span class="token operator">:</span> myLibBlueprintMiddleware <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Inside your middleware function:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> myLibBlueprintMiddleware <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">  context<span class="token operator">:</span> BlueprintContext<span class="token punctuation">,</span></span>
<span class="line">  next<span class="token operator">:</span> NextMiddleware</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IBlueprint<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> blueprint <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>blueprint<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;stone.adapter.platform&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;browser&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    blueprint<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token string">&#39;stone.adapter.middleware&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">[</span><span class="token punctuation">{</span> module<span class="token operator">:</span> MyLibMiddleware<span class="token punctuation">,</span> isClass<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> blueprint</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This gives your package <strong>runtime-aware behavior</strong>, without compromising the static configuration model of Stone.js.</p><p>Your package should support static blueprint registration first, and use middleware only when necessary, keep your design predictable, flexible, and easy to inspect.</p><h2 id="testing" tabindex="-1"><a class="header-anchor" href="#testing"><span>Testing</span></a></h2><p>In Stone.js, testing isn’t an afterthought, it’s part of the package’s DNA.</p><p>A well-tested package is:</p><ul><li>Easier to trust</li><li>Easier to change</li><li>Easier to adopt</li></ul><p>While Stone.js doesn’t enforce a specific coverage percentage, <strong>core packages aim for 100% test coverage</strong>, and you should aim high too, especially on public APIs, side-effect logic, and blueprint integration. While 100% doesn&#39;t guarantee quality, it&#39;s a good goal to aim for.</p><h3 id="recommended-stack" tabindex="-1"><a class="header-anchor" href="#recommended-stack"><span>Recommended Stack</span></a></h3><p>Stone.js uses <a href="https://vitest.dev/" target="_blank" rel="noopener noreferrer">Vitest</a> internally, and so should you, unless you have a strong reason not to. It’s:</p><ul><li>Fast</li><li>TypeScript-native</li><li>Jest-compatible in syntax</li><li>Easily integratable with Vite or standalone</li></ul><h3 id="what-to-test" tabindex="-1"><a class="header-anchor" href="#what-to-test"><span>What to Test</span></a></h3><p>Here’s a quick checklist for a healthy test suite:</p><table><thead><tr><th>Area</th><th>What to Cover</th></tr></thead><tbody><tr><td>Blueprint</td><td>Are the right components declared?</td></tr><tr><td>Decorators</td><td>Do they inject blueprints correctly?</td></tr><tr><td>Service providers</td><td>Do services register in the container?</td></tr><tr><td>Public functions/utilities</td><td>Do they return expected results?</td></tr><tr><td>Edge cases</td><td>Does your package behave correctly when misused?</td></tr></tbody></table><p>Example (using Vitest):</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> describe<span class="token punctuation">,</span> it<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> myLibBlueprint <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../src/myLibBlueprint&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;myLibBlueprint&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should define a valid provider&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>myLibBlueprint<span class="token punctuation">.</span>stone<span class="token operator">?.</span>providers<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?.</span>module<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You don’t have to test <em>everything</em>, but you do have to test <em>what matters</em>.</p><h3 id="directory-structure" tabindex="-1"><a class="header-anchor" href="#directory-structure"><span>Directory Structure</span></a></h3><p>Create a <code>test/</code> directory at the root of your package:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">my-package/</span>
<span class="line">├── src/</span>
<span class="line">├── test/</span>
<span class="line">│   ├── blueprint.test.ts</span>
<span class="line">│   ├── service.test.ts</span>
<span class="line">│   └── utils.test.ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Your test files can be suffixed with <code>.test.ts</code> or <code>.spec.ts</code>, and you can organize them by feature, type, or whatever suits your package.</p><p>Stone.js believes in confidence through coverage, when your tests pass, your blueprint becomes bulletproof.</p><h2 id="documentation" tabindex="-1"><a class="header-anchor" href="#documentation"><span>Documentation</span></a></h2><p>Documentation is your package’s handshake with the outside world. It’s how users know what it does, how to use it, and why they should care.</p><p>In the Stone.js ecosystem, a good package isn’t just one that works, it’s one that’s <strong>well-documented, well-typed, and easy to onboard</strong>.</p><h3 id="what-to-document" tabindex="-1"><a class="header-anchor" href="#what-to-document"><span>What to Document</span></a></h3><table><thead><tr><th>Area</th><th>What to Include</th></tr></thead><tbody><tr><td>Public API</td><td>Every function, class, decorator, or config option exposed by your package.</td></tr><tr><td>Blueprint structure</td><td>Show how to use <code>blueprint.set(...)</code> with your package.</td></tr><tr><td>Decorator usage</td><td>If you offer a decorator, show how to use it in a <code>@StoneApp()</code> class.</td></tr><tr><td>Service registration</td><td>Document any services added to the container.</td></tr><tr><td>Configuration options</td><td>Detail all available options and their effects.</td></tr></tbody></table><h3 id="in-code-documentation" tabindex="-1"><a class="header-anchor" href="#in-code-documentation"><span>In-Code Documentation</span></a></h3><p>All public API should be documented inline.</p><ul><li><strong>JavaScript</strong> users: use <a href="https://jsdoc.app" target="_blank" rel="noopener noreferrer">JSDoc</a></li><li><strong>TypeScript</strong> users: use doc comments and generate <code>.d.ts</code> files</li></ul><p>Example with JSDoc:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Initializes the cache with optional TTL.</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>Object<span class="token punctuation">}</span> options</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token punctuation">{</span>number<span class="token punctuation">}</span> options.ttl - Time to live in seconds.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initCache</span><span class="token punctuation">(</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="project-level-files" tabindex="-1"><a class="header-anchor" href="#project-level-files"><span>Project-Level Files</span></a></h3><p>These must be present in every serious package:</p><table><thead><tr><th>File</th><th>Purpose</th></tr></thead><tbody><tr><td><code>README.md</code></td><td>Your front-facing doc: installation, usage, examples.</td></tr><tr><td><code>CHANGELOG.md</code></td><td>Track changes, additions, and breaking changes.</td></tr><tr><td><code>LICENSE</code></td><td>Define legal usage and distribution terms.</td></tr><tr><td><code>CONTRIBUTING.md</code></td><td>(Optional) Explain how others can contribute.</td></tr></tbody></table><h3 id="folder-layout-for-extended-docs" tabindex="-1"><a class="header-anchor" href="#folder-layout-for-extended-docs"><span>Folder Layout for Extended Docs</span></a></h3><p>If your package has a lot to explain (e.g. multiple decorators, services, or runtime options), use a <code>docs/</code> folder:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">my-package/</span>
<span class="line">├── docs/</span>
<span class="line">│   ├── index.md        ← overview or advanced guide</span>
<span class="line">│   ├── api/</span>
<span class="line">│   │   ├── decorators.md</span>
<span class="line">│   │   ├── blueprint.md</span>
<span class="line">│   │   └── config.md</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can generate the API docs using:</p><ul><li><a href="https://typedoc.org/" target="_blank" rel="noopener noreferrer">TypeDoc</a> for TypeScript</li><li><a href="https://jsdoc.app/" target="_blank" rel="noopener noreferrer">JSDoc</a> + static site for JavaScript</li></ul><h3 id="bonus-examples" tabindex="-1"><a class="header-anchor" href="#bonus-examples"><span>Bonus: Examples</span></a></h3><p>Always include 1–2 <strong>realistic usage examples</strong> in your <code>README.md</code>. Even if your package is simple, showing how it integrates into a <code>@StoneApp()</code> setup or with a <code>blueprint.set(...)</code> call helps developers understand the context immediately.</p><p>Documented code is maintained code. A well-documented package saves time for everyone, including you.</p><h2 id="publishing" tabindex="-1"><a class="header-anchor" href="#publishing"><span>Publishing</span></a></h2><p>Once your package is built, tested, and documented, it’s time to get it out into the world.</p><p>Publishing a Stone.js-compatible package follows the same principles as any modern JavaScript package, with a few additional best practices to keep things ecosystem-friendly.</p><h3 id="versioning" tabindex="-1"><a class="header-anchor" href="#versioning"><span>Versioning</span></a></h3><p>Use <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">Semantic Versioning (semver)</a>:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">MAJOR.MINOR.PATCH</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>MAJOR</code>: breaking changes</li><li><code>MINOR</code>: new features, backwards compatible</li><li><code>PATCH</code>: bug fixes, backwards compatible</li></ul><p>Stick to it. Automate it if possible. Respect your users’ time.</p><h3 id="npm-publishing" tabindex="-1"><a class="header-anchor" href="#npm-publishing"><span>NPM Publishing</span></a></h3><p>If your package is public:</p><ol><li><p>Make sure you&#39;re logged in:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> login</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Set the access level (only on first publish):</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> publish <span class="token parameter variable">--access</span> public</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Publish!</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><p>If you&#39;re using <code>pnpm</code> or <code>yarn</code>, their publish commands work the same way.</p><h3 id="github-gitlab-registry" tabindex="-1"><a class="header-anchor" href="#github-gitlab-registry"><span>GitHub / GitLab Registry</span></a></h3><p>If you’re publishing a private or internal package, consider using a scoped registry like GitHub Packages:</p><ul><li>Set your package name to <code>@org/package-name</code></li><li>Configure <code>.npmrc</code> to authenticate with GitHub Token</li><li>Run <code>npm publish</code> as usual</li></ul><h3 id="peer-dependencies" tabindex="-1"><a class="header-anchor" href="#peer-dependencies"><span>Peer Dependencies</span></a></h3><p>If your package depends on Stone.js core modules like <code>@stone-js/core</code>, or <code>@stone-js/http-core</code>, list them as <strong>peer dependencies</strong>:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token property">&quot;peerDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;@stone-js/core&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.0.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;@stone-js/http-core&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.0.0&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Don’t install them directly, let the consumer’s app control the version. Also avoid hard dependencies on things like <code>react</code>, <code>vue</code>, or <code>aws-sdk</code> unless absolutely necessary.</p><h3 id="distribution-files" tabindex="-1"><a class="header-anchor" href="#distribution-files"><span>Distribution Files</span></a></h3><p>Keep it clean:</p><ul><li>Don’t publish your <code>src/</code> folder unless it’s needed.</li><li>Only include <code>dist/</code>, <code>types/</code>, <code>docs/</code>, and your core config files.</li><li>Add a <code>.npmignore</code> or use <code>files</code> in <code>package.json</code>.</li></ul><p>Example:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string">&quot;dist/&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;docs/&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;README.md&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;LICENSE&quot;</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="package-naming" tabindex="-1"><a class="header-anchor" href="#package-naming"><span>Package Naming</span></a></h3><p>For official or community packages, use a clear and scoped naming convention:</p><ul><li>Official: <code>@stone-js/&lt;name&gt;</code></li><li>Community: <code>stone-&lt;name&gt;</code> or <code>@your-org/stone-&lt;name&gt;</code></li></ul><p>This makes it clear what your package does and how it fits in.</p><p>Publishing is your package’s debut, don’t let it show up to the party in sweatpants.</p><h2 id="standalone-vs-framework-specific-packages" tabindex="-1"><a class="header-anchor" href="#standalone-vs-framework-specific-packages"><span>Standalone vs Framework-specific Packages</span></a></h2><p>Not all packages need to be tied to Stone.js, but any package can be <strong>Stone-compatible</strong> if you design it right.</p><p>This section helps you decide <em>what kind of package you&#39;re building</em>, and how to support both styles if needed.</p><h3 id="standalone-packages" tabindex="-1"><a class="header-anchor" href="#standalone-packages"><span>Standalone Packages</span></a></h3><p>Standalone packages are:</p><ul><li>Framework-agnostic</li><li>Usable in Node.js, browser, serverless, or other environments</li><li>Do <strong>not</strong> assume the presence of Stone.js</li></ul><p>Examples:</p><ul><li>A utility library (<code>date-utils</code>, <code>http-client</code>, <code>cache-layer</code>)</li><li>A wrapper around a third-party SDK (Stripe, S3, etc.)</li><li>A CLI tool</li></ul><p>These packages <strong>do not</strong> depend on <code>@stone-js/core</code>, and can be published and used like any regular JavaScript package.</p><p>However… if you want them to work smoothly inside a Stone.js application, you can add <strong>Stone.js compatibility</strong> without losing their standalone nature.</p><h3 id="making-standalone-packages-stone-compatible" tabindex="-1"><a class="header-anchor" href="#making-standalone-packages-stone-compatible"><span>Making Standalone Packages Stone-Compatible</span></a></h3><p>To adapt a universal package to Stone.js:</p><ol><li><p><strong>Create a blueprint wrapper</strong> You can define a simple blueprint file that registers your module into the Stone.js context:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> MyService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./core/MyService&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> myStandaloneBlueprint <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  stone<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    services<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span> module<span class="token operator">:</span> MyService<span class="token punctuation">,</span> isFactory<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> alias<span class="token operator">:</span> <span class="token string">&#39;myService&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Expose a decorator (optional)</strong> If you want to support declarative activation:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">MyStandalone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">return</span> <span class="token function">classDecoratorLegacyWrapper</span><span class="token punctuation">(</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">addBlueprint</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> context<span class="token punctuation">,</span> myStandaloneBlueprint<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Avoid hard dependencies</strong> on <code>@stone-js/core</code>. Use optional peer dependencies instead if needed.</p></li></ol><p>This pattern keeps your package universal but allows it to “snap into” the Stone.js ecosystem when needed.</p><h3 id="stone-js-specific-packages" tabindex="-1"><a class="header-anchor" href="#stone-js-specific-packages"><span>Stone.js-specific Packages</span></a></h3><p>These are packages built specifically for, and only for, Stone.js.</p><p>They rely on:</p><ul><li>The blueprint system</li><li>Lifecycle hooks</li><li>Service container</li><li>Event handlers</li><li>Decorators</li><li>Adapter awareness</li><li>And other continuum concepts</li></ul><p>Examples:</p><ul><li><code>@stone-js/http-core</code></li><li><code>@stone-js/use-react</code></li><li><code>@stone-js/aws-lambda-adapter</code></li></ul><p>These packages <strong>should not</strong> be used outside Stone.js apps, and that’s fine.</p><p>They are deeply tied to the framework’s philosophy and internal mechanics, and their purpose is to <strong>extend Stone.js itself</strong>.</p><p>If your package registers middleware, providers, lifecycle hooks, or uses the adapter context, it’s Stone-specific.</p><h3 id="choose-what-fits" tabindex="-1"><a class="header-anchor" href="#choose-what-fits"><span>Choose What Fits</span></a></h3><table><thead><tr><th>Package Type</th><th>Use When...</th></tr></thead><tbody><tr><td>Standalone</td><td>Logic is reusable in any JS project.</td></tr><tr><td>Stone-specific</td><td>You want tight integration into the Continuum architecture.</td></tr><tr><td>Hybrid (Recommended)</td><td>You want reusability <strong>and</strong> Stone-native integration.</td></tr></tbody></table><p>You don’t have to choose sides. You can write portable logic, then expose it with a Stone.js wrapper, just like the <code>@stone-js/router</code> package does. 😉</p><p>Best of both worlds. 😎</p><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>Whether you’re building a one-off internal package or a reusable library for the entire ecosystem, following best practices ensures that your work is readable, reliable, and respected.</p><p>These guidelines apply across the board, to structure, naming, design, and API exposure.</p><h4 id="expose-both-paradigms" tabindex="-1"><a class="header-anchor" href="#expose-both-paradigms"><span>Expose Both Paradigms</span></a></h4><ul><li>Always offer <strong>imperative usage</strong> via a <code>blueprint</code>.</li><li>Support <strong>declarative usage</strong> via a decorator when it makes sense.</li><li>Even if your package is simple, offering both improves developer experience.</li></ul><h4 id="use-named-exports-only" tabindex="-1"><a class="header-anchor" href="#use-named-exports-only"><span>Use Named Exports Only</span></a></h4><p>Stone.js does not support default exports, <strong>anywhere</strong>.</p><p>Good:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> myLibBlueprint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Bad:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token comment">// ❌</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="prefix-your-namespace" tabindex="-1"><a class="header-anchor" href="#prefix-your-namespace"><span>Prefix Your Namespace</span></a></h4><p>If your blueprint adds a custom namespace, use a clear and collision-free key:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> myLibBlueprint <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  myLib<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    enabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    retries<span class="token operator">:</span> <span class="token number">3</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Avoid dumping things into <code>stone</code> unless you&#39;re contributing to core areas like <code>services</code>, <code>commands</code>, <code>adapters</code>, etc.</p><h4 id="keep-dependencies-light" tabindex="-1"><a class="header-anchor" href="#keep-dependencies-light"><span>Keep Dependencies Light</span></a></h4><p>Your package should not pull in heavy dependencies unless absolutely necessary.</p><ul><li>Avoid bloated libraries</li><li>Use peer dependencies for things the user app should own (e.g. <code>@stone-js/core</code>, <code>react</code>, etc.)</li><li>Don’t hard-couple your logic to external systems if you can avoid it</li></ul><h4 id="type-everything" tabindex="-1"><a class="header-anchor" href="#type-everything"><span>Type Everything</span></a></h4><ul><li>Public API must be typed</li><li>Prefer TypeScript, or use JSDoc + <code>.d.ts</code> for JavaScript</li><li>Export your types explicitly (<code>types</code>, <code>declarations.ts</code>)</li></ul><h4 id="don-t-register-anything-by-side-effect" tabindex="-1"><a class="header-anchor" href="#don-t-register-anything-by-side-effect"><span>Don&#39;t Register Anything by Side Effect</span></a></h4><p>Do not auto-register services, middlewares, or logic when your package is imported.</p><p>Force users to activate your package via:</p><ul><li><code>blueprint.set(...)</code></li><li><code>@MyLib()</code> decorator</li></ul><p>This ensures predictability and avoids surprise bugs or resource conflicts.</p><h4 id="use-undefined-never-null" tabindex="-1"><a class="header-anchor" href="#use-undefined-never-null"><span>Use <code>undefined</code>, Never <code>null</code></span></a></h4><p>Stone.js follows a <strong>strict design convention</strong>: <strong>Missing values are always represented as <code>undefined</code>, never <code>null</code>.</strong></p><p>You’ll see this consistently in APIs like:</p><ul><li><code>blueprint.get(...)</code></li><li><code>container.make(...)</code></li><li>Middleware and lifecycle responses</li></ul><p>To stay aligned with the platform’s behavior:</p><ul><li>Do <strong>not</strong> return or assign <code>null</code> in your package’s public API</li><li>Use <code>undefined</code> to represent absence</li><li>Favor <code>??</code> over <code>||</code> to provide defaults</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> value <span class="token operator">=</span> blueprint<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&#39;default&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Following this pattern ensures your package feels native to Stone.js and avoids ambiguous edge cases.</p><h4 id="your-package-should-be-bundleable" tabindex="-1"><a class="header-anchor" href="#your-package-should-be-bundleable"><span>Your Package Should Be Bundleable</span></a></h4><p>Stone.js applications are built as <strong>self-contained artifacts</strong>, they do not rely on <code>node_modules</code> at runtime. To support this architecture, your package must be <strong>easily bundleable</strong> with tools like Rollup or esbuild.</p><ul><li>Avoid dynamic <code>require()</code></li><li>Use ESM imports only</li><li>Keep dependencies minimal and explicit</li></ul><p>This ensures your package can be included directly in the final application artifact, making it lightweight and deployment-friendly.</p><h4 id="treat-your-package-like-a-product" tabindex="-1"><a class="header-anchor" href="#treat-your-package-like-a-product"><span>Treat Your Package Like a Product</span></a></h4><ul><li>Add a <code>README.md</code> with clear usage instructions.</li><li>Use a <code>CHANGELOG.md</code> to track updates.</li><li>Document options, decorators, services, and gotchas.</li><li>Add tests, even a few is better than none.</li><li>Respect semver. Break things on purpose, not by accident.</li></ul><h4 id="avoid-magic" tabindex="-1"><a class="header-anchor" href="#avoid-magic"><span>Avoid “Magic”</span></a></h4><p>Keep your logic introspectable and traceable.</p><p>Avoid things like:</p><ul><li>Auto-imports</li><li>Runtime dependency injection without clear registration</li><li>Hidden side effects</li></ul><p>Stone.js is designed to be <strong>explicit</strong>, not magical.</p><h4 id="reuse-core-patterns" tabindex="-1"><a class="header-anchor" href="#reuse-core-patterns"><span>Reuse Core Patterns</span></a></h4><p>When in doubt, look at existing Stone.js packages. Patterns are consistent for a reason, decorators, blueprint structure, service providers, etc. are all repeatable.</p><p>Stay aligned with those patterns and your package will <em>just work</em>.</p><p>Stone.js is built on clarity, predictability, and composability, your package should reflect the same values.</p><h2 id="examples-boilerplate" tabindex="-1"><a class="header-anchor" href="#examples-boilerplate"><span>Examples &amp; Boilerplate</span></a></h2><p>The fastest way to learn is to build, but the second fastest is to clone.</p><p>Here are two types of examples you can follow to kickstart your own package development:</p><h3 id="minimal-package-template" tabindex="-1"><a class="header-anchor" href="#minimal-package-template"><span>Minimal Package Template</span></a></h3><p>If you&#39;re starting from scratch, here&#39;s the bare minimum you need:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">my-stone-package/</span>
<span class="line">├── src/</span>
<span class="line">│   ├── MyService.ts</span>
<span class="line">│   └── myStoneBlueprint.ts</span>
<span class="line">├── test/</span>
<span class="line">│   ├── MyService.test.ts</span>
<span class="line">│   └── myStoneBlueprint.test.ts</span>
<span class="line">├── README.md</span>
<span class="line">├── package.json</span>
<span class="line">├── tsconfig.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With a simple <code>myStoneBlueprint.ts</code> file like:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> myStoneBlueprint <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  stone<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    services<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span> module<span class="token operator">:</span> MyService<span class="token punctuation">,</span> isFactory<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> alias<span class="token operator">:</span> <span class="token string">&#39;myService&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Consumers can activate it via:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> myStoneBlueprint <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;my-stone-package&#39;</span></span>
<span class="line"></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>myStoneBlueprint<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or you can go declarative:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">StoneApp</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">MyPackage</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="axios-integration-example-real-world" tabindex="-1"><a class="header-anchor" href="#axios-integration-example-real-world"><span>Axios Integration Example (Real-World)</span></a></h3><p>Here’s how to wrap <code>axios</code> as a service in a Stone.js package.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> axios<span class="token punctuation">,</span> <span class="token punctuation">{</span> AxiosInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> IBlueprint<span class="token punctuation">,</span> IContainer<span class="token punctuation">,</span> IServiceProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AxiosServiceProvider</span> <span class="token keyword">implements</span> <span class="token class-name">IServiceProvider</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> container<span class="token operator">:</span> IContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">instanceIf</span><span class="token punctuation">(</span><span class="token string">&#39;axios&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createAxios</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token function">createAxios</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AxiosInstance <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> blueprint <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">make</span><span class="token generic class-name"><span class="token operator">&lt;</span>IBlueprint<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;blueprint&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> baseURL <span class="token operator">=</span> blueprint<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;app.api.baseURL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://localhost:8080&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> baseURL <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then your blueprint:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> axiosBlueprint <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  stone<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    providers<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span> module<span class="token operator">:</span> AxiosServiceProvider<span class="token punctuation">,</span> isClass<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And usage in the app:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> axiosBlueprint <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@your-org/stone-axios&#39;</span></span>
<span class="line"></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>axiosBlueprint<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use Axios in the app services:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AxiosInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> IContainer<span class="token punctuation">,</span> defineService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">MyService</span> <span class="token operator">=</span> <span class="token punctuation">(</span>container<span class="token operator">:</span> IContainer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> axios <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">make</span><span class="token generic class-name"><span class="token operator">&lt;</span>AxiosInstance<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;axios&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">fetchData</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> response<span class="token punctuation">.</span>data</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> MyServiceBlueprint <span class="token operator">=</span> <span class="token function">defineService</span><span class="token punctuation">(</span></span>
<span class="line">  MyService<span class="token punctuation">,</span></span>
<span class="line">  <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> alias<span class="token operator">:</span> <span class="token string">&#39;myService&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s it, you now have an <code>axios</code> instance injected into the Stone.js service container, fully configurable via <code>blueprint.set(&#39;app.api.baseURL&#39;, ...)</code>.</p><p>This structure can be reused for any third-party SDK or integration. It’s clean, clear, and continuum-aligned.</p><h3 id="bonus-template-repo" tabindex="-1"><a class="header-anchor" href="#bonus-template-repo"><span>Bonus: Template Repo</span></a></h3><p>If you want to get going fast, you can fork this starter (create this in your GitHub org or community):</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">stone-js/stone-package-template</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Features:</p><ul><li>Rollup + TypeScript</li><li>Vitest setup</li><li>Blueprint + decorator</li><li>Typed services</li><li>README + LICENSE + CHANGELOG</li><li>Basic usage examples</li></ul><p>Use it as your official starting point for internal and community packages.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Let’s recap what makes a proper Stone.js package:</p><ul><li><strong>ESM-only</strong>: your package must be modern and portable.</li><li><strong>Typed</strong>: always expose typings, even if you write in JS.</li><li><strong>Blueprint-powered</strong>: everything flows through blueprints, they are the universal interface.</li><li><strong>Declarative + Imperative</strong>: give users the power to choose.</li><li><strong>Minimal and modular</strong>: register only what’s needed, expose only what matters.</li><li><strong>Tested and documented</strong>: it’s not done until it’s trusted.</li></ul><p>Stone.js is built for clarity, composability, and cloud-native architecture, and your packages should be too.</p><p>Welcome to the ecosystem. Build wisely.</p>`,218))])}const b=l(k,[["render",m]]),y=JSON.parse('{"path":"/docs/deeper/development.html","title":"Package development","lang":"en-US","frontmatter":{"title":"Package development","description":"Stone.js is a micro-framework by design, lightweight, composable, and cloud-native. Its true power, however, unfolds through packages. Packages allow you to extend, specialize, ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Package development\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/docs/deeper/development.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Package development"}],["meta",{"property":"og:description","content":"Stone.js is a micro-framework by design, lightweight, composable, and cloud-native. Its true power, however, unfolds through packages. Packages allow you to extend, specialize, ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":12.61,"words":3782},"filePathRelative":"docs/deeper/development.md","autoDesc":true}');export{b as comp,y as data};
