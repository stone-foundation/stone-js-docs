import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as r,e as i,w as e,r as u,o as d,a as s,d as n}from"./app-C80Pz9_H.js";const k={};function h(g,a){const p=u("Tabs");return d(),c("div",null,[a[4]||(a[4]=r(`<p>In a context-aware system like Stone.js, errors aren’t exceptions, they’re part of the design. From failed API calls to unexpected user input, errors can occur at any stage of an application’s lifecycle. The question is not how to avoid them, but how to handle them <strong>gracefully</strong>, both in code and in the UI.</p><p>Stone.js introduces the concept of <strong>Error Pages</strong>: specialized pages rendered in response to failures, designed to catch and display user-friendly messages without crashing the app.</p><p>These pages follow the same composable structure as regular pages but with one key difference: they react to thrown errors, not user events.</p><h3 id="why-error-pages-matter" tabindex="-1"><a class="header-anchor" href="#why-error-pages-matter"><span>Why Error Pages Matter</span></a></h3><p>Error Pages are your system’s visual safety net. Whether something goes wrong during data fetching, rendering, or integration, Stone.js ensures:</p><ul><li>The application remains stable</li><li>The user is guided, not lost</li><li>The error is handled contextually</li></ul><p>Rather than burying users in console errors or blank screens, you offer them meaningful fallback experiences, wrapped in the same powerful context engine that powers your pages.</p><h3 id="handlers-vs-pages-know-the-difference" tabindex="-1"><a class="header-anchor" href="#handlers-vs-pages-know-the-difference"><span>Handlers vs. Pages: Know the Difference</span></a></h3><p>Stone.js has <strong>two mechanisms</strong> for dealing with errors:</p><table><thead><tr><th>Mechanism</th><th>Purpose</th><th>Scope</th><th>Handles UI?</th></tr></thead><tbody><tr><td><strong>Error Handlers</strong></td><td>Catch and process exceptions</td><td>Functional &amp; Integration dimensions</td><td>❌ No</td></tr><tr><td><strong>Error Pages</strong></td><td>Display friendly UI when errors occur</td><td>View dimension (SPA/SSR/SOR)</td><td>✅ Yes</td></tr></tbody></table><p>You can (and should) use <strong>both</strong>:</p><ul><li><strong>Throw</strong> freely in your application logic.</li><li>Let error <strong>handlers</strong> catch the error and return structured responses.</li><li>If the error reaches the <strong>view</strong>, let an <strong>ErrorPage</strong> take over and guide the user.</li></ul><p>Stone.js routes each failure to the appropriate layer, and gives you complete control over how it’s handled.</p><h3 id="a-continuum-safe-system" tabindex="-1"><a class="header-anchor" href="#a-continuum-safe-system"><span>A Continuum-Safe System</span></a></h3><p>Thanks to the Continuum Architecture, error management in Stone.js is:</p><ul><li><strong>Dimension-aware</strong>: Different responses for functional vs. integration failures</li><li><strong>Composable</strong>: Error pages are just React renderers with access to DI and context</li><li><strong>Extensible</strong>: Customize responses per error type, per adapter, or globally</li><li><strong>Framework-consistent</strong>: You register, inject, and snapshot just like any other handler</li></ul><p>An ErrorPage is a <strong>view-level fail-safe</strong>, not just a UI bandage. It’s the moment where <strong>architecture meets empathy</strong>, turning uncertainty into clarity.</p><h2 id="defining-error-pages" tabindex="-1"><a class="header-anchor" href="#defining-error-pages"><span>Defining Error Pages</span></a></h2><p>In Stone.js, an <strong>ErrorPage</strong> is a specialized kind of page: it reacts to thrown errors and renders a React component instead of crashing your app.</p><p>An ErrorPage behaves like a normal Stone page, it can define a <code>head()</code> and <code>render()</code> method, but it also accepts and responds to an error passed to it by the system.</p><p>This is a first-class feature. Whether your app runs in SPA, SSR, or SOR mode, the ErrorPage system provides a unified, dimension-aware way to gracefully handle and display errors.</p><h3 id="error-page-anatomy" tabindex="-1"><a class="header-anchor" href="#error-page-anatomy"><span>Error Page Anatomy</span></a></h3><p>Just like a normal page, you can define an ErrorPage using:</p><ul><li>A <strong>class</strong> (with decorators, ideal for declarative registration)</li><li>A <strong>factory function</strong> (for imperative registration)</li></ul><p>The only difference? The <code>handle()</code> method accepts an <strong>error</strong> as its first parameter.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> event<span class="token operator">:</span> ReactIncomingEvent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can also return structured data from <code>handle()</code>, just like a page, and use that in your <code>render()</code> method.</p><h3 id="the-errorpage-interface" tabindex="-1"><a class="header-anchor" href="#the-errorpage-interface"><span>The ErrorPage Interface</span></a></h3><p>Here’s what you can define:</p><table><thead><tr><th>Method</th><th>Purpose</th></tr></thead><tbody><tr><td><code>head()</code></td><td>(Optional) Set the HTML <code>&lt;head&gt;</code> tags (title, meta, etc.)</td></tr><tr><td><code>handle()</code></td><td>(Optional) Receive the error and incoming event</td></tr><tr><td><code>render()</code></td><td>(Required) Render a React view based on the error state</td></tr></tbody></table><p>The shape can be class-based or factory-based. Let’s look at both.</p>`,31)),i(p,{data:[{id:"Class-based"},{id:"Factory-based"}],active:0,"tab-id":"class-factory"},{title0:e(({value:t,isActive:o})=>a[0]||(a[0]=[n("Class-based")])),title1:e(({value:t,isActive:o})=>a[1]||(a[1]=[n("Factory-based")])),tab0:e(({value:t,isActive:o})=>a[2]||(a[2]=[s("h3",{id:"class-based-example",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#class-based-example"},[s("span",null,"Class-based Example")])],-1),s("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[s("pre",null,[s("code",{class:"language-typescript"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  ErrorPage"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  PageStatus"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  ReactIncomingEvent"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  RenderErrorContext"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},"  IComponentErrorHandler"),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},"'@stone-js/use-react'")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token decorator"},[s("span",{class:"token at operator"},"@"),s("span",{class:"token function"},"ErrorPage")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"{"),n(" layout"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},"'error'"),s("span",{class:"token punctuation"},","),n(" error"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},"'default'"),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"export"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"DefaultErrorPage"),n(),s("span",{class:"token keyword"},"implements"),n(),s("span",{class:"token class-name"},[n("IComponentErrorHandler"),s("span",{class:"token operator"},"<"),n("ReactIncomingEvent"),s("span",{class:"token operator"},">")]),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token decorator"},[s("span",{class:"token at operator"},"@"),s("span",{class:"token function"},"PageStatus")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"500"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token function"},"handle"),s("span",{class:"token punctuation"},"("),n("error"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"any"),s("span",{class:"token punctuation"},","),n(" event"),s("span",{class:"token operator"},":"),n(" ReactIncomingEvent"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token punctuation"},"{"),n(" message"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},"'Something went wrong.'"),n(),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token function"},"render"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"{"),n(" data"),s("span",{class:"token punctuation"},","),n(" statusCode "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token operator"},":"),n(" RenderErrorContext"),s("span",{class:"token operator"},"<"),s("span",{class:"token builtin"},"any"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token operator"},"<"),n("div"),s("span",{class:"token operator"},">")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token operator"},"<"),n("h1"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"{"),n("statusCode"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),n("h1"),s("span",{class:"token operator"},">")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token operator"},"<"),n("p"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"{"),n("data"),s("span",{class:"token operator"},"?."),n("message"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),n("p"),s("span",{class:"token operator"},">")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),n("div"),s("span",{class:"token operator"},">")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:o})=>a[3]||(a[3]=[s("h3",{id:"factory-based-example",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#factory-based-example"},[s("span",null,"Factory-based Example")])],-1),s("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[s("pre",null,[s("code",{class:"language-typescript"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  defineErrorPage"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  ReactIncomingEvent"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},"  RenderErrorContext"),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},"'@stone-js/use-react'")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"const"),n(),s("span",{class:"token function-variable function"},"DefaultErrorPage"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token function"},"handle"),s("span",{class:"token punctuation"},"("),n("error"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token builtin"},"any"),s("span",{class:"token punctuation"},","),n(" event"),s("span",{class:"token operator"},":"),n(" ReactIncomingEvent"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token punctuation"},"{"),n(" message"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},"'Something went wrong.'"),n(),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token function"},"render"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"{"),n(" data"),s("span",{class:"token punctuation"},","),n(" statusCode "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token operator"},":"),n(" RenderErrorContext"),s("span",{class:"token operator"},"<"),s("span",{class:"token builtin"},"any"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token punctuation"},"(")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token operator"},"<"),n("div"),s("span",{class:"token operator"},">")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token operator"},"<"),n("h1"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"{"),n("statusCode"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),n("h1"),s("span",{class:"token operator"},">")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token operator"},"<"),n("p"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"{"),n("data"),s("span",{class:"token operator"},"?."),n("message"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),n("p"),s("span",{class:"token operator"},">")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token operator"},"<"),s("span",{class:"token operator"},"/"),n("div"),s("span",{class:"token operator"},">")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("blueprint"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"set"),s("span",{class:"token punctuation"},"("),s("span",{class:"token function"},"defineErrorPage"),s("span",{class:"token punctuation"},"("),n("DefaultErrorPage"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token punctuation"},"{"),n(" layout"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},"'error'"),s("span",{class:"token punctuation"},","),n(" error"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},"'default'"),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[5]||(a[5]=r(`<h3 id="pagestatus" tabindex="-1"><a class="header-anchor" href="#pagestatus"><span><code>@PageStatus()</code></span></a></h3><p>You can annotate your <code>handle()</code> method with <code>@PageStatus()</code> to indicate the HTTP status code associated with this error. This ensures proper response semantics and accurate metadata for SSR and integrations.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">PageStatus</span></span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>error<span class="token operator">:</span> NotFoundError<span class="token punctuation">,</span> event<span class="token operator">:</span> ReactIncomingEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Not found.&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reuse-layouts" tabindex="-1"><a class="header-anchor" href="#reuse-layouts"><span>Reuse Layouts</span></a></h3><p>Just like standard pages, ErrorPages can use layouts via the <code>layout</code> option:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ErrorPage</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> layout<span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token string">&#39;default&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This lets you provide consistent branding or structural UI for your error views. In the layout’s <code>render()</code> method, you can use <code>&lt;StoneOutlet /&gt;</code> as usual to render the inner error page.</p><h2 id="adapter-error-pages" tabindex="-1"><a class="header-anchor" href="#adapter-error-pages"><span>Adapter Error Pages</span></a></h2><p>Error handling in Stone.js isn’t just for the application logic. When something goes wrong at the adapter level, during raw request processing, platform integration, or low-level execution, Stone.js gives you the ability to render <strong>Adapter Error Pages</strong>.</p><p>These error pages aren’t associated with an incoming event like standard ErrorPages. Instead, they’re rendered directly by the adapter when the application fails before the <code>handle()</code> phase, or if the error happens outside the event lifecycle.</p><h3 id="when-are-adapter-error-pages-used" tabindex="-1"><a class="header-anchor" href="#when-are-adapter-error-pages-used"><span>When Are Adapter Error Pages Used?</span></a></h3><p>Adapter Error Pages are invoked when:</p><ul><li>A thrown error bypasses or breaks the normal lifecycle</li><li>The application fails before it can construct an event</li><li>An error occurs during low-level request parsing or response building</li><li>No matching ErrorPage is available for the error</li></ul><h3 id="special-context-renderadapterlayoutcontext" tabindex="-1"><a class="header-anchor" href="#special-context-renderadapterlayoutcontext"><span>Special Context: <code>RenderAdapterLayoutContext</code></span></a></h3><p>The layout used for adapter error rendering receives a slightly different context than normal layouts:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">RenderAdapterLayoutContext<span class="token operator">&lt;</span>TChildren <span class="token operator">=</span> ReactNode<span class="token punctuation">,</span> TData <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  data<span class="token operator">?</span><span class="token operator">:</span> TData</span>
<span class="line">  error<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span></span>
<span class="line">  statusCode<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  children<span class="token operator">:</span> TChildren</span>
<span class="line">  blueprint<span class="token operator">:</span> IBlueprint</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The main differences:</p><ul><li><code>error</code>: the original error object</li><li><code>statusCode</code>: HTTP code or platform-specific status</li><li><code>blueprint</code>: the application’s blueprint (since container is not guaranteed)</li></ul><p>This context allows your layout to adapt to the error, even without a fully initialized application.</p><h3 id="use-layouts-with-adapter-errors" tabindex="-1"><a class="header-anchor" href="#use-layouts-with-adapter-errors"><span>Use Layouts with Adapter Errors</span></a></h3><p>If you’ve registered a layout using:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">PageLayout</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;error&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can use it in an adapter error page using the decorator <code>AdapterErrorPage</code> like this:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">AdapterErrorPage</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  layout<span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  error<span class="token operator">:</span> <span class="token string">&#39;default&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In your layout’s render method, you can use the status code and error message:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> children<span class="token punctuation">,</span> statusCode<span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token operator">:</span> RenderAdapterLayoutContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Error </span><span class="token punctuation">{</span>statusCode<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>error<span class="token operator">?.</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StoneOutlet</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StoneOutlet</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Even when your app can’t fully initialize, <strong>the adapter can still render a user-facing error</strong> with branding and structure.</p><h2 id="throwing-errors-manually-with-reactruntime-throwerror" tabindex="-1"><a class="header-anchor" href="#throwing-errors-manually-with-reactruntime-throwerror"><span>Throwing Errors Manually with <code>reactRuntime.throwError()</code></span></a></h2><p>In a Stone.js + React application, most errors should be thrown <strong>naturally</strong> (e.g., inside a <code>handle()</code> method, a service, or middleware). But there are scenarios, particularly inside the <strong>React rendering lifecycle</strong>, where you cannot <code>throw</code> an error the standard way.</p><p>Why? Because once the page is rendered, you&#39;re in React&#39;s world. The Stone.js lifecycle is complete. Throwing an error in a component or event handler won&#39;t reach your error handlers or render an <code>ErrorPage</code>.</p><p>That’s where <code>reactRuntime.throwError()</code> comes in.</p><h3 id="use-case-react-component-interactivity" tabindex="-1"><a class="header-anchor" href="#use-case-react-component-interactivity"><span>Use Case: React Component Interactivity</span></a></h3><p>Inside a component, you might want to trigger an error page in response to a user action, like a failed login, an expired session, or access to a forbidden route.</p><p>You can use the <code>reactRuntime</code> utility, which is available in:</p><ul><li>The <strong>constructor</strong> of a class-based page</li><li>The <strong>factory arguments</strong> of a factory-based page</li><li>The <strong>StoneContext</strong> (inside React components)</li></ul><h3 id="inside-a-page-constructor" tabindex="-1"><a class="header-anchor" href="#inside-a-page-constructor"><span>Inside a Page Constructor</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DashboardPage</span> <span class="token keyword">implements</span> <span class="token class-name">IComponentEventHandler<span class="token operator">&lt;</span>ReactIncomingEvent<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">readonly</span> reactRuntime<span class="token operator">:</span> ReactRuntime</span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> container<span class="token operator">:</span> IContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>reactRuntime <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;reactRuntime&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reactRuntime<span class="token punctuation">.</span><span class="token function">throwError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Session expired&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">        Expire Session</span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inside-a-react-component" tabindex="-1"><a class="header-anchor" href="#inside-a-react-component"><span>Inside a React Component</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> StoneContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/use-react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">SessionButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> container <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>StoneContext<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> reactRuntime <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;reactRuntime&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> reactRuntime<span class="token punctuation">.</span><span class="token function">throwError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Forbidden access&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Trigger Error</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How It Works</span></a></h3><ul><li>If the app is running in <strong>CSR</strong> or <strong>hydrated SSR</strong>, the error page will be rendered instantly.</li><li>If it&#39;s <strong>SOR</strong> (server-only), this won’t work, the page has already been rendered and no JavaScript is available to intercept the action.</li></ul><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">reactRuntime<span class="token punctuation">.</span><span class="token function">throwError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">,</span> statusCode<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>error</code>: any instance of <code>Error</code> (or a custom error class)</li><li><code>statusCode</code>: optional, used to route to the right ErrorPage or AdapterErrorPage</li></ul><h3 id="when-to-use-throwerror" tabindex="-1"><a class="header-anchor" href="#when-to-use-throwerror"><span>When to Use <code>throwError()</code></span></a></h3><table><thead><tr><th>Scenario</th><th>Use <code>throwError()</code>?</th><th>Notes</th></tr></thead><tbody><tr><td>Inside <code>handle()</code></td><td>❌ No</td><td>Just <code>throw</code>, Stone.js catches it</td></tr><tr><td>Inside <code>middleware</code></td><td>❌ No</td><td>Use <code>reactRedirectResponse()</code> or throw</td></tr><tr><td>Inside <code>render()</code> method</td><td>✅ Yes</td><td>Lifecycle is over, need programmatic fallback</td></tr><tr><td>Inside component interaction</td><td>✅ Yes</td><td>Useful for buttons, forms, etc.</td></tr></tbody></table><div class="hint-container important"><p class="hint-container-title">Important</p><p>In short: if you’re inside React, and you want to show an error page, <strong>don’t throw</strong>, use <code>reactRuntime.throwError()</code> instead.</p></div><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>Handling errors in Stone.js is about more than catching exceptions, it’s about architecting resilience. These best practices will help you design error flows that are predictable, modular, and aligned with the Continuum.</p><h4 id="separate-error-pages-from-error-handlers" tabindex="-1"><a class="header-anchor" href="#separate-error-pages-from-error-handlers"><span>Separate <strong>Error Pages</strong> from <strong>Error Handlers</strong></span></a></h4><ul><li><strong>Use Error Handlers</strong> to deal with logic and control the response.</li><li><strong>Use Error Pages</strong> to deal with the UI and show users something meaningful.</li><li>Don’t overload one with the role of the other, each has its dimension and purpose.</li></ul><h4 id="always-define-a-default-errorpage" tabindex="-1"><a class="header-anchor" href="#always-define-a-default-errorpage"><span>Always Define a Default ErrorPage</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ErrorPage</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> error<span class="token operator">:</span> <span class="token string">&#39;default&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DefaultErrorPage</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Stone.js will route uncaught or unknown errors here. This ensures your users never face a blank screen or raw stack trace.</p><h4 id="use-pagestatus-for-explicit-status-codes" tabindex="-1"><a class="header-anchor" href="#use-pagestatus-for-explicit-status-codes"><span>Use <code>@PageStatus</code> for Explicit Status Codes</span></a></h4><p>This makes the intent clear and allows adapter-level rendering to behave correctly (like returning 404 or 403 responses).</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">PageStatus</span></span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>error<span class="token operator">:</span> NotFoundError<span class="token punctuation">,</span> event<span class="token operator">:</span> ReactIncomingEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="leverage-layouts-to-reuse-errorpage-design" tabindex="-1"><a class="header-anchor" href="#leverage-layouts-to-reuse-errorpage-design"><span>Leverage Layouts to Reuse ErrorPage Design</span></a></h4><ul><li>Register an <code>error</code> layout to wrap all your error pages.</li><li>Use <code>StoneOutlet</code> to keep things consistent.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ErrorPage</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> layout<span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token string">&#39;default&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="never-throw-inside-render-use-reactruntime-throwerror" tabindex="-1"><a class="header-anchor" href="#never-throw-inside-render-use-reactruntime-throwerror"><span>Never Throw Inside <code>render()</code>, Use <code>reactRuntime.throwError()</code></span></a></h4><p>If you want to trigger an error after rendering begins (e.g. in a React component or button handler), use:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">reactRuntime<span class="token punctuation">.</span><span class="token function">throwError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ForbiddenError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">403</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This ensures the system still handles the error using the full routing and layout system.</p><h4 id="avoid-manual-try-catch-in-pages-or-services" tabindex="-1"><a class="header-anchor" href="#avoid-manual-try-catch-in-pages-or-services"><span>Avoid Manual <code>try/catch</code> in Pages or Services</span></a></h4><p>Throw freely, let Stone.js catch and route the error to the proper handler or page. Manual <code>try/catch</code> often leads to messy fallback logic and duplicated UI code.</p><h4 id="use-custom-error-classes-for-semantic-clarity" tabindex="-1"><a class="header-anchor" href="#use-custom-error-classes-for-semantic-clarity"><span>Use Custom Error Classes for Semantic Clarity</span></a></h4><p>Don’t throw <code>Error(&#39;Access denied&#39;)</code>, throw <code>new AccessDeniedError()</code>. It makes routing easier, logs clearer, and error pages more targeted.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AccessDeniedError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;Access denied&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;AccessDeniedError&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="be-careful-with-adapter-error-pages" tabindex="-1"><a class="header-anchor" href="#be-careful-with-adapter-error-pages"><span>Be Careful with Adapter Error Pages</span></a></h4><ul><li>These are rendered at the platform level, no React context is available.</li><li>Use a separate layout if needed.</li><li>Don’t rely on injected services unless you know what you’re doing (you’re outside initialization).</li></ul><h4 id="don-t-overuse-status-pages" tabindex="-1"><a class="header-anchor" href="#don-t-overuse-status-pages"><span>Don’t Overuse Status Pages</span></a></h4><p>Use <code>@PageStatus</code> only when you want to declare a standard HTTP status code. Don’t misuse it to simulate other flows. Let errors do their job.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Stone.js treats errors as first-class citizens, not exceptions to the rule, but part of the continuum.</p><p>With Error Pages, you gain a <strong>declarative, component-based way to handle rendering failures</strong>. Just like pages, error pages support:</p><ul><li><strong>Class-based and factory-based definitions</strong></li><li><strong>Declarative or imperative registration</strong></li><li><strong>Layouts</strong>, to keep the UI consistent</li><li><strong>Automatic routing</strong>, based on the error class name</li><li><strong>Status codes</strong>, via <code>@PageStatus</code></li><li><strong>Adapter-aware behavior</strong>, for errors at the integration level</li></ul><p>You can throw errors from anywhere, services, event handlers, middleware, or even React components using <code>reactRuntime.throwError()</code>. Stone.js will route them to the proper <strong>Error Page</strong>, render the view, and return the correct status, SSR, SOR, or SPA.</p><p>Behind the scenes, the framework separates:</p><ul><li><strong>The functional dimension</strong>, where the error is caught, contextualized, and optionally resolved</li><li><strong>The view dimension</strong>, where the error is rendered to the user via an Error Page</li></ul><p>This decoupling gives you full flexibility:</p><ul><li>Create friendly error screens without logic leaks</li><li>Log and track internal failures while keeping users calm</li><li>Support all platforms without branching your error logic</li></ul><p>Error Pages in Stone.js are not just pretty fallbacks, they’re <strong>architectural fault boundaries</strong>, cleanly separating disruption from delivery.</p><p>Next time something goes wrong? Your system will respond, cleanly, contextually, and compassionately.</p>`,84))])}const b=l(k,[["render",h]]),y=JSON.parse('{"path":"/docs/react/error-pages.html","title":"Error Pages","lang":"en-US","frontmatter":{"title":"Error Pages","description":"In a context-aware system like Stone.js, errors aren’t exceptions, they’re part of the design. From failed API calls to unexpected user input, errors can occur at any stage of a...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Error Pages\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/docs/react/error-pages.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Error Pages"}],["meta",{"property":"og:description","content":"In a context-aware system like Stone.js, errors aren’t exceptions, they’re part of the design. From failed API calls to unexpected user input, errors can occur at any stage of a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":6.71,"words":2014},"filePathRelative":"docs/react/error-pages.md","autoDesc":true}');export{b as comp,y as data};
