import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as o,o as n}from"./app-CrbMk51G.js";const s={};function r(p,e){return n(),t("div",null,e[0]||(e[0]=[o(`<h1 id="type-alias-proposalmethoddecorator-t" tabindex="-1"><a class="header-anchor" href="#type-alias-proposalmethoddecorator-t"><span>Type Alias: ProposalMethodDecorator()&lt;T&gt;</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">ProposalMethodDecorator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token operator">&lt;</span>TFunction<span class="token operator">&gt;</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TFunction <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Represents a method decorator using the 2023-11 proposal syntax.</p><p>A function that decorates a class method and optionally returns a new method implementation.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> <em>extends</em> <code>Function</code> = <code>Function</code></p><p>The type of the method being decorated.</p><h2 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1"><span>Type Parameters</span></a></h2><h3 id="tfunction" tabindex="-1"><a class="header-anchor" href="#tfunction"><span>TFunction</span></a></h3><p><code>TFunction</code> <em>extends</em> <code>T</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="target" tabindex="-1"><a class="header-anchor" href="#target"><span>target</span></a></h3><p><code>TFunction</code></p><p>The class prototype or static target containing the method.</p><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>context</span></a></h3><p><code>ClassMethodDecoratorContext</code>&lt;<code>T</code>&gt;</p><p>The context object providing metadata about the method.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>TFunction</code> | <code>undefined</code></p><p>The original or a modified method, or <code>undefined</code>.</p>`,21)]))}const i=a(s,[["render",r]]),l=JSON.parse('{"path":"/api/core/declarations/type-aliases/ProposalMethodDecorator.html","title":"Type Alias: ProposalMethodDecorator()<T>","lang":"en-US","frontmatter":{"description":"Type Alias: ProposalMethodDecorator()<T> Represents a method decorator using the 2023-11 proposal syntax. A function that decorates a class method and optionally returns a new m...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type Alias: ProposalMethodDecorator()<T>\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/api/core/declarations/type-aliases/ProposalMethodDecorator.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Type Alias: ProposalMethodDecorator()<T>"}],["meta",{"property":"og:description","content":"Type Alias: ProposalMethodDecorator()<T> Represents a method decorator using the 2023-11 proposal syntax. A function that decorates a class method and optionally returns a new m..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.31,"words":92},"filePathRelative":"api/core/declarations/type-aliases/ProposalMethodDecorator.md","autoDesc":true}');export{i as comp,l as data};
