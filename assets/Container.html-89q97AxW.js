import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as r,a,e as s,w as t,d as i,r as o,o as d}from"./app-BJyWHIWB.js";const u={};function c(h,n){const e=o("RouteLink");return d(),l("div",null,[n[95]||(n[95]=r('<h1 id="class-container" tabindex="-1"><a class="header-anchor" href="#class-container"><span>Class: Container</span></a></h1><p>Class representing a Container.</p><p>The Container class acts as a dependency injection container, managing bindings and resolving instances. It supports different types of bindings, such as singletons, factories, and instances, and allows the use of aliases for bindings. This makes it easier to manage and resolve complex dependency trees in an application.</p><h2 id="author" tabindex="-1"><a class="header-anchor" href="#author"><span>Author</span></a></h2><p>Mr. Stone <a href="mailto:evensstone@gmail.com" target="_blank" rel="noopener noreferrer">evensstone@gmail.com</a></p><h2 id="extends" tabindex="-1"><a class="header-anchor" href="#extends"><span>Extends</span></a></h2>',6)),a("ul",null,[a("li",null,[s(e,{to:"/api/service-container/Proxiable/classes/Proxiable.html"},{default:t(()=>n[0]||(n[0]=[a("code",null,"Proxiable",-1)])),_:1,__:[0]})])]),n[96]||(n[96]=r(`<h2 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">protected</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Container<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Create a container.</p><p>Initializes the container with empty alias and binding maps.</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>Container</code></p><h4 id="overrides" tabindex="-1"><a class="header-anchor" href="#overrides"><span>Overrides</span></a></h4>`,8)),a("p",null,[s(e,{to:"/api/service-container/Proxiable/classes/Proxiable.html"},{default:t(()=>n[1]||(n[1]=[a("code",null,"Proxiable",-1)])),_:1,__:[1]}),n[3]||(n[3]=i(".")),s(e,{to:"/api/service-container/Proxiable/classes/Proxiable.html#constructor"},{default:t(()=>n[2]||(n[2]=[a("code",null,"constructor",-1)])),_:1,__:[2]})]),n[97]||(n[97]=r(`<h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h2><h3 id="alias" tabindex="-1"><a class="header-anchor" href="#alias"><span>alias()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">alias</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> aliases<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Set a binding as alias.</p><p>Adds one or more aliases for a given binding key.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><h5 id="key" tabindex="-1"><a class="header-anchor" href="#key"><span>key</span></a></h5>`,7)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[4]||(n[4]=[a("code",null,"BindingKey",-1)])),_:1,__:[4]})]),n[98]||(n[98]=r(`<p>The binding value.</p><h5 id="aliases" tabindex="-1"><a class="header-anchor" href="#aliases"><span>aliases</span></a></h5><p>One or more strings representing the aliases.</p><p><code>string</code> | <code>string</code>[]</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>this</code></p><p>The container instance.</p><hr><h3 id="autobinding" tabindex="-1"><a class="header-anchor" href="#autobinding"><span>autoBinding()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token generic-function"><span class="token function">autoBinding</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">   name<span class="token punctuation">,</span> </span>
<span class="line">   item<span class="token operator">?</span><span class="token punctuation">,</span> </span>
<span class="line">   singleton<span class="token operator">?</span><span class="token punctuation">,</span> </span>
<span class="line">   alias<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AutoBind value to the service container.</p><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h4><h5 id="v" tabindex="-1"><a class="header-anchor" href="#v"><span>V</span></a></h5>`,13)),a("p",null,[n[6]||(n[6]=a("code",null,"V",-1)),n[7]||(n[7]=i()),n[8]||(n[8]=a("em",null,"extends",-1)),n[9]||(n[9]=i()),s(e,{to:"/api/service-container/declarations/type-aliases/BindingValue.html"},{default:t(()=>n[5]||(n[5]=[a("code",null,"BindingValue",-1)])),_:1,__:[5]})]),n[99]||(n[99]=a("h4",{id:"parameters-1",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#parameters-1"},[a("span",null,"Parameters")])],-1)),n[100]||(n[100]=a("h5",{id:"name",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#name"},[a("span",null,"name")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[10]||(n[10]=[a("code",null,"BindingKey",-1)])),_:1,__:[10]})]),n[101]||(n[101]=r(`<p>A key to make the binding. Can be anything.</p><h5 id="item" tabindex="-1"><a class="header-anchor" href="#item"><span>item?</span></a></h5><p><code>V</code></p><p>The item to bind.</p><h5 id="singleton" tabindex="-1"><a class="header-anchor" href="#singleton"><span>singleton?</span></a></h5><p><code>boolean</code> = <code>true</code></p><p>Bind as singleton when true.</p><h5 id="alias-1" tabindex="-1"><a class="header-anchor" href="#alias-1"><span>alias?</span></a></h5><p>Key binding aliases.</p><p><code>string</code> | <code>string</code>[]</p><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2"><span>Returns</span></a></h4><p><code>this</code></p><p>The container instance.</p><hr><h3 id="binding" tabindex="-1"><a class="header-anchor" href="#binding"><span>binding()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token generic-function"><span class="token function">binding</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> resolver<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Bind a resolver function into the container under the provided key, returning a new instance each time.</p><h4 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1"><span>Type Parameters</span></a></h4><h5 id="v-1" tabindex="-1"><a class="header-anchor" href="#v-1"><span>V</span></a></h5>`,19)),a("p",null,[n[12]||(n[12]=a("code",null,"V",-1)),n[13]||(n[13]=i()),n[14]||(n[14]=a("em",null,"extends",-1)),n[15]||(n[15]=i()),s(e,{to:"/api/service-container/declarations/type-aliases/BindingValue.html"},{default:t(()=>n[11]||(n[11]=[a("code",null,"BindingValue",-1)])),_:1,__:[11]})]),n[102]||(n[102]=a("h4",{id:"parameters-2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#parameters-2"},[a("span",null,"Parameters")])],-1)),n[103]||(n[103]=a("h5",{id:"key-1",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#key-1"},[a("span",null,"key")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[16]||(n[16]=[a("code",null,"BindingKey",-1)])),_:1,__:[16]})]),n[104]||(n[104]=a("p",null,"The key to associate with the value.",-1)),n[105]||(n[105]=a("h5",{id:"resolver",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#resolver"},[a("span",null,"resolver")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/Resolver.html"},{default:t(()=>n[17]||(n[17]=[a("code",null,"Resolver",-1)])),_:1,__:[17]}),n[18]||(n[18]=i("<")),n[19]||(n[19]=a("code",null,"V",-1)),n[20]||(n[20]=i(">"))]),n[106]||(n[106]=r(`<p>The resolver function to provide the value.</p><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3"><span>Returns</span></a></h4><p><code>this</code></p><p>The container instance.</p><hr><h3 id="bindingif" tabindex="-1"><a class="header-anchor" href="#bindingif"><span>bindingIf()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token generic-function"><span class="token function">bindingIf</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> resolver<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Bind a resolver function into the container under the provided key, returning a new instance each time if not already bound.</p><h4 id="type-parameters-2" tabindex="-1"><a class="header-anchor" href="#type-parameters-2"><span>Type Parameters</span></a></h4><h5 id="v-2" tabindex="-1"><a class="header-anchor" href="#v-2"><span>V</span></a></h5>`,10)),a("p",null,[n[22]||(n[22]=a("code",null,"V",-1)),n[23]||(n[23]=i()),n[24]||(n[24]=a("em",null,"extends",-1)),n[25]||(n[25]=i()),s(e,{to:"/api/service-container/declarations/type-aliases/BindingValue.html"},{default:t(()=>n[21]||(n[21]=[a("code",null,"BindingValue",-1)])),_:1,__:[21]})]),n[107]||(n[107]=a("h4",{id:"parameters-3",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#parameters-3"},[a("span",null,"Parameters")])],-1)),n[108]||(n[108]=a("h5",{id:"key-2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#key-2"},[a("span",null,"key")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[26]||(n[26]=[a("code",null,"BindingKey",-1)])),_:1,__:[26]})]),n[109]||(n[109]=a("p",null,"The key to associate with the value.",-1)),n[110]||(n[110]=a("h5",{id:"resolver-1",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#resolver-1"},[a("span",null,"resolver")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/Resolver.html"},{default:t(()=>n[27]||(n[27]=[a("code",null,"Resolver",-1)])),_:1,__:[27]}),n[28]||(n[28]=i("<")),n[29]||(n[29]=a("code",null,"V",-1)),n[30]||(n[30]=i(">"))]),n[111]||(n[111]=r(`<p>The resolver function to provide the value.</p><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4"><span>Returns</span></a></h4><p><code>this</code></p><p>The container instance.</p><hr><h3 id="bound" tabindex="-1"><a class="header-anchor" href="#bound"><span>bound()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">bound</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Check if a value is already bound in the container by its key.</p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4"><span>Parameters</span></a></h4><h5 id="key-3" tabindex="-1"><a class="header-anchor" href="#key-3"><span>key</span></a></h5>`,10)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[31]||(n[31]=[a("code",null,"BindingKey",-1)])),_:1,__:[31]})]),n[112]||(n[112]=r(`<p>The key to check.</p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5"><span>Returns</span></a></h4><p><code>boolean</code></p><p>True if the key is bound, false otherwise.</p><hr><h3 id="clear" tabindex="-1"><a class="header-anchor" href="#clear"><span>clear()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Reset the container so that all bindings are removed.</p><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6"><span>Returns</span></a></h4><p><code>this</code></p><p>The container instance.</p><hr><h3 id="factory" tabindex="-1"><a class="header-anchor" href="#factory"><span>factory()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token generic-function"><span class="token function">factory</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">V</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Resolve a value from the container by its key and return it in a factory function.</p><h4 id="type-parameters-3" tabindex="-1"><a class="header-anchor" href="#type-parameters-3"><span>Type Parameters</span></a></h4><h5 id="v-3" tabindex="-1"><a class="header-anchor" href="#v-3"><span>V</span></a></h5>`,17)),a("p",null,[n[33]||(n[33]=a("code",null,"V",-1)),n[34]||(n[34]=i()),n[35]||(n[35]=a("em",null,"extends",-1)),n[36]||(n[36]=i()),s(e,{to:"/api/service-container/declarations/type-aliases/BindingValue.html"},{default:t(()=>n[32]||(n[32]=[a("code",null,"BindingValue",-1)])),_:1,__:[32]})]),n[113]||(n[113]=a("h4",{id:"parameters-5",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#parameters-5"},[a("span",null,"Parameters")])],-1)),n[114]||(n[114]=a("h5",{id:"key-4",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#key-4"},[a("span",null,"key")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[37]||(n[37]=[a("code",null,"BindingKey",-1)])),_:1,__:[37]})]),n[115]||(n[115]=r(`<p>The key to resolve.</p><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7"><span>Returns</span></a></h4><p>A factory function that returns the resolved value.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8"><span>Returns</span></a></h5><p><code>V</code></p><hr><h3 id="getaliases" tabindex="-1"><a class="header-anchor" href="#getaliases"><span>getAliases()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">getAliases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> BindingKey<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Retrieve the value of the aliases property.</p><h4 id="returns-9" tabindex="-1"><a class="header-anchor" href="#returns-9"><span>Returns</span></a></h4>`,11)),a("p",null,[n[39]||(n[39]=a("code",null,"Map",-1)),n[40]||(n[40]=i("<")),n[41]||(n[41]=a("code",null,"string",-1)),n[42]||(n[42]=i(", ")),s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[38]||(n[38]=[a("code",null,"BindingKey",-1)])),_:1,__:[38]}),n[43]||(n[43]=i(">"))]),n[116]||(n[116]=r(`<p>A map of all aliases registered in the container.</p><hr><h3 id="getaliaskey" tabindex="-1"><a class="header-anchor" href="#getaliaskey"><span>getAliasKey()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">getAliasKey</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span><span class="token operator">:</span> </span>
<span class="line">  <span class="token operator">|</span> <span class="token keyword">undefined</span></span>
<span class="line">  <span class="token operator">|</span> BindingKey<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Get a binding key by its alias.</p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6"><span>Parameters</span></a></h4><h5 id="alias-2" tabindex="-1"><a class="header-anchor" href="#alias-2"><span>alias</span></a></h5>`,7)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[44]||(n[44]=[a("code",null,"BindingKey",-1)])),_:1,__:[44]})]),n[117]||(n[117]=a("p",null,"The alias name.",-1)),n[118]||(n[118]=a("h4",{id:"returns-10",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#returns-10"},[a("span",null,"Returns")])],-1)),a("p",null,[n[46]||(n[46]=i("| ")),n[47]||(n[47]=a("code",null,"undefined",-1)),n[48]||(n[48]=i(" | ")),s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[45]||(n[45]=[a("code",null,"BindingKey",-1)])),_:1,__:[45]})]),n[119]||(n[119]=r(`<p>The binding key associated with the alias, or undefined if not found.</p><hr><h3 id="getbindings" tabindex="-1"><a class="header-anchor" href="#getbindings"><span>getBindings()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span>BindingKey<span class="token punctuation">,</span> Binding<span class="token operator">&lt;</span>BindingValue<span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Retrieve the value of the bindings property.</p><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11"><span>Returns</span></a></h4>`,6)),a("p",null,[n[52]||(n[52]=a("code",null,"Map",-1)),n[53]||(n[53]=i("<")),s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[49]||(n[49]=[a("code",null,"BindingKey",-1)])),_:1,__:[49]}),n[54]||(n[54]=i(", ")),s(e,{to:"/api/service-container/models/Binding/classes/Binding.html"},{default:t(()=>n[50]||(n[50]=[a("code",null,"Binding",-1)])),_:1,__:[50]}),n[55]||(n[55]=i("<")),s(e,{to:"/api/service-container/declarations/type-aliases/BindingValue.html"},{default:t(()=>n[51]||(n[51]=[a("code",null,"BindingValue",-1)])),_:1,__:[51]}),n[56]||(n[56]=i(">>"))]),n[120]||(n[120]=r(`<p>A map of all bindings registered in the container.</p><hr><h3 id="has" tabindex="-1"><a class="header-anchor" href="#has"><span>has()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Check if a value is already bound in the container by its key.</p><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7"><span>Parameters</span></a></h4><h5 id="key-5" tabindex="-1"><a class="header-anchor" href="#key-5"><span>key</span></a></h5>`,7)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[57]||(n[57]=[a("code",null,"BindingKey",-1)])),_:1,__:[57]})]),n[121]||(n[121]=r(`<p>The key to check.</p><h4 id="returns-12" tabindex="-1"><a class="header-anchor" href="#returns-12"><span>Returns</span></a></h4><p><code>boolean</code></p><p>True if the key is bound, false otherwise.</p><hr><h3 id="instance" tabindex="-1"><a class="header-anchor" href="#instance"><span>instance()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">instance</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Bind a single instance or value into the container under the provided key.</p><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8"><span>Parameters</span></a></h4><h5 id="key-6" tabindex="-1"><a class="header-anchor" href="#key-6"><span>key</span></a></h5>`,10)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[58]||(n[58]=[a("code",null,"BindingKey",-1)])),_:1,__:[58]})]),n[122]||(n[122]=a("p",null,"The key to associate with the value.",-1)),n[123]||(n[123]=a("h5",{id:"value",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#value"},[a("span",null,"value")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingValue.html"},{default:t(()=>n[59]||(n[59]=[a("code",null,"BindingValue",-1)])),_:1,__:[59]})]),n[124]||(n[124]=r(`<p>The value to be bound.</p><h4 id="returns-13" tabindex="-1"><a class="header-anchor" href="#returns-13"><span>Returns</span></a></h4><p><code>this</code></p><p>The container instance.</p><hr><h3 id="instanceif" tabindex="-1"><a class="header-anchor" href="#instanceif"><span>instanceIf()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">instanceIf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Bind a single instance or value into the container under the provided key if not already bound.</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9"><span>Parameters</span></a></h4><h5 id="key-7" tabindex="-1"><a class="header-anchor" href="#key-7"><span>key</span></a></h5>`,10)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[60]||(n[60]=[a("code",null,"BindingKey",-1)])),_:1,__:[60]})]),n[125]||(n[125]=a("p",null,"The key to associate with the value.",-1)),n[126]||(n[126]=a("h5",{id:"value-1",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#value-1"},[a("span",null,"value")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingValue.html"},{default:t(()=>n[61]||(n[61]=[a("code",null,"BindingValue",-1)])),_:1,__:[61]})]),n[127]||(n[127]=r(`<p>The value to be bound.</p><h4 id="returns-14" tabindex="-1"><a class="header-anchor" href="#returns-14"><span>Returns</span></a></h4><p><code>this</code></p><p>The container instance.</p><hr><h3 id="isalias" tabindex="-1"><a class="header-anchor" href="#isalias"><span>isAlias()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">isAlias</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Check if an alias exists in the container.</p><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10"><span>Parameters</span></a></h4><h5 id="alias-3" tabindex="-1"><a class="header-anchor" href="#alias-3"><span>alias</span></a></h5>`,10)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[62]||(n[62]=[a("code",null,"BindingKey",-1)])),_:1,__:[62]})]),n[128]||(n[128]=r(`<p>The alias to check.</p><h4 id="returns-15" tabindex="-1"><a class="header-anchor" href="#returns-15"><span>Returns</span></a></h4><p><code>boolean</code></p><p>True if the alias exists, false otherwise.</p><hr><h3 id="make" tabindex="-1"><a class="header-anchor" href="#make"><span>make()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token generic-function"><span class="token function">make</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Resolve a registered value from the container by its key.</p><h4 id="type-parameters-4" tabindex="-1"><a class="header-anchor" href="#type-parameters-4"><span>Type Parameters</span></a></h4><h5 id="v-4" tabindex="-1"><a class="header-anchor" href="#v-4"><span>V</span></a></h5>`,10)),a("p",null,[n[64]||(n[64]=a("code",null,"V",-1)),n[65]||(n[65]=i()),n[66]||(n[66]=a("em",null,"extends",-1)),n[67]||(n[67]=i()),s(e,{to:"/api/service-container/declarations/type-aliases/BindingValue.html"},{default:t(()=>n[63]||(n[63]=[a("code",null,"BindingValue",-1)])),_:1,__:[63]})]),n[129]||(n[129]=a("h4",{id:"parameters-11",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#parameters-11"},[a("span",null,"Parameters")])],-1)),n[130]||(n[130]=a("h5",{id:"key-8",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#key-8"},[a("span",null,"key")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[68]||(n[68]=[a("code",null,"BindingKey",-1)])),_:1,__:[68]})]),n[131]||(n[131]=r(`<p>The key to resolve.</p><h4 id="returns-16" tabindex="-1"><a class="header-anchor" href="#returns-16"><span>Returns</span></a></h4><p><code>V</code></p><p>The resolved value.</p><h4 id="throws" tabindex="-1"><a class="header-anchor" href="#throws"><span>Throws</span></a></h4><p>ContainerError if the key cannot be resolved.</p><hr><h3 id="resolve" tabindex="-1"><a class="header-anchor" href="#resolve"><span>resolve()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token generic-function"><span class="token function">resolve</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> singleton<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Resolve a value from the container by its key, binding it if necessary.</p><h4 id="type-parameters-5" tabindex="-1"><a class="header-anchor" href="#type-parameters-5"><span>Type Parameters</span></a></h4><h5 id="v-5" tabindex="-1"><a class="header-anchor" href="#v-5"><span>V</span></a></h5>`,12)),a("p",null,[n[70]||(n[70]=a("code",null,"V",-1)),n[71]||(n[71]=i()),n[72]||(n[72]=a("em",null,"extends",-1)),n[73]||(n[73]=i()),s(e,{to:"/api/service-container/declarations/type-aliases/BindingValue.html"},{default:t(()=>n[69]||(n[69]=[a("code",null,"BindingValue",-1)])),_:1,__:[69]})]),n[132]||(n[132]=a("h4",{id:"parameters-12",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#parameters-12"},[a("span",null,"Parameters")])],-1)),n[133]||(n[133]=a("h5",{id:"key-9",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#key-9"},[a("span",null,"key")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[74]||(n[74]=[a("code",null,"BindingKey",-1)])),_:1,__:[74]})]),n[134]||(n[134]=r(`<p>The key to resolve.</p><h5 id="singleton-1" tabindex="-1"><a class="header-anchor" href="#singleton-1"><span>singleton</span></a></h5><p><code>boolean</code> = <code>false</code></p><p>Whether to bind as a singleton if not already bound.</p><h4 id="returns-17" tabindex="-1"><a class="header-anchor" href="#returns-17"><span>Returns</span></a></h4><p><code>V</code></p><p>The resolved value.</p><hr><h3 id="singleton-2" tabindex="-1"><a class="header-anchor" href="#singleton-2"><span>singleton()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token generic-function"><span class="token function">singleton</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> resolver<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Bind a resolver function into the container under the provided key as a singleton.</p><p>The resolver function will be called once, and the resulting value will be cached for future use.</p><h4 id="type-parameters-6" tabindex="-1"><a class="header-anchor" href="#type-parameters-6"><span>Type Parameters</span></a></h4><h5 id="v-6" tabindex="-1"><a class="header-anchor" href="#v-6"><span>V</span></a></h5>`,14)),a("p",null,[n[76]||(n[76]=a("code",null,"V",-1)),n[77]||(n[77]=i()),n[78]||(n[78]=a("em",null,"extends",-1)),n[79]||(n[79]=i()),s(e,{to:"/api/service-container/declarations/type-aliases/BindingValue.html"},{default:t(()=>n[75]||(n[75]=[a("code",null,"BindingValue",-1)])),_:1,__:[75]})]),n[135]||(n[135]=a("h4",{id:"parameters-13",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#parameters-13"},[a("span",null,"Parameters")])],-1)),n[136]||(n[136]=a("h5",{id:"key-10",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#key-10"},[a("span",null,"key")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[80]||(n[80]=[a("code",null,"BindingKey",-1)])),_:1,__:[80]})]),n[137]||(n[137]=a("p",null,"The key to associate with the singleton value.",-1)),n[138]||(n[138]=a("h5",{id:"resolver-2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#resolver-2"},[a("span",null,"resolver")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/Resolver.html"},{default:t(()=>n[81]||(n[81]=[a("code",null,"Resolver",-1)])),_:1,__:[81]}),n[82]||(n[82]=i("<")),n[83]||(n[83]=a("code",null,"V",-1)),n[84]||(n[84]=i(">"))]),n[139]||(n[139]=r(`<p>The resolver function to provide the value.</p><h4 id="returns-18" tabindex="-1"><a class="header-anchor" href="#returns-18"><span>Returns</span></a></h4><p><code>this</code></p><p>The container instance.</p><hr><h3 id="singletonif" tabindex="-1"><a class="header-anchor" href="#singletonif"><span>singletonIf()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token generic-function"><span class="token function">singletonIf</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> resolver<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Bind a resolver function into the container under the provided key as a singleton if not already bound.</p><h4 id="type-parameters-7" tabindex="-1"><a class="header-anchor" href="#type-parameters-7"><span>Type Parameters</span></a></h4><h5 id="v-7" tabindex="-1"><a class="header-anchor" href="#v-7"><span>V</span></a></h5>`,10)),a("p",null,[n[86]||(n[86]=a("code",null,"V",-1)),n[87]||(n[87]=i()),n[88]||(n[88]=a("em",null,"extends",-1)),n[89]||(n[89]=i()),s(e,{to:"/api/service-container/declarations/type-aliases/BindingValue.html"},{default:t(()=>n[85]||(n[85]=[a("code",null,"BindingValue",-1)])),_:1,__:[85]})]),n[140]||(n[140]=a("h4",{id:"parameters-14",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#parameters-14"},[a("span",null,"Parameters")])],-1)),n[141]||(n[141]=a("h5",{id:"key-11",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#key-11"},[a("span",null,"key")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/BindingKey.html"},{default:t(()=>n[90]||(n[90]=[a("code",null,"BindingKey",-1)])),_:1,__:[90]})]),n[142]||(n[142]=a("p",null,"The key to associate with the singleton value.",-1)),n[143]||(n[143]=a("h5",{id:"resolver-3",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#resolver-3"},[a("span",null,"resolver")])],-1)),a("p",null,[s(e,{to:"/api/service-container/declarations/type-aliases/Resolver.html"},{default:t(()=>n[91]||(n[91]=[a("code",null,"Resolver",-1)])),_:1,__:[91]}),n[92]||(n[92]=i("<")),n[93]||(n[93]=a("code",null,"V",-1)),n[94]||(n[94]=i(">"))]),n[144]||(n[144]=r(`<p>The resolver function to provide the value.</p><h4 id="returns-19" tabindex="-1"><a class="header-anchor" href="#returns-19"><span>Returns</span></a></h4><p><code>this</code></p><p>The container instance.</p><hr><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create"><span>create()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Container<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Create a Container.</p><h4 id="returns-20" tabindex="-1"><a class="header-anchor" href="#returns-20"><span>Returns</span></a></h4><p><code>Container</code></p><p>A new Container instance.</p>`,11))])}const v=p(u,[["render",c]]),k=JSON.parse('{"path":"/api/service-container/Container/classes/Container.html","title":"Class: Container","lang":"en-US","frontmatter":{"description":"Class: Container Class representing a Container. The Container class acts as a dependency injection container, managing bindings and resolving instances. It supports different t...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Class: Container\\",\\"image\\":[\\"/logo_square.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/service-container/Container/classes/Container.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Class: Container"}],["meta",{"property":"og:description","content":"Class: Container Class representing a Container. The Container class acts as a dependency injection container, managing bindings and resolving instances. It supports different t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo_square.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":3.15,"words":944},"filePathRelative":"api/service-container/Container/classes/Container.md","autoDesc":true}');export{v as comp,k as data};
