import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as o,e as l,w as a,r,o as k,a as n,d as s}from"./app-CrbMk51G.js";const m={};function g(h,e){const c=r("Mermaid"),p=r("Tabs");return k(),d("div",null,[e[16]||(e[16]=o('<p><strong>The Blueprint is the centralized place where all configuration lives.</strong><br> It is the output of the <strong>Setup Dimension</strong>, an object that defines the structure, components, and behaviors of your Stone.js system before it runs. It consolidates all declared modules, services, middleware, handlers, adapters, and more, and crucially, it is also where you register all configuration and settings your modules need to operate correctly.</p><p>This object is then passed along the rest of the system lifecycle. It’s available throughout the <strong>Integration</strong>, <strong>Initialization</strong>, and <strong>Functional</strong> dimensions, making it the cornerstone for building predictable, portable, and introspectable software across contexts.</p><p>The <strong>Blueprint</strong> is not frozen by default, it remains mutable. However, <strong>mutating it at runtime is discouraged</strong> unless absolutely necessary. It should be treated as a stable artifact once setup is complete. Mutation is possible, but it must be deliberate and controlled; the developer must understand the risks involved and the impact on system coherence.</p><h3 id="why-it-exists" tabindex="-1"><a class="header-anchor" href="#why-it-exists"><span>Why It Exists</span></a></h3><p>Complex, cross-platform systems need a place to define what they are made of, and how they should behave. The Blueprint provides exactly that: a <strong>declarative manifest</strong> and <strong>runtime instruction model</strong>, separated cleanly from execution logic.</p><p>Without it, setup logic becomes fragmented across files, dimensions, and abstractions. With it, everything is unified:</p><ul><li>System configuration is centralized and introspectable</li><li>Dependencies and features are organized and declared up-front</li><li>Dynamic behavior remains possible through middleware and hooks</li></ul><p>Whether your system runs on Node.js, in the browser, or in a FaaS environment, the Blueprint ensures every component is composed consistently and logically.</p><h3 id="where-it-fits-in-the-continuum" tabindex="-1"><a class="header-anchor" href="#where-it-fits-in-the-continuum"><span>Where It Fits in the Continuum</span></a></h3><p>In the Continuum Architecture, the Blueprint is built only once, in the <strong>Setup Dimension</strong>, and made <strong>accessible in all other dimensions</strong>. It does not <em>drive</em> those dimensions directly, but it provides the necessary context and configuration to operate within them.</p>',10)),l(c,{id:"mermaid-44",code:"eJyN0LFuwjAQBuCdpzilyhZUqtKFoRJJCKlEF5C6RAwmucAJY0e2UwqId+/FLJnaeLF0991v+cLwRorcDG6BO+AJgxkEO2ExiOBR+BKGxE6i5c5tBBDUWrkNXb18mTY/QdRVJSlMtNSmKz9Vr2/TySQY3e/3MBzVUp/LgzAOVmu2APNig65tIKUTKktabWE8foe4iGWLjSHltt7FvpwUH8rh3gjHsjfTIykTciQkXf9QiyJrVdn1hewLTxJPsmJeicahsRF8UlVJPAuDEeRaH+0jK/VwyV8w31Qiw1woht3IimosL6XEB114mhdxa3k91sJK76mEZ1i3yvH7MC85gHPDEDbuwjvcQ60NCClB6QqtT7HcYcq30Uccn6lyhxkvPqpJytlT5k9PxoNlMlimg+VisMwGy+Vgmf8jfwG/Depk"}),e[17]||(e[17]=o(`<ul><li>It is passed into the <strong>Integration Dimension</strong>, enabling adapters, middleware, and hooks to introspect the system’s structure and settings.</li><li>It is also passed into the <strong>Initialization Dimension</strong>, making it available inside services, handlers, lifecycle hooks, and modules.</li><li>During runtime, any module can access the Blueprint to retrieve configurations or references established during setup.</li></ul><p>This cross-dimensional accessibility is what enables Stone.js to unify runtime behavior across platforms, all through a consistent, introspected, and purpose-driven configuration model.</p><p>In short:</p><ul><li>The Setup Dimension builds the Blueprint.</li><li>The Blueprint supports the entire system.</li><li>And every dimension can reach into it to understand what’s been configured.</li></ul><h2 id="blueprint-api" tabindex="-1"><a class="header-anchor" href="#blueprint-api"><span>Blueprint API</span></a></h2><p>The <strong>Blueprint</strong> is an instance of the <code>Config</code> class, a configuration registry built by the Setup Dimension and shared across all others.</p><h3 id="working-with-configuration" tabindex="-1"><a class="header-anchor" href="#working-with-configuration"><span>Working with Configuration</span></a></h3><p>The Blueprint provides a set of methods to manage configuration values. These methods are designed to be simple and intuitive, allowing you to easily <strong>retrieve</strong>, <strong>set</strong>, and <strong>manipulate configuration data</strong>.</p><h4 id="get-key-default" tabindex="-1"><a class="header-anchor" href="#get-key-default"><span><code>get(key, default?)</code></span></a></h4><p>Returns the configuration value at the given key. This is the most used method across all dimensions.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;stone.name&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;MyStoneApp&quot;</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;stone.secret&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;default-secret&#39;</span><span class="token punctuation">)</span> <span class="token comment">// default value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="set-key-value" tabindex="-1"><a class="header-anchor" href="#set-key-value"><span><code>set(key, value)</code></span></a></h4><p>Adds or overrides a value. Can be used during setup or runtime (use cautiously).</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.env&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;myApp.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;StoneBlog&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="setif-key-value" tabindex="-1"><a class="header-anchor" href="#setif-key-value"><span><code>setIf(key, value)</code></span></a></h4><p>Sets a value only if not already present.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">setIf</span><span class="token punctuation">(</span><span class="token string">&#39;stone.debug&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="add-key-value" tabindex="-1"><a class="header-anchor" href="#add-key-value"><span><code>add(key, value)</code></span></a></h4><p>Appends a value to an existing array, plain object or list-based config.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;stone.services&#39;</span><span class="token punctuation">,</span> MyService<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you&#39;re unsure whether a key exists, always wrap the value in an array. This ensures compatibility with array-based namespaces and prevents configuration errors.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;stone.services&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>MyService<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="has-key" tabindex="-1"><a class="header-anchor" href="#has-key"><span><code>has(key)</code></span></a></h4><p>Checks if a config key is defined.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>blueprint<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;stone.secret&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="firstmatch-keys-default" tabindex="-1"><a class="header-anchor" href="#firstmatch-keys-default"><span><code>firstMatch(keys, default?)</code></span></a></h4><p>Finds the first key that returns a value.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">firstMatch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;stone.secret&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;auth.secret&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;default-secret&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="getmany-keys" tabindex="-1"><a class="header-anchor" href="#getmany-keys"><span><code>getMany(keys)</code></span></a></h4><p>Retrieve multiple values at once.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">getMany</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;stone.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;stone.env&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="all" tabindex="-1"><a class="header-anchor" href="#all"><span><code>all()</code></span></a></h4><p>Get the full config as a plain object.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blueprint<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="tojson" tabindex="-1"><a class="header-anchor" href="#tojson"><span><code>toJson()</code></span></a></h4><p>Get the config as a JSON string.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blueprint<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="namespaces-and-structure" tabindex="-1"><a class="header-anchor" href="#namespaces-and-structure"><span>Namespaces and Structure</span></a></h3><p>Stone.js uses <strong>dot-notation</strong> keys to organize config into namespaces. This structure allows modules to cleanly isolate their settings.</p><p>You can define:</p><ul><li><strong>Built-in namespaces</strong> → must live under <code>stone.*</code></li><li><strong>Custom namespaces</strong> → can be anything you want</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.kernel.skipMiddleware&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// built-in namespace</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;auth.jwt.secret&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc123&#39;</span><span class="token punctuation">)</span> <span class="token comment">// custom namespace</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example-declaring-custom-config" tabindex="-1"><a class="header-anchor" href="#example-declaring-custom-config"><span>Example: Declaring Custom Config</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;myApp.title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Stone Powered&#39;</span><span class="token punctuation">)</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;myApp.title&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;Stone Powered&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="access-via-proxiable" tabindex="-1"><a class="header-anchor" href="#access-via-proxiable"><span>Access via Proxiable</span></a></h4><p>The Blueprint extends <code>Proxiable</code>, which means you can directly access top-level keys like:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span>stone        <span class="token comment">// ✅</span></span>
<span class="line">blueprint<span class="token punctuation">.</span>stone<span class="token punctuation">.</span>kernel <span class="token comment">// ❌ (nested inside stone.kernel)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Only the <strong>first level</strong> of keys is accessible this way. To access nested values, always use the <code>get()</code> method:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;stone.kernel.middleware&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="core-namespaces" tabindex="-1"><a class="header-anchor" href="#core-namespaces"><span>Core Namespaces</span></a></h3><p>Here’s a list of common built-in namespaces under <code>stone.*</code>. This list is <strong>not exhaustive</strong>, each module can define its own.</p><table><thead><tr><th>Namespace</th><th>Dimension</th><th>Purpose</th></tr></thead><tbody><tr><td><code>stone.name</code></td><td>Global</td><td>Application name</td></tr><tr><td><code>stone.env</code></td><td>Global</td><td>Environment mode (dev/prod/test)</td></tr><tr><td><code>stone.debug</code></td><td>Global</td><td>Debug toggle</td></tr><tr><td><code>stone.timezone</code>, <code>stone.locale</code></td><td>Global</td><td>Regional settings</td></tr><tr><td><code>stone.fallback_locale</code></td><td>Global</td><td>Locale fallback</td></tr><tr><td><code>stone.secret</code></td><td>Global</td><td>Encryption key</td></tr><tr><td><code>stone.blueprint.middleware</code></td><td>Setup</td><td>Setup middleware list</td></tr><tr><td><code>stone.blueprint.defaultMiddlewarePriority</code></td><td>Setup</td><td>Default priority for middleware</td></tr><tr><td><code>stone.adapter</code></td><td>Integration</td><td>Current adapter config</td></tr><tr><td><code>stone.adapter.middleware</code></td><td>Integration</td><td>Middleware for the current adapter</td></tr><tr><td><code>stone.adapters</code></td><td>Integration</td><td>All adapters used</td></tr><tr><td><code>stone.kernel</code></td><td>Initialization</td><td>Handlers, middleware, resolvers</td></tr><tr><td><code>stone.kernel.middleware</code></td><td>Initialization</td><td>Middleware to register</td></tr><tr><td><code>stone.services</code></td><td>Initialization</td><td>Services to register</td></tr><tr><td><code>stone.providers</code></td><td>Initialization</td><td>Providers to register</td></tr><tr><td><code>stone.aliases</code></td><td>Initialization</td><td>Class aliases</td></tr><tr><td><code>stone.listeners</code>, <code>stone.subscribers</code></td><td>Initialization</td><td>Event handlers</td></tr><tr><td><code>stone.logger</code></td><td>Initialization</td><td>Logging and error reporting</td></tr><tr><td><code>stone.lifecycleHooks</code></td><td>Initialization</td><td>Hooks for lifecycle observation</td></tr><tr><td><code>stone.liveConfigurations</code></td><td>Initialization</td><td>Runtime-refreshed config</td></tr></tbody></table><h2 id="blueprint-configuration" tabindex="-1"><a class="header-anchor" href="#blueprint-configuration"><span>Blueprint Configuration</span></a></h2><p>Once your system starts, the <strong>Setup Dimension</strong> builds the <strong>Blueprint</strong>, and this is your chance to define exactly what your system should look like. You can configure the Blueprint <a href="#static-configuration"><strong>statically</strong></a> (without control over timing) or <a href="#dynamic-configuration-with-middleware"><strong>dynamically</strong></a> (using setup middleware, with full control over execution order and logic).</p><p>This section explains how to register values, modules, services, middleware, and anything else your system needs, either <strong>declaratively</strong> or <strong>imperatively</strong>.</p><h3 id="static-configuration" tabindex="-1"><a class="header-anchor" href="#static-configuration"><span>Static Configuration</span></a></h3><p>Static configuration is the simplest way to <strong>configure the Blueprint</strong>. It allows you to define values and register modules during the setup phase, without controlling the execution order. This method is ideal for straightforward or constant configuration logic that doesn’t require introspection or conditional behavior.</p>`,57)),l(p,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:a(({value:t,isActive:i})=>e[0]||(e[0]=[s("Declarative")])),title1:a(({value:t,isActive:i})=>e[1]||(e[1]=[s("Imperative")])),tab0:a(({value:t,isActive:i})=>e[2]||(e[2]=[n("h4",{id:"declarative",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative"},[n("span",null,"Declarative")])],-1),n("p",null,[s("To configure the Blueprint declaratively, use the "),n("code",null,"@Configuration()"),s(" decorator. This decorator marks a class that exposes a "),n("code",null,"configure(blueprint)"),s(" method, called automatically during the setup process.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Configuration"),n("span",{class:"token punctuation"},","),s(" IConfiguration"),n("span",{class:"token punctuation"},","),s(" IBlueprint "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Configuration")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyConfig"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"IConfiguration"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"configure"),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token operator"},":"),s(" IBlueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.name'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'MyStoneApp'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("The "),n("code",null,"configure"),s(" method can also be asynchronous:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" fetchSettings "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./settings'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Configuration"),n("span",{class:"token punctuation"},","),s(" IConfiguration"),n("span",{class:"token punctuation"},","),s(" IBlueprint "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Configuration")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyConfig"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"IConfiguration"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token function"},"configure"),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token operator"},":"),s(" IBlueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"const"),s(" settings "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"fetchSettings"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.name'"),n("span",{class:"token punctuation"},","),s(" settings"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("h5",{id:"built-in-decorators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#built-in-decorators"},[n("span",null,"Built-in Decorators")])],-1),n("p",null,[s("Many features in Stone.js offer their own decorators. For example, "),n("code",null,"@Service()"),s(", "),n("code",null,"@Hook()"),s(", "),n("code",null,"@Middleware()"),s(", etc., these often register themselves into the Blueprint automatically. Use "),n("code",null,"@Configuration()"),s(" only when no feature-specific decorator exists, or when you need to customize the configuration values.")],-1),n("p",null,[n("strong",null,[n("code",null,"@StoneApp()")])],-1),n("p",null,[s("The special decorator "),n("code",null,"@StoneApp()"),s(" used to define the main entry point of your application, can also initialize the system directly:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"StoneApp")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'myapp'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Application"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("This is equivalent to setting "),n("code",null,"blueprint.set('stone.name', 'myapp')"),s(".")],-1)])),tab1:a(({value:t,isActive:i})=>e[3]||(e[3]=[n("h4",{id:"imperative",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imperative"},[n("span",null,"Imperative")])],-1),n("p",null,[s("In an imperative setup, use the "),n("code",null,"defineBlueprintConfig()"),s(" utility to configure the Blueprint directly.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" defineBlueprintConfig"),n("span",{class:"token punctuation"},","),s(" IBlueprint "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" appBlueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token operator"},":"),s(" IBlueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.name'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'MyStoneApp'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,"You can perform async setup here as well:",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" fetchSettings "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./settings'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" defineBlueprintConfig"),n("span",{class:"token punctuation"},","),s(" IBlueprint "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" appBlueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token operator"},":"),s(" IBlueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"const"),s(" settings "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"fetchSettings"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.name'"),n("span",{class:"token punctuation"},","),s(" settings"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),e[18]||(e[18]=o(`<h3 id="dynamic-configuration" tabindex="-1"><a class="header-anchor" href="#dynamic-configuration"><span>Dynamic Configuration</span></a></h3><p><strong>Setup middleware</strong> (also called <strong>Blueprint middleware</strong>) allows you to configure the <strong>Blueprint</strong> dynamically. This gives you full control over the execution flow and lets you introspect modules, apply conditional logic, or modify structure based on other config.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>Setup middleware runs once during the Setup Phase, before any request is received.</p></div><p>Setup middleware receives a <code>BlueprintContext</code>:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">BlueprintContext</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> blueprint<span class="token operator">:</span> IBlueprint</span>
<span class="line">  <span class="token keyword">readonly</span> modules<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ClassType <span class="token operator">|</span> PipeClass<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),l(p,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:a(({value:t,isActive:i})=>e[4]||(e[4]=[s("Declarative")])),title1:a(({value:t,isActive:i})=>e[5]||(e[5]=[s("Imperative")])),tab0:a(({value:t,isActive:i})=>e[6]||(e[6]=[n("h4",{id:"declarative-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative-1"},[n("span",null,"Declarative")])],-1),n("p",null,[s("To register a setup middleware declaratively, use the "),n("code",null,"@ConfigMiddleware()"),s(" decorator:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" ConfigMiddleware"),n("span",{class:"token punctuation"},","),s(" BlueprintContext"),n("span",{class:"token punctuation"},","),s(" IBlueprint"),n("span",{class:"token punctuation"},","),s(" ClassType"),n("span",{class:"token punctuation"},","),s(" NextMiddleware "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"ConfigMiddleware")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" priority"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"10"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MySetupMiddleware"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token function"},"handle"),s(),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("    context"),n("span",{class:"token operator"},":"),s(" BlueprintContext"),n("span",{class:"token operator"},"<"),s("IBlueprint"),n("span",{class:"token punctuation"},","),s(" ClassType"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    next"),n("span",{class:"token operator"},":"),s(" NextMiddleware"),n("span",{class:"token operator"},"<"),s("BlueprintContext"),n("span",{class:"token operator"},"<"),s("IBlueprint"),n("span",{class:"token punctuation"},","),s(" ClassType"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(" IBlueprint"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"Promise"),n("span",{class:"token operator"},"<"),s("IBlueprint"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"const"),s(" blueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.adapter.platform'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'browser'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.adapter.middleware'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"{"),s(" module"),n("span",{class:"token operator"},":"),s(" MyMiddleware"),n("span",{class:"token punctuation"},","),s(" isClass"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" blueprint")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("This example adds an integration middleware "),n("em",null,"only if"),s(" the selected platform is the browser, perfect for cross-platform configurations.")],-1)])),tab1:a(({value:t,isActive:i})=>e[7]||(e[7]=[n("h4",{id:"imperative-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imperative-1"},[n("span",null,"Imperative")])],-1),n("p",null,[s("You can register setup middleware imperatively by adding them to "),n("code",null,"stone.blueprint.middleware"),s(" namespace.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" defineBlueprintConfig"),n("span",{class:"token punctuation"},","),s(" BlueprintContext"),n("span",{class:"token punctuation"},","),s(" IBlueprint"),n("span",{class:"token punctuation"},","),s(" ClassType"),n("span",{class:"token punctuation"},","),s(" NextMiddleware "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// Define the setup middleware")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(" MySetupMiddleware "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("  context"),n("span",{class:"token operator"},":"),s(" BlueprintContext"),n("span",{class:"token operator"},"<"),s("IBlueprint"),n("span",{class:"token punctuation"},","),s(" ClassType"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  next"),n("span",{class:"token operator"},":"),s(" NextMiddleware"),n("span",{class:"token operator"},"<"),s("BlueprintContext"),n("span",{class:"token operator"},"<"),s("IBlueprint"),n("span",{class:"token punctuation"},","),s(" ClassType"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(" IBlueprint"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"Promise"),n("span",{class:"token operator"},"<"),s("IBlueprint"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"const"),s(" blueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.adapter.platform'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'browser'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.adapter.middleware'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"{"),s(" module"),n("span",{class:"token operator"},":"),s(" MyMiddleware"),n("span",{class:"token punctuation"},","),s(" isClass"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(" blueprint")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// Register the setup middleware")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" appBlueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token operator"},":"),s(" IBlueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.blueprint.middleware'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"{"),s(" module"),n("span",{class:"token operator"},":"),s(" MySetupMiddleware "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("This example adds an integration middleware "),n("em",null,"only if"),s(" the selected platform is the browser, perfect for cross-platform configurations.")],-1)])),_:1}),e[19]||(e[19]=o('<h3 id="live-configuration" tabindex="-1"><a class="header-anchor" href="#live-configuration"><span>Live Configuration</span></a></h3><p>By default, all Blueprint configuration is loaded <strong>once</strong> at application startup and remains static for the lifetime of the system.</p><p><strong>Live configuration</strong> allows you to define logic that re-runs and updates the blueprint <strong>at every request</strong>. This is useful when settings change dynamically (e.g., database-driven config, tenant-specific options) and must take effect immediately, without restarting the system.</p><p>You can define live configuration both <strong>declaratively</strong> and <strong>imperatively</strong>.</p>',4)),l(p,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:a(({value:t,isActive:i})=>e[8]||(e[8]=[s("Declarative")])),title1:a(({value:t,isActive:i})=>e[9]||(e[9]=[s("Imperative")])),tab0:a(({value:t,isActive:i})=>e[10]||(e[10]=[n("h4",{id:"declarative-live-configuration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative-live-configuration"},[n("span",null,"Declarative Live Configuration")])],-1),n("p",null,[s("Use the "),n("code",null,"@Configuration()"),s(" decorator with "),n("code",null,"{ live: true }"),s(":")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" fetchSettings "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./settings'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Configuration"),n("span",{class:"token punctuation"},","),s(" IConfiguration"),n("span",{class:"token punctuation"},","),s(" IBlueprint "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Configuration")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" live"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyConfig"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"IConfiguration"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token function"},"configure"),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token operator"},":"),s(" IBlueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"const"),s(" settings "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"fetchSettings"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.name'"),n("span",{class:"token punctuation"},","),s(" settings"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("This configuration will be re-applied before each request, allowing values like "),n("code",null,"stone.name"),s(" to reflect up-to-date external sources.")],-1)])),tab1:a(({value:t,isActive:i})=>e[11]||(e[11]=[n("h4",{id:"imperative-live-configuration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imperative-live-configuration"},[n("span",null,"Imperative Live Configuration")])],-1),n("p",null,[s("Register a configuration module under the "),n("code",null,"stone.liveConfigurations"),s(" namespace:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" fetchSettings "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./settings'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" defineBlueprintConfig"),n("span",{class:"token punctuation"},","),s(" IBlueprint "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"liveConfig"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token operator"},":"),s(" IBlueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"const"),s(" settings "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"fetchSettings"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.name'"),n("span",{class:"token punctuation"},","),s(" settings"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" appBlueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token operator"},":"),s(" IBlueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.liveConfigurations'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),s("liveConfig"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,"Each live configuration module runs independently on every request, ensuring your Blueprint reflects the most current data or environment.",-1)])),_:1}),e[20]||(e[20]=o(`<h3 id="meta-modules-and-imperative-utilities" tabindex="-1"><a class="header-anchor" href="#meta-modules-and-imperative-utilities"><span>Meta Modules and Imperative Utilities</span></a></h3><p>When working with the <strong>imperative API</strong>, you interact directly with Stone.js’s meta module system, a low-level, flexible system based on <strong>metaprogramming</strong>. This system is transparent in the declarative API (via decorators), but in the imperative world, <strong>you build and register meta modules yourself</strong>.</p><h4 id="meta-modules" tabindex="-1"><a class="header-anchor" href="#meta-modules"><span>Meta Modules</span></a></h4><p>A meta module is a small descriptor object that tells the system what type of module you&#39;re registering.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">MetaModule</span> <span class="token punctuation">{</span></span>
<span class="line">  module<span class="token operator">:</span> <span class="token builtin">any</span></span>
<span class="line">  isClass<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  isFactory<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You must use the correct flag to describe the shape of the module:</p><h6 id="class-module" tabindex="-1"><a class="header-anchor" href="#class-module"><span>Class module</span></a></h6><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;stone.kernel.middleware&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> module<span class="token operator">:</span> MyMiddleware<span class="token punctuation">,</span> isClass<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="factory-module" tabindex="-1"><a class="header-anchor" href="#factory-module"><span>Factory module</span></a></h6><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;stone.kernel.middleware&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> module<span class="token operator">:</span> createMiddleware<span class="token punctuation">,</span> isFactory<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="function-module-default" tabindex="-1"><a class="header-anchor" href="#function-module-default"><span>Function module (default)</span></a></h6><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;stone.kernel.middleware&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>MyMiddleware<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// or explicitly</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;stone.kernel.middleware&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> module<span class="token operator">:</span> MyMiddleware <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>You must always use <code>add()</code> with an array of modules for array-based namespaces. If the target namespace does not yet exist, the array will be initialized automatically.</p></div><h4 id="imperative-utilities" tabindex="-1"><a class="header-anchor" href="#imperative-utilities"><span>Imperative Utilities</span></a></h4><p>To simplify the registration of meta modules, Stone.js provides utility functions that wrap your modules and assign the proper metadata automatically.</p><p>These are especially useful when working with <strong>handlers</strong>, <strong>services</strong>, <strong>providers</strong>, and <strong>middleware</strong>.</p><table><thead><tr><th>Utility</th><th>Dimension</th><th>Purpose</th></tr></thead><tbody><tr><td><code>defineBlueprintConfig()</code></td><td>Setup</td><td>Add configuration to the Blueprint</td></tr><tr><td><code>defineFactoryService()</code></td><td>Initialization</td><td>Return a meta service for registration</td></tr><tr><td><code>defineFactoryServiceProvider()</code></td><td>Initialization</td><td>Return a meta service provider for registration</td></tr><tr><td><code>defineFactoryMiddleware()</code></td><td>Initialization</td><td>Return a meta factory-based middleware for registration</td></tr><tr><td><code>defineClassMiddleware()</code></td><td>Initialization</td><td>Return a meta class-based middleware for registration</td></tr><tr><td><code>defineFactoryEventHandler()</code></td><td>Initialization</td><td>Return a meta event handler for registration</td></tr><tr><td><code>defineErrorHandler()</code></td><td>Initialization</td><td>Return a meta error handler for registration</td></tr><tr><td><code>defineFactoryErrorHandler()</code></td><td>Initialization</td><td>Return a meta factory-based error handler for registration</td></tr><tr><td><code>defineAdapterErrorHandler()</code></td><td>Intregation</td><td>Return a meta adapter error handler for registration</td></tr><tr><td><code>defineFactoryEventListener()</code></td><td>Initialization</td><td>Return a meta event listener for registration</td></tr><tr><td><code>defineFactoryEventSubscriber()</code></td><td>Initialization</td><td>Return a meta event subscriber for registration</td></tr></tbody></table><h6 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h6><p>Registering a functional middleware using a utility:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineFactoryMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span></span>
<span class="line"></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;stone.kernel.middleware&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token function">defineFactoryMiddleware</span><span class="token punctuation">(</span>MyInitMiddleware<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If a utility function exists for your module type, prefer using it, it ensures consistency and reduces the chance of misconfigured metadata. When no utility is available yet, you can fall back to using <code>add()</code> with a properly formed meta module.</p><p>This low-level power is what makes the imperative API flexible and expressive. It lets you build your application exactly how you want, from scratch, while staying aligned with the Continuum Architecture.</p><h3 id="let-s-recap" tabindex="-1"><a class="header-anchor" href="#let-s-recap"><span>Let&#39;s Recap</span></a></h3><p>You can configure the Blueprint in three ways:</p><ul><li><strong>Statically</strong>, using decorators or <code>defineBlueprintConfig()</code> to set values once at startup.</li><li><strong>Dynamically</strong>, using setup middleware to introspect modules, apply logic conditionally, and control execution order.</li><li><strong>Live</strong>, using <code>@Configuration({ live: true })</code> or the <code>stone.liveConfigurations</code> namespace to reapply configuration on every request.</li></ul><p>Use static configuration for simplicity and predictability.<br> Use dynamic middleware when setup logic depends on discovered modules or runtime conditions.<br> Use live configuration when values must reflect external changes without restarting the system.</p><h2 id="setup-hooks" tabindex="-1"><a class="header-anchor" href="#setup-hooks"><span>Setup Hooks</span></a></h2><p>Setup hooks are lifecycle events triggered <strong>only during the Setup Phase</strong>. Their purpose is to give you visibility into the blueprint construction process, whether for logging, debugging, analytics, or performance tracking.</p>`,28)),l(c,{id:"mermaid-807",code:"eJyV0T1vgzAQBuCdX3FyxJZISUgXhkrhI1MrRUrVBWUg4QCrjo1sI9Ii/nuNoS1DpVIW0Pnxe+bsui3lVPvQEl3iDYkP5JIqJEsYCq+ppOmFoTIrrQNAcsH1iX5YudlVd7Lsq4xyDAUTsi8vMu9ht14Tp+s613VyJpprmUoNL5GxAPvkhLquIMCCcnWG1eoRgkTwo8TKtONFwGqszIc+Wx9YESZHKa6olAHwTLOMYZNKhCchqrNjYWhhtLFZX/Y77GfPEBttBr5N4jtea42T1FFsB+GZwF9ixh6Yje0j738Hjaexw8/3WT2ILTiMgwrFrWKozakc14WTfjfjLiAXElLGgIsMld2lzArC3ryleMNVQzNd+uaOljllzF8c7DORwWwZzpZmqrPpdj71ZtN4tjz8IT8BENf5vw=="}),e[21]||(e[21]=o(`<p>These hooks do <strong>not</strong> participate in modifying the system, they exist purely for <strong>observability</strong>.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>If you need to modify the blueprint dynamically, use <strong>setup middleware</strong> instead.<br> Hooks are for <strong>observation only</strong>.</p></div><h3 id="available-setup-hooks" tabindex="-1"><a class="header-anchor" href="#available-setup-hooks"><span>Available Setup Hooks</span></a></h3><table><thead><tr><th>Hook</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>onPreparingBlueprint</code></td><td>Global</td><td>Triggered before the blueprint starts building. Useful for timing/debug.</td></tr><tr><td><code>onBlueprintPrepared</code></td><td>Global</td><td>Triggered once the blueprint is fully constructed.</td></tr><tr><td><code>onProcessingBlueprintMiddleware</code></td><td>Middleware-specific</td><td>Triggered before each middleware is processed.</td></tr><tr><td><code>onBlueprintMiddlewareProcessed</code></td><td>Middleware-specific</td><td>Triggered after each middleware is processed.</td></tr></tbody></table><h3 id="hook-context" tabindex="-1"><a class="header-anchor" href="#hook-context"><span>Hook Context</span></a></h3><p>Each setup hook provides a context object specific to its type.</p><h4 id="global-setup-hook-context" tabindex="-1"><a class="header-anchor" href="#global-setup-hook-context"><span>Global setup hook context</span></a></h4><p>Used by <code>onPreparingBlueprint</code> and <code>onBlueprintPrepared</code>.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">BlueprintContext</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> blueprint<span class="token operator">:</span> IBlueprint</span>
<span class="line">  <span class="token keyword">readonly</span> modules<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ClassType <span class="token operator">|</span> PipeClass<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="middleware-hook-context" tabindex="-1"><a class="header-anchor" href="#middleware-hook-context"><span>Middleware hook context</span></a></h4><p>Used by <code>onProcessingBlueprintMiddleware</code> and <code>onBlueprintMiddlewareProcessed</code>.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">BlueprintMiddlewareHookContext</span> <span class="token punctuation">{</span></span>
<span class="line">  passable<span class="token operator">:</span> BlueprintContext</span>
<span class="line">  pipe<span class="token operator">:</span> PipeCustomInstance</span>
<span class="line">  instance<span class="token operator">:</span> PipeCustomInstance</span>
<span class="line">  pipes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>MetaPipe<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="registering-setup-hooks" tabindex="-1"><a class="header-anchor" href="#registering-setup-hooks"><span>Registering Setup Hooks</span></a></h3><p>You can register setup hooks using either the <strong>declarative API</strong> or the <strong>imperative API</strong>.</p>`,14)),l(p,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:a(({value:t,isActive:i})=>e[12]||(e[12]=[s("Declarative")])),title1:a(({value:t,isActive:i})=>e[13]||(e[13]=[s("Imperative")])),tab0:a(({value:t,isActive:i})=>e[14]||(e[14]=[n("h4",{id:"declarative-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative-api"},[n("span",null,"Declarative API")])],-1),n("p",null,[s("Use the "),n("code",null,"@Hook('<hookName>')"),s(" method decorator to register a hook. Hook methods can live in any class, but for clarity and separation of concerns, it's best to place them in a dedicated observer class or service provider.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  Hook"),n("span",{class:"token punctuation"},","),s(" BlueprintContext"),n("span",{class:"token punctuation"},","),s(" BlueprintMiddlewareHookContext")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"BlueprintObserver"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Hook")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'onBlueprintPrepared'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"blueprintReady"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" blueprint "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(" BlueprintContext"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Blueprint is ready:'"),n("span",{class:"token punctuation"},","),s(" blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.name'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Hook")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'onProcessingBlueprintMiddleware'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"logEachMiddleware"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" pipe "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(" BlueprintMiddlewareHookContext"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"Running: "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("pipe"),n("span",{class:"token punctuation"},"."),s("module"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("Hook methods are executed via reflection. They are "),n("strong",null,"not"),s(" tied to class lifecycle, avoid using "),n("code",null,"this"),s(".")],-1)])),tab1:a(({value:t,isActive:i})=>e[15]||(e[15]=[n("h4",{id:"imperative-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imperative-api"},[n("span",null,"Imperative API")])],-1),n("p",null,[s("Register hooks manually using "),n("code",null,"defineBlueprintConfig()"),s(" and the "),n("code",null,"blueprint.add()"),s(" method.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  defineBlueprintConfig"),n("span",{class:"token punctuation"},","),s(" BlueprintContext"),n("span",{class:"token punctuation"},","),s(" BlueprintMiddlewareHookContext")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"logReady"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" blueprint "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(" BlueprintContext"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Blueprint ready:'"),n("span",{class:"token punctuation"},","),s(" blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.name'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"logMiddleware"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" pipe "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(" BlueprintMiddlewareHookContext"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"Running middleware: "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("pipe"),n("span",{class:"token punctuation"},"."),s("module"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" appSetupBlueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},"  blueprint"),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.lifecycleHooks.onBlueprintPrepared'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),s("logReady"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.lifecycleHooks.onProcessingBlueprintMiddleware'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),s("logMiddleware"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),e[22]||(e[22]=o(`<p>That’s it. Setup hooks give you powerful insight into how your system is assembled, without affecting behavior. Use them to instrument your system early and catch issues before runtime.</p><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>Working with the Blueprint gives you full control over your system&#39;s configuration. The following practices will help you keep it clean, consistent, and maintainable:</p><h4 id="use-namespaced-keys" tabindex="-1"><a class="header-anchor" href="#use-namespaced-keys"><span>Use Namespaced Keys</span></a></h4><p>Organize all configuration using meaningful, dot-notation keys.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;auth.jwt.secret&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.level&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Use the <code>stone.*</code> namespace for all built-in and core configurations.</li><li>Use custom namespaces (e.g. <code>auth.*</code>, <code>myApp.*</code>) for project-specific or third-party modules.</li></ul><h4 id="prefer-static-configuration-when-possible" tabindex="-1"><a class="header-anchor" href="#prefer-static-configuration-when-possible"><span>Prefer Static Configuration When Possible</span></a></h4><p>Use static configuration (<code>@Configuration</code>, <code>defineBlueprintConfig</code>) for simple, constant values that don’t depend on runtime discovery.</p><p>It’s easier to read, faster to process, and encourages declarative design.</p><h4 id="use-setup-middleware-for-dynamic-logic" tabindex="-1"><a class="header-anchor" href="#use-setup-middleware-for-dynamic-logic"><span>Use Setup Middleware for Dynamic Logic</span></a></h4><p>If your configuration depends on conditions, external input, or module introspection, use setup middleware.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ConfigMiddleware</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MySetupMiddleware</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Middleware gives you:</p><ul><li>Execution order control via <code>priority</code></li><li>Access to all discovered modules</li><li>The ability to modify the blueprint based on context</li></ul><h4 id="avoid-runtime-mutations" tabindex="-1"><a class="header-anchor" href="#avoid-runtime-mutations"><span>Avoid Runtime Mutations</span></a></h4><p>While the Blueprint is mutable, it is designed to be constructed once and used across dimensions. Avoid modifying it at runtime unless absolutely necessary.</p><p>If you must mutate it, document the reasoning clearly and isolate the change.</p><h4 id="avoid-this-in-hooks" tabindex="-1"><a class="header-anchor" href="#avoid-this-in-hooks"><span>Avoid <code>this</code> in Hooks</span></a></h4><p>Hook methods are called via reflection, independently of any class lifecycle. Do not rely on <code>this</code> in hook methods, prefer static logic or external utilities.</p><h4 id="use-utility-functions-for-clarity" tabindex="-1"><a class="header-anchor" href="#use-utility-functions-for-clarity"><span>Use Utility Functions for Clarity</span></a></h4><p>Use blueprint utility functions like <code>defineFactoryMiddleware()</code> or <code>defineFactoryService()</code> to register meta modules cleanly.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;stone.kernel.middleware&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token function">defineFactoryMiddleware</span><span class="token punctuation">(</span>MyInitMiddleware<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These helpers reduce boilerplate and make intent explicit.</p><h4 id="keep-hook-logic-lightweight" tabindex="-1"><a class="header-anchor" href="#keep-hook-logic-lightweight"><span>Keep Hook Logic Lightweight</span></a></h4><p>Setup hooks are for <strong>observation only</strong>. Avoid using them for any mutation or heavy logic.</p><p>Use them for:</p><ul><li>Logging</li><li>Metrics</li><li>Timing</li><li>Debugging system setup behavior</li></ul><h4 id="document-your-custom-namespaces" tabindex="-1"><a class="header-anchor" href="#document-your-custom-namespaces"><span>Document Your Custom Namespaces</span></a></h4><p>If you define your own configuration structure, document it clearly for future contributors. This ensures consistent usage and easier onboarding.</p><p>Following these practices ensures your blueprint remains structured, predictable, and introspectable, keeping your Stone.js system aligned with the Continuum Architecture.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>The Blueprint is the foundation of your Stone.js system. It defines all configurations, registered modules, middleware, lifecycle hooks, and services, built once during setup, then accessed across all dimensions.</p><p>You can populate the Blueprint in three primary ways:</p><ul><li><strong>Statically</strong>, using <code>@Configuration()</code> or <code>defineBlueprintConfig()</code> to set values during setup</li><li><strong>Dynamically</strong>, using setup middleware to introspect and register modules based on context</li><li><strong>Live</strong>, using <code>@Configuration({ live: true })</code> or the <code>stone.liveConfigurations</code> namespace to reapply configuration on every request.</li></ul><p>You can also observe the setup process using <strong>Setup Hooks</strong>, which allow you to track the blueprint&#39;s construction without mutating it.</p><p>For imperative applications, the <code>defineBlueprintConfig()</code> function can be used <strong>anywhere</strong> to register values, hooks, services, and modules. However, there must be <strong>one and only one</strong> call to <code>defineBlueprintConfig</code> that acts as the <strong>main entry point</strong>.</p><p>This entry-point Blueprint must be explicitly imported and set as the root of the system:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineBlueprintConfig<span class="token punctuation">,</span> stoneBlueprint <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> mainBlueprint <span class="token operator">=</span> <span class="token function">defineBlueprintConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span>blueprint<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>stoneBlueprint<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once defined, the Blueprint becomes your system’s introspectable, shareable configuration, powering every adapter, every request, and every dimension.</p>`,40))])}const y=u(m,[["render",g]]),f=JSON.parse('{"path":"/docs/architecture/blueprint.html","title":"Blueprint","lang":"en-US","frontmatter":{"title":"Blueprint","description":"The Blueprint is the centralized place where all configuration lives. It is the output of the Setup Dimension, an object that defines the structure, components, and behaviors of...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Blueprint\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/docs/architecture/blueprint.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Blueprint"}],["meta",{"property":"og:description","content":"The Blueprint is the centralized place where all configuration lives. It is the output of the Setup Dimension, an object that defines the structure, components, and behaviors of..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":10.84,"words":3251},"filePathRelative":"docs/architecture/blueprint.md","autoDesc":true}');export{y as comp,f as data};
