import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as i,a as s,e as a,d as n,w as p,r as l,o as d}from"./app-CrbMk51G.js";const c={};function m(u,e){const t=l("RouteLink");return d(),r("div",null,[e[15]||(e[15]=i(`<h1 id="type-alias-piperesolver-t-r-args" tabindex="-1"><a class="header-anchor" href="#type-alias-piperesolver-t-r-args"><span>Type Alias: PipeResolver()&lt;T, R, Args&gt;</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">PipeResolver<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">,</span> Args<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>pipe<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> PipeInstance<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>A function type that represents a resolver for a given pipe.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> = <code>unknown</code></p><p>The type of the passable object in the pipeline.</p><h3 id="r" tabindex="-1"><a class="header-anchor" href="#r"><span>R</span></a></h3><p><code>R</code> = <code>T</code></p><p>The type of the return value from the resolved pipe, which defaults to <code>T</code>.</p><h3 id="args" tabindex="-1"><a class="header-anchor" href="#args"><span>Args</span></a></h3><p><code>Args</code> <em>extends</em> <code>any</code>[] = <code>any</code>[]</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="pipe" tabindex="-1"><a class="header-anchor" href="#pipe"><span>pipe</span></a></h3>`,14)),s("p",null,[a(t,{to:"/api/pipeline/declarations/interfaces/MetaPipe.html"},{default:p(()=>e[0]||(e[0]=[s("code",null,"MetaPipe",-1)])),_:1,__:[0]}),e[1]||(e[1]=n("<")),e[2]||(e[2]=s("code",null,"T",-1)),e[3]||(e[3]=n(", ")),e[4]||(e[4]=s("code",null,"R",-1)),e[5]||(e[5]=n(", ")),e[6]||(e[6]=s("code",null,"Args",-1)),e[7]||(e[7]=n(">"))]),e[16]||(e[16]=s("p",null,"The pipe that needs to be resolved, which can be either a simple pipe or a MetaPipe.",-1)),e[17]||(e[17]=s("h2",{id:"returns",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#returns"},[s("span",null,"Returns")])],-1)),s("p",null,[a(t,{to:"/api/pipeline/declarations/type-aliases/PipeInstance.html"},{default:p(()=>e[8]||(e[8]=[s("code",null,"PipeInstance",-1)])),_:1,__:[8]}),e[9]||(e[9]=n("<")),e[10]||(e[10]=s("code",null,"T",-1)),e[11]||(e[11]=n(", ")),e[12]||(e[12]=s("code",null,"R",-1)),e[13]||(e[13]=n("> | ")),e[14]||(e[14]=s("code",null,"undefined",-1))]),e[18]||(e[18]=s("p",null,[n("The resolved pipe instance of type "),s("code",null,"PipeInstance<T, R> | undefined"),n(".")],-1)),e[19]||(e[19]=s("p",null,"This type is used to provide a custom mechanism for resolving pipes before they are executed in the pipeline.",-1))])}const g=o(c,[["render",m]]),T=JSON.parse('{"path":"/api/pipeline/declarations/type-aliases/PipeResolver.html","title":"Type Alias: PipeResolver()<T, R, Args>","lang":"en-US","frontmatter":{"description":"Type Alias: PipeResolver()<T, R, Args> A function type that represents a resolver for a given pipe. Type Parameters T T = unknown The type of the passable object in the pipeline...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type Alias: PipeResolver()<T, R, Args>\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/api/pipeline/declarations/type-aliases/PipeResolver.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Type Alias: PipeResolver()<T, R, Args>"}],["meta",{"property":"og:description","content":"Type Alias: PipeResolver()<T, R, Args> A function type that represents a resolver for a given pipe. Type Parameters T T = unknown The type of the passable object in the pipeline..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.42,"words":125},"filePathRelative":"api/pipeline/declarations/type-aliases/PipeResolver.md","autoDesc":true}');export{g as comp,T as data};
