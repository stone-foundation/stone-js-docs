import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as n,o as s}from"./app-CIBZQWs4.js";const o={};function r(p,e){return s(),t("div",null,e[0]||(e[0]=[n(`<h1 id="type-alias-proposalpropertydecorator" tabindex="-1"><a class="header-anchor" href="#type-alias-proposalpropertydecorator"><span>Type Alias: ProposalPropertyDecorator()</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">ProposalPropertyDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">unknown</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Represents a property decorator using the 2023-11 proposal syntax.</p><p>A function that decorates a class field and optionally returns an initializer function to define the property&#39;s initial value.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="target" tabindex="-1"><a class="header-anchor" href="#target"><span>target</span></a></h3><p><code>undefined</code></p><p>Always <code>undefined</code> for field decorators.</p><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>context</span></a></h3><p><code>ClassFieldDecoratorContext</code></p><p>The context object providing metadata about the field.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p>An initializer function for the property value.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h3><h4 id="initialvalue" tabindex="-1"><a class="header-anchor" href="#initialvalue"><span>initialValue</span></a></h4><p><code>unknown</code></p><h3 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h3><p><code>unknown</code> | <code>undefined</code></p>`,19)]))}const l=a(o,[["render",r]]),d=JSON.parse('{"path":"/api/core/declarations/type-aliases/ProposalPropertyDecorator.html","title":"Type Alias: ProposalPropertyDecorator()","lang":"en-US","frontmatter":{"description":"Type Alias: ProposalPropertyDecorator() Represents a property decorator using the 2023-11 proposal syntax. A function that decorates a class field and optionally returns an init...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type Alias: ProposalPropertyDecorator()\\",\\"image\\":[\\"/logo.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/core/declarations/type-aliases/ProposalPropertyDecorator.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Type Alias: ProposalPropertyDecorator()"}],["meta",{"property":"og:description","content":"Type Alias: ProposalPropertyDecorator() Represents a property decorator using the 2023-11 proposal syntax. A function that decorates a class field and optionally returns an init..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.26,"words":77},"filePathRelative":"api/core/declarations/type-aliases/ProposalPropertyDecorator.md","autoDesc":true}');export{l as comp,d as data};
