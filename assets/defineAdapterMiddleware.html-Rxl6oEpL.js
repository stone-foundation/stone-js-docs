import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as p,a,e as s,d as n,w as r,r as l,o as d}from"./app-CrbMk51G.js";const u={};function m(c,e){const t=l("RouteLink");return d(),i("div",null,[e[39]||(e[39]=p(`<h1 id="function-defineadaptermiddleware" tabindex="-1"><a class="header-anchor" href="#function-defineadaptermiddleware"><span>Function: defineAdapterMiddleware()</span></a></h1><p>Registers an adapter-specific middleware in the blueprint.</p><p>This function dynamically inserts a middleware definition into the blueprint if the adapter context matches either the platform or alias (or both are undefined).</p><h2 id="param" tabindex="-1"><a class="header-anchor" href="#param"><span>Param</span></a></h2><p>The middleware module to register (function, factory, or class).</p><h2 id="param-1" tabindex="-1"><a class="header-anchor" href="#param-1"><span>Param</span></a></h2><p>Metadata describing which adapter(s) the middleware applies to.</p><h2 id="call-signature" tabindex="-1"><a class="header-anchor" href="#call-signature"><span>Call Signature</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">defineAdapterMiddleware</span><span class="token generic class-name"><span class="token operator">&lt;</span>ExecutionContextType<span class="token punctuation">,</span> RawResponseType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>StoneBlueprint<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Defines a function-based adapter middleware.</p><p>This overload is used to register middleware as a simple function for a specific adapter platform or alias.</p><h3 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h3><h4 id="executioncontexttype" tabindex="-1"><a class="header-anchor" href="#executioncontexttype"><span>ExecutionContextType</span></a></h4><p><code>ExecutionContextType</code> = <code>any</code></p><h4 id="rawresponsetype" tabindex="-1"><a class="header-anchor" href="#rawresponsetype"><span>RawResponseType</span></a></h4><p><code>RawResponseType</code> = <code>any</code></p><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h3><h4 id="module" tabindex="-1"><a class="header-anchor" href="#module"><span>module</span></a></h4>`,18)),a("p",null,[s(t,{to:"/api/core/declarations/type-aliases/FunctionalMiddleware.html"},{default:r(()=>e[0]||(e[0]=[a("code",null,"FunctionalMiddleware",-1)])),_:1,__:[0]}),e[1]||(e[1]=n("<")),e[2]||(e[2]=a("code",null,"ExecutionContextType",-1)),e[3]||(e[3]=n(", ")),e[4]||(e[4]=a("code",null,"RawResponseType",-1)),e[5]||(e[5]=n(">"))]),e[40]||(e[40]=a("p",null,"The middleware function to be registered.",-1)),e[41]||(e[41]=a("h4",{id:"options",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#options"},[a("span",null,"options?")])],-1)),a("p",null,[s(t,{to:"/api/core/declarations/interfaces/AdapterMiddlewareOptions.html"},{default:r(()=>e[6]||(e[6]=[a("code",null,"AdapterMiddlewareOptions",-1)])),_:1,__:[6]}),e[7]||(e[7]=n(" & ")),e[8]||(e[8]=a("code",null,"object",-1))]),e[42]||(e[42]=a("p",null,"Adapter-specific metadata such as platform or alias.",-1)),e[43]||(e[43]=a("h3",{id:"returns",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#returns"},[a("span",null,"Returns")])],-1)),a("p",null,[e[10]||(e[10]=a("code",null,"Partial",-1)),e[11]||(e[11]=n("<")),s(t,{to:"/api/core/options/StoneBlueprint/interfaces/StoneBlueprint.html"},{default:r(()=>e[9]||(e[9]=[a("code",null,"StoneBlueprint",-1)])),_:1,__:[9]}),e[12]||(e[12]=n(">"))]),e[44]||(e[44]=p(`<p>A blueprint fragment that registers the middleware conditionally.</p><h3 id="param-2" tabindex="-1"><a class="header-anchor" href="#param-2"><span>Param</span></a></h3><p>The middleware module to register (function, factory, or class).</p><h3 id="param-3" tabindex="-1"><a class="header-anchor" href="#param-3"><span>Param</span></a></h3><p>Metadata describing which adapter(s) the middleware applies to.</p><h2 id="call-signature-1" tabindex="-1"><a class="header-anchor" href="#call-signature-1"><span>Call Signature</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">defineAdapterMiddleware</span><span class="token generic class-name"><span class="token operator">&lt;</span>ExecutionContextType<span class="token punctuation">,</span> RawResponseType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>StoneBlueprint<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Defines a factory-based adapter middleware.</p><p>This overload registers a middleware factory function for a specific adapter platform or alias.</p><h3 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1"><span>Type Parameters</span></a></h3><h4 id="executioncontexttype-1" tabindex="-1"><a class="header-anchor" href="#executioncontexttype-1"><span>ExecutionContextType</span></a></h4><p><code>ExecutionContextType</code> = <code>any</code></p><h4 id="rawresponsetype-1" tabindex="-1"><a class="header-anchor" href="#rawresponsetype-1"><span>RawResponseType</span></a></h4><p><code>RawResponseType</code> = <code>any</code></p><h3 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h3><h4 id="module-1" tabindex="-1"><a class="header-anchor" href="#module-1"><span>module</span></a></h4>`,16)),a("p",null,[s(t,{to:"/api/core/declarations/type-aliases/FactoryMiddleware.html"},{default:r(()=>e[13]||(e[13]=[a("code",null,"FactoryMiddleware",-1)])),_:1,__:[13]}),e[14]||(e[14]=n("<")),e[15]||(e[15]=a("code",null,"ExecutionContextType",-1)),e[16]||(e[16]=n(", ")),e[17]||(e[17]=a("code",null,"RawResponseType",-1)),e[18]||(e[18]=n(">"))]),e[45]||(e[45]=a("p",null,"The factory function that returns middleware.",-1)),e[46]||(e[46]=a("h4",{id:"options-1",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#options-1"},[a("span",null,"options")])],-1)),a("p",null,[s(t,{to:"/api/core/declarations/interfaces/AdapterMiddlewareOptions.html"},{default:r(()=>e[19]||(e[19]=[a("code",null,"AdapterMiddlewareOptions",-1)])),_:1,__:[19]}),e[20]||(e[20]=n(" & ")),e[21]||(e[21]=a("code",null,"object",-1))]),e[47]||(e[47]=a("p",null,"Adapter-specific metadata such as platform or alias.",-1)),e[48]||(e[48]=a("h3",{id:"returns-1",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#returns-1"},[a("span",null,"Returns")])],-1)),a("p",null,[e[23]||(e[23]=a("code",null,"Partial",-1)),e[24]||(e[24]=n("<")),s(t,{to:"/api/core/options/StoneBlueprint/interfaces/StoneBlueprint.html"},{default:r(()=>e[22]||(e[22]=[a("code",null,"StoneBlueprint",-1)])),_:1,__:[22]}),e[25]||(e[25]=n(">"))]),e[49]||(e[49]=p(`<p>A blueprint fragment that registers the middleware conditionally.</p><h3 id="param-4" tabindex="-1"><a class="header-anchor" href="#param-4"><span>Param</span></a></h3><p>The middleware module to register (function, factory, or class).</p><h3 id="param-5" tabindex="-1"><a class="header-anchor" href="#param-5"><span>Param</span></a></h3><p>Metadata describing which adapter(s) the middleware applies to.</p><h2 id="call-signature-2" tabindex="-1"><a class="header-anchor" href="#call-signature-2"><span>Call Signature</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">defineAdapterMiddleware</span><span class="token generic class-name"><span class="token operator">&lt;</span>ExecutionContextType<span class="token punctuation">,</span> RawResponseType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>StoneBlueprint<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Defines a class-based adapter middleware.</p><p>This overload registers a middleware class for a specific adapter platform or alias.</p><h3 id="type-parameters-2" tabindex="-1"><a class="header-anchor" href="#type-parameters-2"><span>Type Parameters</span></a></h3><h4 id="executioncontexttype-2" tabindex="-1"><a class="header-anchor" href="#executioncontexttype-2"><span>ExecutionContextType</span></a></h4><p><code>ExecutionContextType</code> = <code>any</code></p><h4 id="rawresponsetype-2" tabindex="-1"><a class="header-anchor" href="#rawresponsetype-2"><span>RawResponseType</span></a></h4><p><code>RawResponseType</code> = <code>any</code></p><h3 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h3><h4 id="module-2" tabindex="-1"><a class="header-anchor" href="#module-2"><span>module</span></a></h4>`,16)),a("p",null,[s(t,{to:"/api/core/declarations/type-aliases/MiddlewareClass.html"},{default:r(()=>e[26]||(e[26]=[a("code",null,"MiddlewareClass",-1)])),_:1,__:[26]}),e[27]||(e[27]=n("<")),e[28]||(e[28]=a("code",null,"ExecutionContextType",-1)),e[29]||(e[29]=n(", ")),e[30]||(e[30]=a("code",null,"RawResponseType",-1)),e[31]||(e[31]=n(">"))]),e[50]||(e[50]=a("p",null,"The class to be used as middleware.",-1)),e[51]||(e[51]=a("h4",{id:"options-2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#options-2"},[a("span",null,"options")])],-1)),a("p",null,[s(t,{to:"/api/core/declarations/interfaces/AdapterMiddlewareOptions.html"},{default:r(()=>e[32]||(e[32]=[a("code",null,"AdapterMiddlewareOptions",-1)])),_:1,__:[32]}),e[33]||(e[33]=n(" & ")),e[34]||(e[34]=a("code",null,"object",-1))]),e[52]||(e[52]=a("p",null,"Adapter-specific metadata such as platform or alias.",-1)),e[53]||(e[53]=a("h3",{id:"returns-2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#returns-2"},[a("span",null,"Returns")])],-1)),a("p",null,[e[36]||(e[36]=a("code",null,"Partial",-1)),e[37]||(e[37]=n("<")),s(t,{to:"/api/core/options/StoneBlueprint/interfaces/StoneBlueprint.html"},{default:r(()=>e[35]||(e[35]=[a("code",null,"StoneBlueprint",-1)])),_:1,__:[35]}),e[38]||(e[38]=n(">"))]),e[54]||(e[54]=a("p",null,"A blueprint fragment that registers the middleware conditionally.",-1)),e[55]||(e[55]=a("h3",{id:"param-6",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#param-6"},[a("span",null,"Param")])],-1)),e[56]||(e[56]=a("p",null,"The middleware module to register (function, factory, or class).",-1)),e[57]||(e[57]=a("h3",{id:"param-7",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#param-7"},[a("span",null,"Param")])],-1)),e[58]||(e[58]=a("p",null,"Metadata describing which adapter(s) the middleware applies to.",-1))])}const y=o(u,[["render",m]]),w=JSON.parse('{"path":"/api/core/blueprint/AdapterUtils/functions/defineAdapterMiddleware.html","title":"Function: defineAdapterMiddleware()","lang":"en-US","frontmatter":{"description":"Function: defineAdapterMiddleware() Registers an adapter-specific middleware in the blueprint. This function dynamically inserts a middleware definition into the blueprint if th...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function: defineAdapterMiddleware()\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/api/core/blueprint/AdapterUtils/functions/defineAdapterMiddleware.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Function: defineAdapterMiddleware()"}],["meta",{"property":"og:description","content":"Function: defineAdapterMiddleware() Registers an adapter-specific middleware in the blueprint. This function dynamically inserts a middleware definition into the blueprint if th..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":1.17,"words":351},"filePathRelative":"api/core/blueprint/AdapterUtils/functions/defineAdapterMiddleware.md","autoDesc":true}');export{y as comp,w as data};
