import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as i,e as r,w as e,r as u,o as d,a as n,d as s}from"./app-CrbMk51G.js";const m={};function k(h,a){const l=u("Tabs");return d(),c("div",null,[a[4]||(a[4]=i('<p>Most of the time, route parameters are used to fetch models from a database or external API. With <strong>route model binding</strong>, Stone Router can handle this for you, automatically resolving models and injecting them into your route handlers.</p><p>In short: instead of manually fetching a <code>User</code> from <code>params.id</code>, Stone Router can fetch the <code>User</code> for you and inject it directly into <code>params.user</code>.</p><p>Goodbye boilerplate. Hello clean handlers.</p><h2 id="local-binding" tabindex="-1"><a class="header-anchor" href="#local-binding"><span>Local Binding</span></a></h2><p>You can define bindings directly in the route definition using the <code>bindings</code> option.</p>',5)),r(l,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:e(({value:t,isActive:o})=>a[0]||(a[0]=[s("Declarative")])),title1:e(({value:t,isActive:o})=>a[1]||(a[1]=[s("Imperative")])),tab0:e(({value:t,isActive:o})=>a[2]||(a[2]=[n("h3",{id:"declarative-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative-api"},[n("span",null,"Declarative API")])],-1),n("p",null,"First, create a service with a method that resolves the model:",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Service "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Service")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" alias"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'userService'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserService"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"findOneBy"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Fetch the user from DB or API")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("Then, define your event handler with the "),n("code",null,"bindings"),s(" option:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" EventHandler"),n("span",{class:"token punctuation"},","),s(" Get "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/router'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" IncomingHttpEvent "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/http-core'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"EventHandler")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyController"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Get")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'/users/:id(\\\\d+)'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" bindings"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" id"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'userService@findOneBy'"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"getUser"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" IncomingHttpEvent"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"unknown"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" event"),n("span",{class:"token punctuation"},"."),s("params"),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// this is now a full User model")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:o})=>a[3]||(a[3]=[n("p",null,"First, define a factory-based service:",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"userService"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"findOneBy"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token comment"},"// Fetch the user from DB or API")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"defineService"),n("span",{class:"token punctuation"},"("),s("userService"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" alias"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'userService'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("Then, define your route definition with the "),n("code",null,"bindings"),s(" option:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" IncomingHttpEvent "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/http-core'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(" definition "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  method"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'GET'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  path"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'/users/:id(\\\\d+)'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  bindings"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" id"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'userService@findOneBy'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function-variable function"},"handler"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" IncomingHttpEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" event"),n("span",{class:"token punctuation"},"."),s("params"),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// this is now a full User model")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[5]||(a[5]=i(`<h3 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How it Works</span></a></h3><ul><li><code>bindings</code> takes an object where each <strong>parameter key</strong> maps to a <strong>service method</strong></li><li>The value must be in the format: <code>serviceAlias@methodName</code></li><li>The method must accept <strong>two arguments</strong>: the parameter name and value</li><li>It must return the resolved model or <code>undefined</code></li></ul><p>Stone Router will call this method before your handler and replace the parameter value with the resolved result.</p><h3 id="custom-binding-key" tabindex="-1"><a class="header-anchor" href="#custom-binding-key"><span>Custom Binding Key</span></a></h3><p>Sometimes you want to inject the resolved model into a <strong>different parameter name</strong> than the one used in the URL.</p><p>You can do that with the <code>@</code> symbol in the path definition:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  path<span class="token operator">:</span> <span class="token string">&#39;/users/:user@id(\\\\d+)&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  bindings<span class="token operator">:</span> <span class="token punctuation">{</span> user<span class="token operator">:</span> <span class="token string">&#39;userService@findOneBy&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>params<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resolved model</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Still available too (raw ID)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>user@id</code> means:</p><ul><li>Use <code>id</code> as the <strong>raw parameter</strong></li><li>Inject the resolved model under <code>params.user</code></li></ul></li></ul><h3 id="optional-parameters" tabindex="-1"><a class="header-anchor" href="#optional-parameters"><span>Optional Parameters</span></a></h3><p>If the bound parameter is <strong>optional</strong>, and no value is present in the request, Stone Router <strong>won’t call the service method</strong> and will simply inject <code>undefined</code>.</p><p>However, if the parameter is required and no model is found, an <strong>error will be thrown</strong>.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  path<span class="token operator">:</span> <span class="token string">&#39;/users/:user@id(\\\\d+)?&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  bindings<span class="token operator">:</span> <span class="token punctuation">{</span> user<span class="token operator">:</span> <span class="token string">&#39;userService@findOneBy&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// event.params.user is either the model or undefined</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="global-binding" tabindex="-1"><a class="header-anchor" href="#global-binding"><span>Global Binding</span></a></h2><p>If you want to apply the same model binding logic across multiple routes, you don’t have to repeat yourself. Stone Router supports <strong>global bindings</strong> to automatically resolve parameters system-wide.</p><h3 id="setup-time" tabindex="-1"><a class="header-anchor" href="#setup-time"><span>Setup Time</span></a></h3><p>Use the <code>blueprint.set</code> method to declare bindings before the app starts:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.router.bindings&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  user<span class="token operator">:</span> <span class="token string">&#39;userService@findOneBy&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  post<span class="token operator">:</span> <span class="token string">&#39;postService@findOneBy&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This means that <em>any</em> route with <code>:user</code> or <code>:post</code> will automatically resolve the associated model, as long as the route includes the matching parameter.</p><h3 id="runtime" tabindex="-1"><a class="header-anchor" href="#runtime"><span>Runtime</span></a></h3><p>You can also define or override global bindings at runtime using <code>router.configure()</code>:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">router<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  bindings<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    user<span class="token operator">:</span> <span class="token string">&#39;userService@findOneBy&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    post<span class="token operator">:</span> <span class="token string">&#39;postService@findOneBy&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is handy for dynamic apps or multi-tenant setups where bindings may change based on configuration or environment.</p><h3 id="notes" tabindex="-1"><a class="header-anchor" href="#notes"><span>Notes</span></a></h3><ul><li>Global bindings apply to all matching parameter names across all routes.</li><li>Local <code>bindings</code> always take precedence over global ones.</li><li>Just like local bindings, the resolver methods must accept <code>(key: string, value: any)</code> and return the model (or <code>undefined</code>).</li></ul><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>Stone Router’s binding system is powerful, but with great power comes great responsibility. Here’s how to get the most out of it:</p><h4 id="use-binding-for-models-not-logic" tabindex="-1"><a class="header-anchor" href="#use-binding-for-models-not-logic"><span>Use Binding for Models, Not Logic</span></a></h4><p>Bindings are ideal for fetching entities like users, posts, products, etc. Avoid using them to perform business logic or side effects. Keep it clean and predictable.</p><h4 id="prefer-local-bindings-when-specific" tabindex="-1"><a class="header-anchor" href="#prefer-local-bindings-when-specific"><span>Prefer Local Bindings When Specific</span></a></h4><p>If a route needs a unique way to fetch a model, define the binding locally in that route. This makes the behavior explicit and easier to debug.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">bindings<span class="token operator">:</span> <span class="token punctuation">{</span> user<span class="token operator">:</span> <span class="token string">&#39;customUserService@resolveSuspendedUser&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="use-global-bindings-for-common-entities" tabindex="-1"><a class="header-anchor" href="#use-global-bindings-for-common-entities"><span>Use Global Bindings for Common Entities</span></a></h4><p>If the same parameter shows up everywhere (<code>:user</code>, <code>:post</code>), define a global binding in <code>blueprint.set()</code> or <code>router.configure()</code>. It keeps routes DRY and consistent.</p><h4 id="always-handle-undefined" tabindex="-1"><a class="header-anchor" href="#always-handle-undefined"><span>Always Handle <code>undefined</code></span></a></h4><p>Bindings return <code>undefined</code> when the model isn’t found. Your handlers should expect that, especially for optional parameters.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> isEmpty <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> NotFoundError <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core-http&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotFoundError</span><span class="token punctuation">(</span><span class="token string">&#39;User not found&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="use-aliases-for-services" tabindex="-1"><a class="header-anchor" href="#use-aliases-for-services"><span>Use Aliases for Services</span></a></h4><p>Make sure the services you bind are registered with a clean <code>alias</code> using the <code>@Service({ alias })</code> decorator. It avoids verbose class names and helps with maintainability.</p><h4 id="keep-resolution-methods-small-and-focused" tabindex="-1"><a class="header-anchor" href="#keep-resolution-methods-small-and-focused"><span>Keep Resolution Methods Small and Focused</span></a></h4><p>Binding resolution methods should:</p><ul><li>Take <code>(key, value)</code> as arguments</li><li>Return the resolved model or <code>undefined</code></li><li>Avoid heavy logic or side effects</li></ul><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Stone Router’s binding system allows you to automatically resolve route parameters into fully-loaded models. Instead of receiving an ID, your handler can receive the actual object, cleaner, safer, and faster to code.</p><p>You can bind models:</p><ul><li><strong>Locally</strong>, per route, using the <code>bindings</code> option</li><li><strong>Globally</strong>, across all routes, via <code>blueprint.set()</code> or <code>router.configure()</code></li><li>With <strong>custom parameter keys</strong> like <code>:user@id</code> to decouple URL naming from variable naming</li></ul><p>The binding system supports:</p><ul><li>Optional parameters</li><li>Regex-based route params</li><li>Service aliases with method names (<code>&#39;userService@findOneBy&#39;</code>)</li><li>Consistent injection via <code>event.params</code></li></ul><p>Handle <code>undefined</code> when needed, throw smart errors, and keep your resolution logic minimal.</p><p>Stone Router takes care of the boilerplate, so you can focus on your domain logic, not your plumbing.<br> Feel the power of the Continuum! 😎</p>`,49))])}const b=p(m,[["render",k]]),f=JSON.parse('{"path":"/docs/router/binding.html","title":"Binding","lang":"en-US","frontmatter":{"title":"Binding","description":"Most of the time, route parameters are used to fetch models from a database or external API. With route model binding, Stone Router can handle this for you, automatically resolv...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Binding\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/docs/router/binding.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Binding"}],["meta",{"property":"og:description","content":"Most of the time, route parameters are used to fetch models from a database or external API. With route model binding, Stone Router can handle this for you, automatically resolv..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":3.16,"words":949},"filePathRelative":"docs/router/binding.md","autoDesc":true}');export{b as comp,f as data};
