import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as i,e as r,w as a,r as d,o as u,a as n,d as s}from"./app-B3SZc_3K.js";const m="/assets/image/url_components.png",h={};function v(g,e){const p=d("Tabs");return u(),l("div",null,[e[4]||(e[4]=i(`<p>In Stone.js, the <code>IncomingEvent</code> is the heart of your application. It represents the <strong>intention</strong> that your system must respond to. This intention doesn’t come out of nowhere, it’s born from a <strong>cause</strong> in the external world.</p><p>That cause, an HTTP request, a CLI command, a cloud event, is captured and interpreted by an <a href="../architecture/adapter"><strong>adapter</strong></a>. The adapter translates it into an <code>IncomingEvent</code>, and it’s passed through the system for processing.</p><p>In the Continuum Architecture, <strong>every application begins with an intention</strong>. That intention is always modeled as an <code>IncomingEvent</code>.</p><p>Even though it’s created by the adapter in the <strong>integration dimension</strong>, the <code>IncomingEvent</code> <strong>belongs to the initialization dimension</strong>, where the core logic and internal context live. It is part of the internal flow of your application, not a raw input you manipulate freely.</p><p>You cannot mutate or instantiate an <code>IncomingEvent</code> directly. It is created <strong>internally by the adapter</strong>, and as a developer, you only <strong>participate in its creation</strong> via <a href="../architecture/adapter#adapter-middleware">adapter middleware</a>. Once received, it is treated as immutable. You can read from it, enrich it with metadata, and respond to it, but you never replace or reassign it.</p><p>There are many flavors of <code>IncomingEvent</code> depending on the platform:</p><table><thead><tr><th>Platform</th><th>Class</th><th>Example Adapter</th></tr></thead><tbody><tr><td>Node HTTP</td><td><code>IncomingHttpEvent</code></td><td><code>@stone-js/node-http-adapter</code></td></tr><tr><td>Browser</td><td><code>IncomingBrowserEvent</code></td><td><code>@stone-js/browser-adapter</code></td></tr><tr><td>Node CLI</td><td><code>IncomingEvent</code></td><td><code>@stone-js/node-cli-adapter</code></td></tr><tr><td>AWS Lambda</td><td><code>IncomingEvent</code></td><td><code>@stone-js/aws-lambda-adapter</code></td></tr><tr><td>AWS Lambda HTTP</td><td><code>IncomingHttpEvent</code></td><td><code>@stone-js/aws-lambda-http-adapter</code></td></tr></tbody></table><p>At the base of the hierarchy is <code>IncomingEvent</code>, it’s not abstract. It’s the simplest usable form of an event in Stone.js, with generic capabilities like accessing metadata and locale. More specific subclasses like <code>IncomingHttpEvent</code> or <code>IncomingBrowserEvent</code> extend its behavior for their respective platforms.</p><p>Every <a href="./event-handler">event handler</a> in Stone.js, whether it&#39;s your main application entry point or a specific route, receives one <code>IncomingEvent</code>. Your job as a developer is to respond to this incoming event, using the full expressive power of your domain.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Throughout the Stone.js documentation and for simplicity, we refer to <code>IncomingEvent</code> for all incoming events.</p></div><h2 id="using-incomingevent" tabindex="-1"><a class="header-anchor" href="#using-incomingevent"><span>Using IncomingEvent</span></a></h2><p>The <code>IncomingEvent</code> class is the most minimal and generic expression of an incoming event in Stone.js. It is not abstract. It is fully usable and forms the foundation upon which more specific incoming events are built (like <code>IncomingBrowserEvent</code> or <code>IncomingHttpEvent</code>). All <code>IncomingEvent</code> instances extend the base <code>Event</code> class, which provides standard metadata and utility features.</p><p>The <code>IncomingEvent</code> encapsulates the <strong>intention</strong> of the system, a normalized, structured version of the external cause. It holds just enough data to represent this intent internally, in a consistent and platform-agnostic way.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> IncomingEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handle</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> IncomingEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Access the event&#39;s properties</span></span>
<span class="line">  <span class="token keyword">const</span> locale <span class="token operator">=</span> event<span class="token punctuation">.</span>locale</span>
<span class="line">  <span class="token keyword">const</span> metadata <span class="token operator">=</span> event<span class="token punctuation">.</span>metadata</span>
<span class="line">  <span class="token keyword">const</span> timeStamp <span class="token operator">=</span> event<span class="token punctuation">.</span>timeStamp</span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Use the event&#39;s source</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>source<span class="token punctuation">.</span>platform<span class="token punctuation">)</span> <span class="token comment">// e.g., &#39;http_node&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="key-properties" tabindex="-1"><a class="header-anchor" href="#key-properties"><span>Key Properties</span></a></h3><p>Here are the core properties of an <code>IncomingEvent</code>:</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td><code>type</code></td><td>The immutable type of the incoming event <code>stonejs@incoming_event</code>.</td></tr><tr><td><code>locale</code></td><td>The preferred locale for the event (default is <code>&#39;en&#39;</code>).</td></tr><tr><td><code>metadata</code></td><td>Internal metadata, modifiable via <code>get()</code> and <code>set()</code> methods.</td></tr><tr><td><code>source</code></td><td>A structured object representing the original external context.</td></tr><tr><td><code>timeStamp</code></td><td>The time when the event was created (milliseconds since epoch).</td></tr></tbody></table><h3 id="the-source-a-portal-to-the-external-context" tabindex="-1"><a class="header-anchor" href="#the-source-a-portal-to-the-external-context"><span>The <code>source</code>: A Portal to the External Context</span></a></h3><p>While Stone.js encourages you to operate within the internal, normalized incoming event interface, there are situations where you need to peek back at the raw, unprocessed external input, for example, to access a third-party field or inspect the raw platform context.</p><p>This is where the <code>source</code> property comes into play.</p><p>The <code>source</code> is your structured gateway to the external world. It holds everything the adapter used to build the <code>IncomingEvent</code>.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">IncomingEventSource</span> <span class="token punctuation">{</span></span>
<span class="line">  rawEvent<span class="token operator">:</span> <span class="token builtin">unknown</span></span>
<span class="line">  rawContext<span class="token operator">:</span> <span class="token builtin">unknown</span></span>
<span class="line">  rawResponse<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span></span>
<span class="line">  platform<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You’ll typically use it for:</p><ul><li>Debugging and introspection</li><li>Logging raw platform-level input</li><li>Implementing lower-level integrations or fallbacks</li></ul><h4 id="example-accessing-raw-aws-lambda-input" tabindex="-1"><a class="header-anchor" href="#example-accessing-raw-aws-lambda-input"><span>Example: Accessing raw AWS Lambda input</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span>source<span class="token punctuation">.</span>platform <span class="token comment">// &#39;aws_lambda&#39;</span></span>
<span class="line">event<span class="token punctuation">.</span>source<span class="token punctuation">.</span>rawEvent <span class="token comment">// The raw Lambda event (as-is)</span></span>
<span class="line">event<span class="token punctuation">.</span>source<span class="token punctuation">.</span>rawContext <span class="token comment">// The raw Lambda context object</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This structure is consistent across platforms, making it easier to write adapter-agnostic fallback logic when necessary.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>That said, <strong>avoid relying too heavily on the source</strong>. If you find yourself accessing <code>rawEvent</code> often, it may be time to create a new <a href="../architecture/adapter#adapter-middleware">adapter middleware</a> to populate the necessary data into the <code>metadata</code> store.</p></div><h3 id="smart-api-get-set" tabindex="-1"><a class="header-anchor" href="#smart-api-get-set"><span>Smart API (<code>get()</code> / <code>set()</code>)</span></a></h3><p>All IncomingEvents provide a unified API for retrieving and storing data using <code>get()</code> and <code>set()</code>. This API is designed to be intuitive, flexible, and most importantly, <strong>platform-agnostic</strong>.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;user.name&#39;</span><span class="token punctuation">)</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;user.role&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Dot notation</strong> is supported for accessing or adding nested values (<code>user.name</code>, <code>user.role</code>, etc.)</li><li>You can provide a <strong>fallback value</strong> if the key is not found:</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;permissions.admin&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>You can also add internal data using <code>set()</code>:</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;my.custom.flag&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>All data written via <code>set()</code> is stored inside the <strong>metadata store</strong>, it’s safe, isolated from the raw request, and purely internal. This makes it perfect for middleware enrichment, auth flags, and request-specific context propagation.</p><h4 id="platform-aware-magic" tabindex="-1"><a class="header-anchor" href="#platform-aware-magic"><span>Platform-Aware Magic</span></a></h4><p>Here’s where it gets clever.</p><p>On minimal platforms like AWS Lambda or generic CLI contexts, <strong>there’s no native “body” field</strong> like you&#39;d find in HTTP. But that doesn’t stop you. Adapters that produce an <code>IncomingEvent</code> from those platforms <strong>extract any structured input from the raw external context and inject it into the metadata</strong>.</p><p>That means you can use <code>event.get(&#39;payload.message&#39;)</code> in both environments:</p><ul><li>In local development with the HTTP adapter and Postman (where the payload is in the body)</li><li>In Lambda (where the payload might be buried inside the raw <code>event</code> object)</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Works in both environments!</span></span>
<span class="line"><span class="token keyword">const</span> name <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;user.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Guest&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Because <code>IncomingEvent.get()</code> first looks in the body (if the subclass has one), then falls back to metadata, <strong>your handler logic remains unchanged</strong>, regardless of the platform.</p><p>This gives you true <strong>cross-platform compatibility</strong> with zero branching logic. Write it once. Deploy it anywhere.</p><p>In subclasses like <code>IncomingBrowserEvent</code> or <code>IncomingHttpEvent</code>, the <code>get()</code> method is even smarter, it follows a prioritized lookup strategy specific to each platform (e.g., body → query → headers → cookies → metadata).<br> These subclass-specific strategies will be covered in detail in their respective sections.</p><h3 id="lifecycle-and-immutability" tabindex="-1"><a class="header-anchor" href="#lifecycle-and-immutability"><span>Lifecycle and Immutability</span></a></h3><p>You never create an <code>IncomingEvent</code> yourself. It is instantiated by the adapter when the external cause is received. This happens at the boundary between the integration and initialization dimensions.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">StoneApp</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> IncomingEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Read intent data, respond accordingly</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once passed to your handler, you should treat it as <strong>read-only</strong>, except for setting metadata via <code>set()</code>. If you need to duplicate or fork the event, use <code>clone()</code>.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> copy <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">copy<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;custom&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-incomingbrowserevent" tabindex="-1"><a class="header-anchor" href="#using-incomingbrowserevent"><span>Using IncomingBrowserEvent</span></a></h2><p>The <code>IncomingBrowserEvent</code> is a platform-specific subclass of <code>IncomingEvent</code>, designed for applications running in a <strong>browser context</strong>. It is automatically created by adapters like <code>@stone-js/browser-adapter</code> and provides extended APIs tailored for frontend navigation, SPA routing, cookies, and client environment detection.</p><p>It includes all capabilities of <code>IncomingEvent</code> (e.g., <code>get()</code>, <code>set()</code>, <code>clone()</code>, metadata, source access), but adds features specific to browser-based use cases.</p><h3 id="constructor-reference" tabindex="-1"><a class="header-anchor" href="#constructor-reference"><span>Constructor Reference</span></a></h3><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>url</code></td><td><code>URL</code></td><td>Required. The browser&#39;s full URL</td></tr><tr><td><code>protocol</code></td><td><code>string</code></td><td>Optional. The connection protocol (default: <code>&#39;http&#39;</code>)</td></tr><tr><td><code>queryString</code></td><td><code>string</code></td><td>Optional. Raw query string (parsed internally into <code>query</code>)</td></tr><tr><td><code>cookies</code></td><td><code>CookieCollection</code></td><td>Optional. Pre-parsed cookies</td></tr><tr><td><code>source</code></td><td><code>IncomingEventSource</code></td><td>Required. Raw external context (e.g., window/document events)</td></tr><tr><td><code>locale</code></td><td><code>string</code></td><td>Optional. Locale string (default: <code>&#39;en&#39;</code>)</td></tr><tr><td><code>metadata</code></td><td><code>Record&lt;string, unknown&gt;</code></td><td>Optional. Initial metadata for internal state</td></tr></tbody></table><h3 id="how-incomingbrowserevent-is-created" tabindex="-1"><a class="header-anchor" href="#how-incomingbrowserevent-is-created"><span>How <code>IncomingBrowserEvent</code> is Created</span></a></h3><p>Not all browser events are welcome here.</p><p>The <code>IncomingBrowserEvent</code> is created by the <strong>Stone.js browser adapter</strong>, but not from just any DOM event. Stone.js doesn’t care about <code>click</code>, <code>keydown</code>, or <code>hover</code> events, those belong to the UI world.</p><p>Instead, <strong>Stone.js focuses solely on navigation events</strong>, the kind that express an intention to change the page.</p><p>By default, the browser adapter listens to <strong>two events</strong>:</p><table><thead><tr><th>Event Name</th><th>Triggered When</th></tr></thead><tbody><tr><td><code>&#39;popstate&#39;</code></td><td>User navigates using browser history (e.g., back/forward)</td></tr><tr><td><code>&#39;@stonejs/router.navigate&#39;</code></td><td>Programmatic navigation via the Stone.js Router</td></tr></tbody></table><p>For example:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">router<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">&#39;/posts/new&#39;</span><span class="token punctuation">)</span> <span class="token comment">// triggers &#39;@stonejs/router.navigate&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>These events are treated as <strong>causes</strong>. When the adapter receives one, it launches the internal context pipeline, which in turn creates a new <code>IncomingBrowserEvent</code>, representing your new navigation <strong>intention</strong>.</p><p>Stone.js ensures this stays focused and efficient: it doesn&#39;t hijack unrelated events or bloat your event model.</p><h4 id="custom-events" tabindex="-1"><a class="header-anchor" href="#custom-events"><span>Custom Events?</span></a></h4><p>If you really want to extend this, you can register additional browser events to be treated as navigation causes using the blueprint:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;stone.adapter.events&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;my-custom-event&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Stone.js will start listening to <code>&#39;my-custom-event&#39;</code>, and whenever it is dispatched, it will be converted into an <code>IncomingBrowserEvent</code>.</p><div class="hint-container tip"><p class="hint-container-title">But honestly?</p><p>You probably won’t need this. The built-in events already cover the most important navigation scenarios.</p></div><h3 id="populating-the-incomingbrowserevent" tabindex="-1"><a class="header-anchor" href="#populating-the-incomingbrowserevent"><span>Populating the <code>IncomingBrowserEvent</code></span></a></h3><p>Instances are usually created by the browser adapter automatically, you won’t need to construct them manually unless writing a custom adapter or test fixture.</p><p>But you can participate in the creation process by providing a custom <code>protocol</code> or <code>locale</code> value, using <a href="../architecture/adapter#adapter-middleware">adapter middleware</a>.<br> The declarative API is used for demonstration purposes, but you can also use the imperative API.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">BROWSER_PLATFORM</span><span class="token punctuation">,</span></span>
<span class="line">  BrowserAdapterContext<span class="token punctuation">,</span></span>
<span class="line">  BrowserAdapterResponseBuilder</span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/browser-adapter&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Promiseable<span class="token punctuation">,</span> NextMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">AdapterMiddleware</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> platform<span class="token operator">:</span> <span class="token constant">BROWSER_PLATFORM</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyAdapterMiddleware</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">async</span> <span class="token function">handle</span><span class="token punctuation">(</span></span>
<span class="line">    context<span class="token operator">:</span> BrowserAdapterContext<span class="token punctuation">,</span></span>
<span class="line">    next<span class="token operator">:</span> NextMiddleware<span class="token operator">&lt;</span>BrowserAdapterContext<span class="token punctuation">,</span> BrowserAdapterResponseBuilder<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token operator">:</span> Promiseable<span class="token operator">&lt;</span>BrowserAdapterResponseBuilder<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    context<span class="token punctuation">.</span>incomingEventBuilder</span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;locale&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;en-US&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;protocol&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As highlighted, the <code>IncomingBrowserEvent</code> is not instantiated directly. Instead, you configure it using the <code>incomingEventBuilder</code>, which allows you to define the properties listed above before the incoming event is passed to the <a href="./event-handler">event handler</a>.</p><h3 id="url-and-query-access" tabindex="-1"><a class="header-anchor" href="#url-and-query-access"><span>URL and Query Access</span></a></h3><p>Browser events are centered around the current document&#39;s URL. <code>IncomingBrowserEvent</code> provides direct access to the key parts of the URL via:</p><ul><li><code>event.uri</code> → full URL string</li><li><code>event.path</code> → <code>pathname + search</code></li><li><code>event.pathname</code> → URL path without query</li><li><code>event.query</code> → <code>URLSearchParams</code> instance</li><li><code>event.queryString</code> → raw query string</li><li><code>event.host</code>, <code>event.hostname</code>, <code>event.hash</code>, <code>event.scheme</code></li></ul><p>And useful helpers like:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span>decodedPathname <span class="token comment">// decoded version of pathname</span></span>
<span class="line">event<span class="token punctuation">.</span>segments        <span class="token comment">// pathname split into an array of segments</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">uriForPath</span><span class="token punctuation">(</span><span class="token string">&#39;/foo&#39;</span><span class="token punctuation">)</span> <span class="token comment">// full URI with domain for relative path</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These utilities are useful for dynamic rendering, navigation guards, and routing logic in SPAs.</p><h3 id="cookies-and-query-parameters" tabindex="-1"><a class="header-anchor" href="#cookies-and-query-parameters"><span>Cookies and Query Parameters</span></a></h3><p>The browser event provides full cookie support using the <code>CookieCollection</code> utility:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">&#39;auth_token&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// Return a Cookie object or default value</span></span>
<span class="line">event<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;auth_token&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Get the cookie value directly</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">hasCookie</span><span class="token punctuation">(</span><span class="token string">&#39;isLoggedIn&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also read cookie values directly using <code>event.get()</code> thanks to the smart accessor API.</p><p>Likewise, <code>event.query.get(&#39;page&#39;)</code> or <code>event.get(&#39;page&#39;)</code> will fetch query parameters.</p><h3 id="routing-integration" tabindex="-1"><a class="header-anchor" href="#routing-integration"><span>Routing Integration</span></a></h3><p>The <code>IncomingBrowserEvent</code> supports route integration via internal route resolvers:</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>This API is only available when the router is active. If you’re not using the router, these methods will return <code>undefined</code>.</p></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Current matched route (if any)</span></span>
<span class="line">event<span class="token punctuation">.</span>params        <span class="token comment">// An object with all route parameters</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Route param (e.g., \`/user/:id\`)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This allows you to access dynamic route parameters directly from the incoming event, making it easy to build SPAs with Stone.js.</p><h3 id="user-environment-detection" tabindex="-1"><a class="header-anchor" href="#user-environment-detection"><span>User Environment Detection</span></a></h3><p>You can safely introspect the browser’s environment using:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span>userAgent  <span class="token comment">// Returns navigator.userAgent</span></span>
<span class="line">event<span class="token punctuation">.</span>isSecure   <span class="token comment">// Returns true if protocol is https</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="smart-get-strategy" tabindex="-1"><a class="header-anchor" href="#smart-get-strategy"><span>Smart <code>get()</code> Strategy</span></a></h3><p><code>IncomingBrowserEvent</code> inherits the smart accessor from <code>IncomingEvent</code>, but overrides its lookup order to favor browser-specific sources:</p><ol><li>Route parameters (If using the router)</li><li>Query parameters</li><li>Cookies</li><li>Metadata</li></ol><p>This means that in browser applications, calling:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;theme&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;light&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Will try to find <code>theme</code> from:</p><ul><li>A dynamic route segment (e.g., <code>/theme/:theme</code>)</li><li>A query string like <code>?theme=dark</code></li><li>A cookie like <code>theme=dark</code></li><li>A metadata store (if set by middleware)</li><li>Fallback to <code>&#39;light&#39;</code> if not found</li></ul><p>No need to manually inspect cookies, query strings, or params, the browser event does it all for you. This makes your code cleaner and more maintainable, as you can rely on a consistent API for accessing data regardless of its source.<br> Feel free to use the specific accessors if you need to be explicit about the source.</p><h2 id="using-incominghttpevent" tabindex="-1"><a class="header-anchor" href="#using-incominghttpevent"><span>Using IncomingHttpEvent</span></a></h2><p><code>IncomingHttpEvent</code> is the most advanced subclass of <code>IncomingEvent</code>. It is created automatically by HTTP-compatible adapters such as:</p><ul><li><code>@stone-js/node-http-adapter</code> (Node.js HTTP/HTTPS server)</li><li><code>@stone-js/aws-lambda-http-adapter</code> (Lambda HTTP functions)</li><li>Any custom HTTP adapter you implement</li></ul><p>It is designed to encapsulate everything about an incoming HTTP request in a platform-agnostic and feature-rich way, without ever dealing directly with raw HTTP request objects.</p><p>It includes everything from <code>IncomingEvent</code> and <code>IncomingBrowserEvent</code>, and expands it to support HTTP-specific semantics like methods, headers, request bodies, uploaded files, content negotiation, and caching headers.</p><h3 id="constructor-reference-1" tabindex="-1"><a class="header-anchor" href="#constructor-reference-1"><span>Constructor Reference</span></a></h3><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>url</code></td><td><code>URL</code></td><td>Required. The full request URL</td></tr><tr><td><code>ip</code></td><td><code>string</code></td><td>Required. The client’s IP address</td></tr><tr><td><code>ips</code></td><td><code>string[]</code></td><td>Optional. Proxy IP chain if available</td></tr><tr><td><code>method</code></td><td><code>HttpMethod</code></td><td>Optional. The HTTP method (default: <code>&#39;GET&#39;</code>)</td></tr><tr><td><code>headers</code></td><td><code>Headers</code> or <code>Record&lt;string,string&gt;</code></td><td>Optional. Parsed request headers</td></tr><tr><td><code>body</code></td><td><code>Record&lt;string, unknown&gt;</code></td><td>Optional. Parsed request body</td></tr><tr><td><code>files</code></td><td><code>Record&lt;string, UploadedFile[]&gt;</code></td><td>Optional. Uploaded files (if any)</td></tr><tr><td><code>queryString</code></td><td><code>string</code></td><td>Optional. Raw query string</td></tr><tr><td><code>cookies</code></td><td><code>CookieCollection</code></td><td>Optional. Parsed cookies</td></tr><tr><td><code>source</code></td><td><code>IncomingEventSource</code></td><td>Required. Raw request data from the adapter</td></tr><tr><td><code>locale</code></td><td><code>string</code></td><td>Optional. The preferred locale (default: <code>&#39;en&#39;</code>)</td></tr><tr><td><code>metadata</code></td><td><code>Record&lt;string, unknown&gt;</code></td><td>Optional. Initial internal metadata</td></tr></tbody></table><p>You will never manually instantiate this event. It is built by the adapter and passed to your event handler automatically.</p><div class="hint-container tip"><p class="hint-container-title">Don&#39;t forget!</p><p>You can participate in the creation process using <a href="../architecture/adapter#adapter-middleware">adapter middleware</a>.</p></div><h3 id="url-method-and-routing-access" tabindex="-1"><a class="header-anchor" href="#url-method-and-routing-access"><span>URL, Method, and Routing Access</span></a></h3><p>Just like <code>IncomingBrowserEvent</code>, you can retrieve and manipulate URL-related information.</p><p>For example, consider this URL: <code>http://user:pass@site.com:80/pa/th?q=val#hash</code>, represented by this image:</p><figure><img src="`+m+`" alt="URL components" tabindex="0" loading="lazy"><figcaption>URL components</figcaption></figure><p>Here’s how to access this URL and its components:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span>url <span class="token comment">// returns the full URL</span></span>
<span class="line">event<span class="token punctuation">.</span>uri <span class="token comment">// returns &quot;http://user:pass@site.com:80/pa/th?q=val#hash&quot;</span></span>
<span class="line">event<span class="token punctuation">.</span>protocol <span class="token comment">// returns &quot;http&quot;</span></span>
<span class="line">event<span class="token punctuation">.</span>host <span class="token comment">// returns &quot;site.com:80&quot;</span></span>
<span class="line">event<span class="token punctuation">.</span>hostname <span class="token comment">// returns &quot;site.com&quot;</span></span>
<span class="line">event<span class="token punctuation">.</span>path <span class="token comment">// returns &quot;/pa/th?q=val&quot;</span></span>
<span class="line">event<span class="token punctuation">.</span>pathname <span class="token comment">// returns &quot;/pa/th&quot;</span></span>
<span class="line">event<span class="token punctuation">.</span>segments <span class="token comment">// returns [&#39;pa&#39;, &#39;th&#39;]</span></span>
<span class="line">event<span class="token punctuation">.</span>queryString <span class="token comment">// returns &quot;?q=val&quot;</span></span>
<span class="line">event<span class="token punctuation">.</span>query <span class="token comment">// returns URLSearchParams { &#39;q&#39; =&gt; &#39;val&#39; }</span></span>
<span class="line">event<span class="token punctuation">.</span>hash <span class="token comment">// returns &quot;#hash&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also check the request method:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Get HTTP method</span></span>
<span class="line">event<span class="token punctuation">.</span>method <span class="token comment">// returns &#39;GET&#39;</span></span>
<span class="line"><span class="token comment">// Inspect method</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">isMethod</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">)</span> <span class="token comment">// returns \`true\` or \`false\`</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">isMethodSafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// returns \`true\` for [&#39;GET&#39;, &#39;HEAD&#39;, &#39;OPTIONS&#39;, &#39;TRACE&#39;]</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">isMethodCacheable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// returns \`true\` for [&#39;GET&#39;, &#39;HEAD&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Route information is also accessible if you’re using the Stone.js Router:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span>params         <span class="token comment">// returns an object with all route parameters</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// full route object</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span> <span class="token comment">// from route</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="headers-and-content-negotiation" tabindex="-1"><a class="header-anchor" href="#headers-and-content-negotiation"><span>Headers and Content Negotiation</span></a></h3><p>The <code>IncomingHttpEvent</code> exposes full control over headers via:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Get headers</span></span>
<span class="line">event<span class="token punctuation">.</span>headers <span class="token comment">// returns Headers instance</span></span>
<span class="line"><span class="token comment">// Get header</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&#39;authorization&#39;</span><span class="token punctuation">)</span> <span class="token comment">// returns &quot;Bearer XXXXXX&quot;</span></span>
<span class="line"><span class="token comment">// Default value</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&#39;x-custom-header&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;my-header&#39;</span><span class="token punctuation">)</span> <span class="token comment">// returns &quot;my-header&quot;</span></span>
<span class="line"><span class="token comment">// Has header</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">hasHeader</span><span class="token punctuation">(</span><span class="token string">&#39;authorization&#39;</span><span class="token punctuation">)</span> <span class="token comment">// returns \`true\` or \`false\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It also handles content negotiation through:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span>types     <span class="token comment">// Acceptable types</span></span>
<span class="line">event<span class="token punctuation">.</span>charsets  <span class="token comment">// Acceptable charsets</span></span>
<span class="line">event<span class="token punctuation">.</span>languages <span class="token comment">// Acceptable languages</span></span>
<span class="line">event<span class="token punctuation">.</span>encodings <span class="token comment">// Acceptable encodings</span></span>
<span class="line"><span class="token comment">// Get content-type</span></span>
<span class="line"><span class="token class-name">event</span><span class="token punctuation">.</span>contentType <span class="token comment">// returns &#39;application/json&#39;</span></span>
<span class="line"><span class="token comment">// Get content-type charset</span></span>
<span class="line">event<span class="token punctuation">.</span>charset <span class="token comment">// returns &#39;utf-8&#39;</span></span>
<span class="line"><span class="token comment">// Returns the first accepted type.</span></span>
<span class="line"><span class="token comment">// If nothing in types is accepted, then false is returned.</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">acceptsTypes</span><span class="token punctuation">(</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// Returns the first accepted encoding.</span></span>
<span class="line"><span class="token comment">// If nothing in encodings is accepted, then false is returned.</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">acceptsEncodings</span><span class="token punctuation">(</span><span class="token string">&#39;gzip&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;deflate&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// Returns the first accepted charset.</span></span>
<span class="line"><span class="token comment">// If nothing in charsets is accepted, then false is returned.</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">acceptsCharsets</span><span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// Returns the first accepted language.</span></span>
<span class="line"><span class="token comment">// If nothing in languages is accepted, then false is returned.</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">acceptsLanguages</span><span class="token punctuation">(</span><span class="token string">&#39;en-US&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="request-body-and-json" tabindex="-1"><a class="header-anchor" href="#request-body-and-json"><span>Request Body and JSON</span></a></h3><p>For HTTP requests that include a body, you can access and inspect it through:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span>body                         <span class="token comment">// the full parsed body</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token string">&#39;user.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span> <span class="token comment">// deep access or default value</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">hasJson</span><span class="token punctuation">(</span><span class="token string">&#39;user.isAdmin&#39;</span><span class="token punctuation">)</span>      <span class="token comment">// check existence</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This enables safe and expressive handling of incoming data, especially for APIs receiving structured JSON payloads.</p><h3 id="file-uploads" tabindex="-1"><a class="header-anchor" href="#file-uploads"><span>File Uploads</span></a></h3><p>If your adapter supports multipart/form-data, uploaded files are accessible via:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span>files <span class="token comment">// returns all uploaded files Record&lt;string, UploadedFile[]&gt;</span></span>
<span class="line">event<span class="token punctuation">.</span>files<span class="token punctuation">.</span>avatar     <span class="token comment">// returns UploadedFile[]</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token string">&#39;document&#39;</span><span class="token punctuation">)</span> <span class="token comment">// shorthand</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">hasFile</span><span class="token punctuation">(</span><span class="token string">&#39;resume&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// check existence</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can filter uploaded files:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Get filtered uploaded files</span></span>
<span class="line"><span class="token keyword">const</span> files <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">filterFiles</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;documents&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;images&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> documents <span class="token operator">=</span> files<span class="token punctuation">.</span>documents <span class="token comment">// returns UploadedFile[]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each <code>UploadedFile</code> provides utilities:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">file<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">file<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">file<span class="token punctuation">.</span><span class="token function">getClientMimeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">file<span class="token punctuation">.</span><span class="token function">guessClientExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">file<span class="token punctuation">.</span><span class="token function">getClientOriginalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">file<span class="token punctuation">.</span><span class="token function">getClientOriginalExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can save a file using the <code>move</code> method, which takes the relative path of the directory where the file will be saved as a mandatory parameter and an optional parameter to specify the name used for saving the file:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Get the first valid file</span></span>
<span class="line"><span class="token keyword">const</span> document <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token string">&#39;documents&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">document</span> <span class="token operator">=&gt;</span> document<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Save with client filename</span></span>
<span class="line">document<span class="token operator">?.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token string">&#39;./files-directory/&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Save with provided filename</span></span>
<span class="line">document<span class="token operator">?.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token string">&#39;./files-directory/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;file-doc-01&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This makes server-side file handling secure, consistent, and predictable.</p><h3 id="enabling-body-and-file-uploads" tabindex="-1"><a class="header-anchor" href="#enabling-body-and-file-uploads"><span>Enabling Body and File Uploads</span></a></h3><p>Stone.js is designed to be fast and lightweight by default. To keep bundle size and boot time minimal, <strong>body parsing and file upload handling are opt-in features</strong>, not included unless explicitly added.</p><p>To access:</p><ul><li><code>event.body</code></li><li><code>event.files</code></li><li><code>event.json()</code></li><li><code>event.getFile()</code></li></ul><p>You must register the corresponding middleware:</p><table><thead><tr><th>Middleware Name</th><th>Purpose</th></tr></thead><tbody><tr><td><code>BodyEventMiddleware</code></td><td>Parses the incoming request body into <code>event.body</code></td></tr><tr><td><code>FilesEventMiddleware</code></td><td>Parses uploaded files into <code>event.files</code> and helpers</td></tr></tbody></table><p>These middleware are shipped in each HTTP adapter but <strong>are not installed by default</strong>. You must explicitly register them using the blueprint.</p><p>Each adapter provides its <strong>own compatible middleware</strong>, so you must only use middleware from the adapter you&#39;re working with.</p><h4 id="example-registering-with-node-http-adapter" tabindex="-1"><a class="header-anchor" href="#example-registering-with-node-http-adapter"><span>Example: Registering with Node HTTP Adapter</span></a></h4><p>Here is a declative and imperative example of how to register the body and file upload middleware with the Node HTTP adapter.</p>`,150)),r(p,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:a(({value:t,isActive:o})=>e[0]||(e[0]=[s("Declarative")])),title1:a(({value:t,isActive:o})=>e[1]||(e[1]=[s("Imperative")])),tab0:a(({value:t,isActive:o})=>e[2]||(e[2]=[n("h5",{id:"declarative-registration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative-registration"},[n("span",null,"Declarative registration")])],-1),n("p",null,[s("To register the middleware declaratively, use the "),n("code",null,"middleware"),s(" option within the "),n("code",null,"@NodeHttp()"),s(" decorator. This approach allows you to specify the middleware directly in the adapter configuration, ensuring a clean and concise setup.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  NodeHttp"),n("span",{class:"token punctuation"},","),s(" BodyEventMiddleware"),n("span",{class:"token punctuation"},","),s(" FilesEventMiddleware")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/node-http-adapter'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"NodeHttp")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  middleware"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"[")]),s(`
`),n("span",{class:"line"},[s("    BodyEventMiddleware"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},"    FilesEventMiddleware"),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Application"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:a(({value:t,isActive:o})=>e[3]||(e[3]=[n("h5",{id:"imperative-registration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imperative-registration"},[n("span",null,"Imperative registration")])],-1),n("p",null,[s("To register the middleware imperatively, you can use the "),n("code",null,"defineAdapterMiddleware()"),s(" function.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  BodyEventMiddleware"),n("span",{class:"token punctuation"},","),s(" FilesEventMiddleware")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/node-http-adapter'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  defineBlueprintConfig"),n("span",{class:"token punctuation"},","),s(" defineAdapterMiddleware")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" mainBlueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"afterConfigure"),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token function"},"defineAdapterMiddleware"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),s("BodyEventMiddleware"),n("span",{class:"token punctuation"},","),s(" FilesEventMiddleware"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("You "),n("strong",null,"must"),s(" use the "),n("code",null,"afterConfigure()"),s(" hook to register these middlewares, because the adapter is resolved "),n("strong",null,"at runtime"),s(", not statically. That’s part of Stone.js’s continuum flexibility: you can switch adapters dynamically, but it also means you must wait until the adapter is known to bind adapter-specific middleware.")],-1)])),_:1}),e[5]||(e[5]=i(`<h3 id="http-specific-features" tabindex="-1"><a class="header-anchor" href="#http-specific-features"><span>HTTP-Specific Features</span></a></h3><p>You also get access to:</p><ul><li><strong>Fingerprinting</strong>: generate a unique hash for this request</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">fingerprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// uses method + path</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">fingerprint</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>   <span class="token comment">// includes IP + user-agent</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Caching Support</strong>:</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">isFresh</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>  <span class="token comment">// check cache freshness</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">isStale</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>  <span class="token comment">// inverse</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Range Requests</strong>:</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token comment">// parses range header</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>Content Type Detection</strong>:</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token keyword">is</span><span class="token punctuation">(</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// checks against content-type</span></span>
<span class="line"><span class="token class-name">event</span><span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token string">&#39;svg&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// from extension</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token string">&#39;image/png&#39;</span><span class="token punctuation">)</span> <span class="token comment">// from mime type</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cookie-access" tabindex="-1"><a class="header-anchor" href="#cookie-access"><span>Cookie Access</span></a></h3><p>The cookie API is consistent with <code>IncomingBrowserEvent</code>, and follows the <strong>continuum cookie contract</strong>. Stone.js guarantees that the <strong>same cookie access and mutation logic</strong> works identically across both client and server.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">&#39;auth_token&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// Return a Cookie object or default value</span></span>
<span class="line">event<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;auth_token&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Get the cookie value directly</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">hasCookie</span><span class="token punctuation">(</span><span class="token string">&#39;isLoggedIn&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Stone.js provides a dedicated <a href="../cookies">Cookie documentation page</a>, where you’ll find all available methods and usage examples.<br> The cookie API is unified across the continuum, frontend and backend behave the same.</p></div><h3 id="smart-get-lookup-strategy" tabindex="-1"><a class="header-anchor" href="#smart-get-lookup-strategy"><span>Smart <code>get()</code> Lookup Strategy</span></a></h3><p>This is where <code>IncomingHttpEvent</code> shines.</p><p>The <code>get()</code> method checks each of the following in order:</p><ol><li>Route parameters</li><li>Body</li><li>Query string</li><li>Headers</li><li>Cookies</li><li>Metadata</li><li>Fallback value</li></ol><p>This makes it incredibly flexible and consistent. For example:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;userId&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Works whether:</p><ul><li>You passed it as a URL param (<code>/user/:userId</code>)</li><li>In the body of a POST request</li><li>As a query param (<code>?userId=123</code>)</li><li>In a custom header</li><li>Even as a cookie</li><li>Or in the metadata store</li><li>And as a fallback value</li></ul><p>Write your logic once. It works everywhere.</p><h3 id="other-utilities" tabindex="-1"><a class="header-anchor" href="#other-utilities"><span>Other Utilities</span></a></h3><p>Other useful getters to retrieve and inspect HTTP elements:</p><ul><li><code>event.ip</code>: The IP address</li><li><code>event.ips</code>: The IP addresses</li><li><code>event.isSecure</code>: Checks if the request is secure (<code>https</code>)</li><li><code>event.isXhr</code> / <code>event.isAjax</code>: Checks if the request is an <code>XMLHttpRequest</code></li><li><code>event.userAgent</code>: The user agent</li><li><code>event.isPrefetch</code>: Checks if it is a prefetch request</li></ul><h3 id="configuring-incominghttpevent" tabindex="-1"><a class="header-anchor" href="#configuring-incominghttpevent"><span>Configuring <code>IncomingHttpEvent</code></span></a></h3><p>Stone.js allows you to configure how HTTP events are built and filtered before they ever reach your application. These configurations belong to the <strong>integration dimension</strong> and act as <strong>system-level guards</strong>, validating inputs, limiting payloads, and ensuring safe defaults.</p><p>Misconfigured or malicious requests are rejected <strong>before</strong> they become part of the internal context, preventing invalid <code>IncomingHttpEvent</code> instances from reaching your code.</p><h4 id="trusted-proxies" tabindex="-1"><a class="header-anchor" href="#trusted-proxies"><span>Trusted Proxies</span></a></h4><p>When running behind a proxy (e.g., NGINX, Cloudflare, Vercel Edge), information like IP address, hostname, or protocol may be rewritten. To ensure Stone.js can restore the original data, you must specify which proxies you trust.</p><p>Use the following blueprint namespaces:</p><ul><li><code>stone.http.proxies.trustedIp</code>, IP ranges or CIDRs considered trustworthy</li><li><code>stone.http.proxies.untrustedIp</code>, IPs to explicitly deny</li></ul><p>Do not use both simultaneously.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Configuration</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token keyword">implements</span> <span class="token class-name">IConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">configure</span><span class="token punctuation">(</span>blueprint<span class="token operator">:</span> IBlueprint<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    blueprint</span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.http.proxies.trustedIp&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;127.0.0.0/8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;10.0.0.0/8&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.http.proxies.untrustedIp&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;192.168.0.0/16&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use <code>&#39;*&#39;</code> to allow all proxies (or block all, depending on your needs):</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.http.proxies.trustedIp&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="body-configuration" tabindex="-1"><a class="header-anchor" href="#body-configuration"><span>Body Configuration</span></a></h4><p>To limit memory usage and attack vectors, Stone.js lets you define strict limits on request bodies:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.http.body&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  limit<span class="token operator">:</span> <span class="token string">&#39;1mb&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  defaultType<span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  defaultCharset<span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This config ensures the adapter knows how much data to read, how to decode it, and what to assume when no content-type is set.</p><h4 id="file-upload-configuration" tabindex="-1"><a class="header-anchor" href="#file-upload-configuration"><span>File Upload Configuration</span></a></h4><p>Stone.js uses <a href="https://github.com/mscdex/busboy" target="_blank" rel="noopener noreferrer"><code>busboy</code></a> internally to parse multipart/form-data uploads. You can customize <code>busboy</code> options directly via:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.http.files.upload&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  limits<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    fileSize<span class="token operator">:</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 2MB per file</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  highWaterMark<span class="token operator">:</span> <span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See the <a href="https://github.com/mscdex/busboy#busboy-methods" target="_blank" rel="noopener noreferrer">busboy documentation</a> for a full list of available options.</p><p>This allows you to control:</p><ul><li>Maximum file sizes</li><li>Number of files</li><li>Buffer size</li><li>Accepted MIME types (via file extension config, see below)</li></ul><h4 id="other-notable-options" tabindex="-1"><a class="header-anchor" href="#other-notable-options"><span>Other Notable Options</span></a></h4><table><thead><tr><th>Namespace</th><th>Purpose</th></tr></thead><tbody><tr><td><code>stone.http.hosts.trusted</code></td><td>List of valid hostnames</td></tr><tr><td><code>stone.http.hosts.trustedPattern</code></td><td>Regex-like patterns for valid hosts</td></tr><tr><td><code>stone.http.subdomain.offset</code></td><td>Position to parse subdomains from hostname</td></tr></tbody></table><p>In short, HTTP configuration lets you control what enters your system, which payloads, from whom, in what form, and how much of it.</p><p>It’s your <strong>first line of defense</strong>, and a perfect place to enforce consistency and safety across all environments.</p><div class="hint-container important"><p class="hint-container-title">When to use it?</p><p>Stone.js comes with carefully chosen defaults that suit most applications, while still allowing you to customize settings when specific needs arise.</p></div><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>The <code>IncomingEvent</code> and its platform-specific subclasses are at the heart of every Stone.js application. They represent the user’s intention, and everything else in your app is just a reaction.</p><p>Here’s how to use them wisely.</p><h4 id="never-access-incomingevent-in-constructor-injection" tabindex="-1"><a class="header-anchor" href="#never-access-incomingevent-in-constructor-injection"><span>Never Access IncomingEvent in Constructor-Injection</span></a></h4><p>The <code>IncomingEvent</code> does <strong>not</strong> exist during system boot. It is only created during runtime, <strong>after the adapter has received an external cause</strong> and <code>onHandlingEvent</code> hooks have been triggered.</p><p>Trying to access the event in a constructor-injected service will cause hard-to-debug issues:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Stone</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">BadService</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span> event <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> event<span class="token operator">:</span> IncomingEvent <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ❌ This will break, IncomingEvent isn&#39;t available yet</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Instead</strong>: access the event in methods called at runtime, like inside your handler, middleware, or lifecycle hooks.</p><h4 id="prefer-get-over-manual-inspection" tabindex="-1"><a class="header-anchor" href="#prefer-get-over-manual-inspection"><span>Prefer <code>get()</code> Over Manual Inspection</span></a></h4><p>Avoid branching logic like this:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">IncomingHttpEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> event<span class="token punctuation">.</span>body<span class="token punctuation">.</span>user<span class="token operator">?.</span>name</span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;user.name&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Just use the smart <code>get()</code>:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> name <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;user.name&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>It handles the lookup strategy internally and gives you consistent results, even across environments like Lambda, Node, CLI, and browser.</p><h4 id="don-t-overuse-event-source" tabindex="-1"><a class="header-anchor" href="#don-t-overuse-event-source"><span>Don’t Overuse <code>event.source</code></span></a></h4><p>While <code>source.rawEvent</code> and <code>source.platform</code> are useful for introspection and debugging, avoid hard-coding platform-specific behavior in your logic:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>source<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">&#39;aws_lambda&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ❌ This defeats the platform-agnostic design</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you need data from <code>rawEvent</code>, extract it with a middleware and inject it into <code>metadata</code> instead. That way your handlers remain clean and reusable.</p><h4 id="use-middleware-to-enrich-not-mutate" tabindex="-1"><a class="header-anchor" href="#use-middleware-to-enrich-not-mutate"><span>Use Middleware to Enrich, Not Mutate</span></a></h4><p>If you want to add useful information to the event (like a user object, request ID, permissions), do it via <code>set()</code> in a middleware:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;user.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Don’t attempt to change properties like <code>url</code>, <code>method</code>, or <code>body</code>, treat the core of the event as <strong>immutable</strong>.</p><h4 id="install-only-the-middleware-you-need" tabindex="-1"><a class="header-anchor" href="#install-only-the-middleware-you-need"><span>Install Only the Middleware You Need</span></a></h4><p>By default, Stone.js does not include body parsers or file handlers to keep your app lean. Only register <code>BodyEventMiddleware</code> and <code>FilesEventMiddleware</code> when needed:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">defineAdapterMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">[</span>BodyEventMiddleware<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is especially useful for API-first microservices or endpoints that don’t receive body content.</p><h4 id="use-event-subclasses-for-rich-capabilities" tabindex="-1"><a class="header-anchor" href="#use-event-subclasses-for-rich-capabilities"><span>Use Event Subclasses for Rich Capabilities</span></a></h4><p>Don&#39;t stick to <code>IncomingEvent</code> just because it’s generic. If your context is HTTP, use <code>IncomingHttpEvent</code>, it gives you content negotiation, headers, method checks, body helpers, and more.</p><p>If you’re in a browser, <code>IncomingBrowserEvent</code> gives you SPA navigation support, cookie helpers, and segment parsing.</p><p>Stone.js will inject the correct subclass for you, just type your handler’s parameter accordingly:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> IncomingHttpEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Full HTTP capabilities available here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>The <code>IncomingEvent</code> system in Stone.js is the central interface through which your application receives and interprets intentions from the outside world, whether from HTTP requests, browser navigations, CLI commands, or serverless platforms.</p><p>Here’s what you should remember:</p><h4 id="everything-starts-with-the-intention" tabindex="-1"><a class="header-anchor" href="#everything-starts-with-the-intention"><span>Everything Starts with the Intention</span></a></h4><ul><li>An <strong>IncomingEvent is not a controller or handler</strong>, it’s the normalized <strong>intention</strong> sent to your domain.</li><li>It’s created by the adapter at runtime, <strong>not by you</strong>, and only after the platform has triggered the app’s lifecycle.</li><li>You never mutate it, you interact with it through safe APIs (<code>get</code>, <code>set</code>, <code>clone</code>).</li><li>You can participate in its creation using adapter middleware.</li></ul><h4 id="three-forms-one-continuum" tabindex="-1"><a class="header-anchor" href="#three-forms-one-continuum"><span>Three Forms, One Continuum</span></a></h4><ul><li><code>IncomingEvent</code>: Generic, metadata-based, used for CLI, Lambda, lightweight adapters.</li><li><code>IncomingBrowserEvent</code>: Used for SPA and SSR navigation in the browser. Triggered by navigation events only.</li><li><code>IncomingHttpEvent</code>: The richest event type. Supports methods, headers, bodies, cookies, file uploads, and more.</li></ul><p>Each one builds upon the last, features accumulate from base to top. No duplicated logic. No surprises.</p><h4 id="one-unified-api" tabindex="-1"><a class="header-anchor" href="#one-unified-api"><span>One Unified API</span></a></h4><ul><li>All incoming events use the same core API: <ul><li><code>get()</code>, <code>set()</code>, <code>clone()</code></li><li>Dot notation support</li><li>Platform-aware data resolution</li></ul></li><li>Write your handler logic once, it works on Node, Lambda, CLI, and local dev without changes.</li></ul><h4 id="platform-features-are-opt-in" tabindex="-1"><a class="header-anchor" href="#platform-features-are-opt-in"><span>Platform Features Are Opt-In</span></a></h4><ul><li>Want to handle request bodies? Add <code>BodyEventMiddleware</code>.</li><li>Need to parse uploaded files? Add <code>FilesEventMiddleware</code>.</li><li>Want to limit request size, restrict IPs, or enforce content types? Use the configuration blueprint.</li><li><strong>Nothing is included by default</strong>, you opt-in to what your app needs.</li></ul><h4 id="think-dimensionally" tabindex="-1"><a class="header-anchor" href="#think-dimensionally"><span>Think Dimensionally</span></a></h4><ul><li>The adapter belongs to the <strong>integration dimension</strong>, it translates external chaos into internal order.</li><li>The <code>IncomingEvent</code> lives in the <strong>initialization dimension</strong>, it’s now ready for business logic, services, and response generation.</li><li>Middleware is the bridge, the place to enrich or sanitize the event before it reaches your handlers.</li></ul><p>With <code>IncomingEvent</code>, you don’t just handle requests.<br> You handle <strong>intentions</strong>, consistently, across space (platforms) and time (contexts).</p><p>Welcome to the Continuum 😎</p>`,99))])}const f=c(h,[["render",v]]),y=JSON.parse('{"path":"/docs/essentials/incoming-event.html","title":"Incoming Events","lang":"en-US","frontmatter":{"title":"Incoming Events","description":"In Stone.js, the IncomingEvent is the heart of your application. It represents the intention that your system must respond to. This intention doesn’t come out of nowhere, it’s b...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Incoming Events\\",\\"image\\":[\\"https://stonejs.com/assets/image/url_components.png\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/docs/essentials/incoming-event.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Incoming Events"}],["meta",{"property":"og:description","content":"In Stone.js, the IncomingEvent is the heart of your application. It represents the intention that your system must respond to. This intention doesn’t come out of nowhere, it’s b..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://stonejs.com/assets/image/url_components.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":15.11,"words":4532},"filePathRelative":"docs/essentials/incoming-event.md","autoDesc":true}');export{f as comp,y as data};
