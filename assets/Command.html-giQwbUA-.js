import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as e,b as r,e as o,w as s,d as n,r as p,o as m}from"./app-7vCtLRjQ.js";const c={};function l(u,a){const t=p("RouteLink");return m(),i("div",null,[e("p",null,[o(t,{to:"/api/node-cli-adapter/"},{default:s(()=>a[0]||(a[0]=[e("strong",null,"Node CLI Adapter Documentation v0.0.0",-1)])),_:1,__:[0]})]),a[10]||(a[10]=e("hr",null,null,-1)),e("p",null,[o(t,{to:"/api/node-cli-adapter/modules.html"},{default:s(()=>a[1]||(a[1]=[n("Node CLI Adapter Documentation")])),_:1,__:[1]}),a[3]||(a[3]=n(" / ")),o(t,{to:"/api/node-cli-adapter/decorators/Command/"},{default:s(()=>a[2]||(a[2]=[n("decorators/Command")])),_:1,__:[2]}),a[4]||(a[4]=n(" / Command"))]),a[11]||(a[11]=r('<h1 id="function-command" tabindex="-1"><a class="header-anchor" href="#function-command"><span>Function: Command()</span></a></h1><blockquote><p><strong>Command</strong>&lt;<code>T</code>&gt;(<code>options</code>): (<code>target</code>, <code>context</code>) =&gt; <code>void</code></p></blockquote><p>Command decorator to mark a class as a command and automatically bind it to the container.</p><p>This decorator is useful for marking classes that should be treated as commands by the Stone.js framework, making them easily injectable and manageable by the command container.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><p>â€¢ <strong>T</strong> <em>extends</em> <code>ClassType</code> = <code>ClassType</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>options</span></a></h3>',8)),e("p",null,[a[6]||(a[6]=e("code",null,"Partial",-1)),a[7]||(a[7]=n("<")),o(t,{to:"/api/node-cli-adapter/decorators/Command/interfaces/CommandOptions.html"},{default:s(()=>a[5]||(a[5]=[e("code",null,"CommandOptions",-1)])),_:1,__:[5]}),a[8]||(a[8]=n("> = ")),a[9]||(a[9]=e("code",null,"{}",-1))]),a[12]||(a[12]=r(`<p>The configuration options for the command, including singleton and alias settings.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>Function</code></p><p>A decorator function to set metadata on the target class.</p><h3 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h3><h4 id="target" tabindex="-1"><a class="header-anchor" href="#target"><span>target</span></a></h4><p><code>T</code></p><h4 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>context</span></a></h4><p><code>ClassDecoratorContext</code>&lt;<code>T</code>&gt;</p><h3 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h3><p><code>void</code></p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Command</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> alias<span class="token operator">:</span> <span class="token string">&#39;MyCommand&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyCommand</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Command class logic here.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in"><span>Defined in</span></a></h2><p><a href="https://github.com/stonemjs/node-cli-adapter/blob/30743f7aaaae46db17826e810be4549d56406b6f/src/decorators/Command.ts#L58" target="_blank" rel="noopener noreferrer">src/decorators/Command.ts:58</a></p>`,15))])}const g=d(c,[["render",l]]),C=JSON.parse('{"path":"/api/node-cli-adapter/decorators/Command/functions/Command.html","title":"Function: Command()","lang":"en-US","frontmatter":{"description":"/ / Command Function: Command() Command<T>(options): (target, context) => void Command decorator to mark a class as a command and automatically bind it to the container. This de...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function: Command()\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/api/node-cli-adapter/decorators/Command/functions/Command.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Function: Command()"}],["meta",{"property":"og:description","content":"/ / Command Function: Command() Command<T>(options): (target, context) => void Command decorator to mark a class as a command and automatically bind it to the container. This de..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":0.43,"words":130},"filePathRelative":"api/node-cli-adapter/decorators/Command/functions/Command.md","autoDesc":true}');export{g as comp,C as data};
