import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a,b as p,e as t,w as o,d as s,r as i,o as u}from"./app-B3SZc_3K.js";const d={};function c(g,n){const e=i("RouteLink");return u(),l("div",null,[a("p",null,[t(e,{to:"/api/core/"},{default:o(()=>n[0]||(n[0]=[a("strong",null,"Core Documentation",-1)])),_:1,__:[0]})]),n[35]||(n[35]=a("hr",null,null,-1)),a("p",null,[t(e,{to:"/api/core/"},{default:o(()=>n[1]||(n[1]=[s("Core Documentation")])),_:1,__:[1]}),n[3]||(n[3]=s(" / ")),t(e,{to:"/api/core/blueprint/KernelUtils/"},{default:o(()=>n[2]||(n[2]=[s("blueprint/KernelUtils")])),_:1,__:[2]}),n[4]||(n[4]=s(" / defineLogger"))]),n[36]||(n[36]=p(`<h1 id="function-definelogger" tabindex="-1"><a class="header-anchor" href="#function-definelogger"><span>Function: defineLogger()</span></a></h1><p>Registers a logger (class-based or factory-based) into the Stone blueprint.</p><h2 id="param" tabindex="-1"><a class="header-anchor" href="#param"><span>Param</span></a></h2><p>Either a logger class or factory function.</p><h2 id="param-1" tabindex="-1"><a class="header-anchor" href="#param-1"><span>Param</span></a></h2><p>Optional configuration, including log level and isFactory flag.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span>MyLogger<span class="token punctuation">,</span> <span class="token punctuation">{</span> level<span class="token operator">:</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">,</span> isClass<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">MyLogger</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> level<span class="token operator">:</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span> isFactory<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="call-signature" tabindex="-1"><a class="header-anchor" href="#call-signature"><span>Call Signature</span></a></h2>`,9)),a("blockquote",null,[a("p",null,[n[6]||(n[6]=a("strong",null,"defineLogger",-1)),n[7]||(n[7]=s("(")),n[8]||(n[8]=a("code",null,"module",-1)),n[9]||(n[9]=s(", ")),n[10]||(n[10]=a("code",null,"options",-1)),n[11]||(n[11]=s("): ")),n[12]||(n[12]=a("code",null,"Partial",-1)),n[13]||(n[13]=s("<")),t(e,{to:"/api/core/options/StoneBlueprint/interfaces/StoneBlueprint.html"},{default:o(()=>n[5]||(n[5]=[a("code",null,"StoneBlueprint",-1)])),_:1,__:[5]}),n[14]||(n[14]=s(">"))])]),n[37]||(n[37]=p('<p>Defined in: <a href="https://github.com/stonemjs/core/blob/65c9e07f9d264b07f6e4091fcc29046b5ca8ea45/src/blueprint/KernelUtils.ts#L546" target="_blank" rel="noopener noreferrer">blueprint/KernelUtils.ts:546</a></p><p>Registers a <strong>class-based logger</strong> into the Stone blueprint.</p><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h3><h4 id="module" tabindex="-1"><a class="header-anchor" href="#module"><span>module</span></a></h4>',4)),a("p",null,[t(e,{to:"/api/core/declarations/type-aliases/ILoggerClass.html"},{default:o(()=>n[15]||(n[15]=[a("code",null,"ILoggerClass",-1)])),_:1,__:[15]})]),n[38]||(n[38]=p('<p>The logger class that implements <code>ILogger</code>.</p><h4 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>options</span></a></h4><p><code>object</code> &amp; <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p><p>Optional configuration (must include <code>isClass: true</code> if specified).</p><h3 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h3>',5)),a("p",null,[n[17]||(n[17]=a("code",null,"Partial",-1)),n[18]||(n[18]=s("<")),t(e,{to:"/api/core/options/StoneBlueprint/interfaces/StoneBlueprint.html"},{default:o(()=>n[16]||(n[16]=[a("code",null,"StoneBlueprint",-1)])),_:1,__:[16]}),n[19]||(n[19]=s(">"))]),n[39]||(n[39]=p(`<p>A partial StoneBlueprint with the logger resolver and settings.</p><h3 id="param-2" tabindex="-1"><a class="header-anchor" href="#param-2"><span>Param</span></a></h3><p>Either a logger class or factory function.</p><h3 id="param-3" tabindex="-1"><a class="header-anchor" href="#param-3"><span>Param</span></a></h3><p>Optional configuration, including log level and isFactory flag.</p><h3 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span>MyLogger<span class="token punctuation">,</span> <span class="token punctuation">{</span> level<span class="token operator">:</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">,</span> isClass<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">MyLogger</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> level<span class="token operator">:</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span> isFactory<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="call-signature-1" tabindex="-1"><a class="header-anchor" href="#call-signature-1"><span>Call Signature</span></a></h2>`,8)),a("blockquote",null,[a("p",null,[n[21]||(n[21]=a("strong",null,"defineLogger",-1)),n[22]||(n[22]=s("(")),n[23]||(n[23]=a("code",null,"module",-1)),n[24]||(n[24]=s(", ")),n[25]||(n[25]=a("code",null,"options",-1)),n[26]||(n[26]=s("): ")),n[27]||(n[27]=a("code",null,"Partial",-1)),n[28]||(n[28]=s("<")),t(e,{to:"/api/core/options/StoneBlueprint/interfaces/StoneBlueprint.html"},{default:o(()=>n[20]||(n[20]=[a("code",null,"StoneBlueprint",-1)])),_:1,__:[20]}),n[29]||(n[29]=s(">"))])]),n[40]||(n[40]=p('<p>Defined in: <a href="https://github.com/stonemjs/core/blob/65c9e07f9d264b07f6e4091fcc29046b5ca8ea45/src/blueprint/KernelUtils.ts#L558" target="_blank" rel="noopener noreferrer">blueprint/KernelUtils.ts:558</a></p><p>Registers a <strong>factory-based logger</strong> into the Stone blueprint.</p><h3 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h3><h4 id="module-1" tabindex="-1"><a class="header-anchor" href="#module-1"><span>module</span></a></h4>',4)),a("p",null,[t(e,{to:"/api/core/declarations/type-aliases/FactoryLogger.html"},{default:o(()=>n[30]||(n[30]=[a("code",null,"FactoryLogger",-1)])),_:1,__:[30]})]),n[41]||(n[41]=p('<p>The logger factory function.</p><h4 id="options-1" tabindex="-1"><a class="header-anchor" href="#options-1"><span>options</span></a></h4><p><code>object</code> &amp; <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p><p>Optional configuration (must include <code>isFactory: true</code> if specified).</p><h3 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h3>',5)),a("p",null,[n[32]||(n[32]=a("code",null,"Partial",-1)),n[33]||(n[33]=s("<")),t(e,{to:"/api/core/options/StoneBlueprint/interfaces/StoneBlueprint.html"},{default:o(()=>n[31]||(n[31]=[a("code",null,"StoneBlueprint",-1)])),_:1,__:[31]}),n[34]||(n[34]=s(">"))]),n[42]||(n[42]=p(`<p>A partial StoneBlueprint with the logger resolver and settings.</p><h3 id="param-4" tabindex="-1"><a class="header-anchor" href="#param-4"><span>Param</span></a></h3><p>Either a logger class or factory function.</p><h3 id="param-5" tabindex="-1"><a class="header-anchor" href="#param-5"><span>Param</span></a></h3><p>Optional configuration, including log level and isFactory flag.</p><h3 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2"><span>Example</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span>MyLogger<span class="token punctuation">,</span> <span class="token punctuation">{</span> level<span class="token operator">:</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">,</span> isClass<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">MyLogger</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> level<span class="token operator">:</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span> isFactory<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,7))])}const k=r(d,[["render",c]]),b=JSON.parse('{"path":"/api/core/blueprint/KernelUtils/functions/defineLogger.html","title":"Function: defineLogger()","lang":"en-US","frontmatter":{"description":"/ / defineLogger Function: defineLogger() Registers a logger (class-based or factory-based) into the Stone blueprint. Param Either a logger class or factory function. Param Opti...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function: defineLogger()\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/api/core/blueprint/KernelUtils/functions/defineLogger.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Function: defineLogger()"}],["meta",{"property":"og:description","content":"/ / defineLogger Function: defineLogger() Registers a logger (class-based or factory-based) into the Stone blueprint. Param Either a logger class or factory function. Param Opti..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":0.83,"words":250},"filePathRelative":"api/core/blueprint/KernelUtils/functions/defineLogger.md","autoDesc":true}');export{k as comp,b as data};
