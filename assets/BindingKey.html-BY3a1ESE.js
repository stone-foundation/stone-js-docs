import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as a,o as t}from"./app-BJyWHIWB.js";const o={};function i(p,n){return t(),s("div",null,n[0]||(n[0]=[a(`<h1 id="type-alias-bindingkey" tabindex="-1"><a class="header-anchor" href="#type-alias-bindingkey"><span>Type Alias: BindingKey</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">BindingKey</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">Function</span> <span class="token operator">|</span> object <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>A union type representing the possible keys that can be used to bind values in the container.</p><p>Binding keys can be of various types, such as numbers, booleans, strings, functions, objects, or symbols. These types are used because they provide a broad range of ways to uniquely identify a binding.</p><ul><li><code>number</code>, <code>boolean</code>, <code>string</code>: These are basic types that are easy to use and uniquely identify a binding.</li><li><code>Function</code>: Useful for identifying bindings by constructor or other functions.</li><li><code>object</code>: Allows more complex key types, like instances of classes.</li><li><code>symbol</code>: Guarantees a unique identifier, which can prevent conflicts.</li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> key1<span class="token operator">:</span> BindingKey <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// Using a number as a key</span></span>
<span class="line"><span class="token keyword">const</span> key2<span class="token operator">:</span> BindingKey <span class="token operator">=</span> <span class="token string">&#39;serviceName&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Using a string as a key</span></span>
<span class="line"><span class="token keyword">const</span> key3<span class="token operator">:</span> BindingKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;uniqueKey&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Using a symbol for uniqueness</span></span>
<span class="line"><span class="token keyword">const</span> key4<span class="token operator">:</span> BindingKey <span class="token operator">=</span> MyServiceClass<span class="token punctuation">;</span> <span class="token comment">// Using a function (constructor) as a key</span></span>
<span class="line"><span class="token keyword">const</span> key5<span class="token operator">:</span> BindingKey <span class="token operator">=</span> <span class="token punctuation">{</span> custom<span class="token operator">:</span> <span class="token string">&#39;objectKey&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Using an object as a key</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const l=e(o,[["render",i]]),d=JSON.parse('{"path":"/api/service-container/declarations/type-aliases/BindingKey.html","title":"Type Alias: BindingKey","lang":"en-US","frontmatter":{"description":"Type Alias: BindingKey A union type representing the possible keys that can be used to bind values in the container. Binding keys can be of various types, such as numbers, boole...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type Alias: BindingKey\\",\\"image\\":[\\"/logo_square.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/service-container/declarations/type-aliases/BindingKey.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Type Alias: BindingKey"}],["meta",{"property":"og:description","content":"Type Alias: BindingKey A union type representing the possible keys that can be used to bind values in the container. Binding keys can be of various types, such as numbers, boole..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo_square.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.56,"words":167},"filePathRelative":"api/service-container/declarations/type-aliases/BindingKey.md","autoDesc":true}');export{l as comp,d as data};
