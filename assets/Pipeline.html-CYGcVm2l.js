import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as r,a as n,e as t,d as s,w as p,r as l,o as d}from"./app-BJyWHIWB.js";const u={};function c(h,e){const a=l("RouteLink");return d(),o("div",null,[e[65]||(e[65]=r(`<h1 id="class-pipeline-t-r-args" tabindex="-1"><a class="header-anchor" href="#class-pipeline-t-r-args"><span>Class: Pipeline&lt;T, R, Args&gt;</span></a></h1><p>Class representing a Pipeline.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> = <code>unknown</code></p><p>The type of the passable object in the pipeline.</p><h3 id="r" tabindex="-1"><a class="header-anchor" href="#r"><span>R</span></a></h3><p><code>R</code> = <code>T</code></p><p>The type of the return value from the pipeline execution.</p><p>This class is responsible for managing and executing a series of operations on a set of passable values through multiple configurable pipes.</p><h3 id="args" tabindex="-1"><a class="header-anchor" href="#args"><span>Args</span></a></h3><p><code>Args</code> <em>extends</em> <code>any</code>[] = <code>any</code>[]</p><h2 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">protected</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">,</span> Args<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Pipeline<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">,</span> Args<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Initialize a new Pipeline instance.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><h5 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>options?</span></a></h5>`,18)),n("p",null,[t(a,{to:"/api/pipeline/declarations/interfaces/PipelineOptions.html"},{default:p(()=>e[0]||(e[0]=[n("code",null,"PipelineOptions",-1)])),_:1,__:[0]}),e[1]||(e[1]=s("<")),e[2]||(e[2]=n("code",null,"T",-1)),e[3]||(e[3]=s(", ")),e[4]||(e[4]=n("code",null,"R",-1)),e[5]||(e[5]=s(", ")),e[6]||(e[6]=n("code",null,"Args",-1)),e[7]||(e[7]=s(">"))]),e[66]||(e[66]=r(`<p>Optional Pipeline options.</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>Pipeline</code>&lt;<code>T</code>, <code>R</code>, <code>Args</code>&gt;</p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h2><h3 id="defaultpriority" tabindex="-1"><a class="header-anchor" href="#defaultpriority"><span>defaultPriority()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">defaultPriority</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Set the default priority for pipes in the pipeline.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><h5 id="value" tabindex="-1"><a class="header-anchor" href="#value"><span>value</span></a></h5><p><code>number</code></p><p>The priority value to set.</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>this</code></p><p>The current Pipeline instance.</p><hr><h3 id="on" tabindex="-1"><a class="header-anchor" href="#on"><span>on()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">on</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Add a hook to the pipeline.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h4><h5 id="name" tabindex="-1"><a class="header-anchor" href="#name"><span>name</span></a></h5>`,20)),n("p",null,[t(a,{to:"/api/pipeline/declarations/type-aliases/HookName.html"},{default:p(()=>e[8]||(e[8]=[n("code",null,"HookName",-1)])),_:1,__:[8]})]),e[67]||(e[67]=n("p",null,"The name of the hook.",-1)),e[68]||(e[68]=n("h5",{id:"listener",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#listener"},[n("span",null,"listener")])],-1)),e[69]||(e[69]=n("p",null,"The hook listener function.",-1)),n("p",null,[t(a,{to:"/api/pipeline/declarations/type-aliases/PipelineHookListener.html"},{default:p(()=>e[9]||(e[9]=[n("code",null,"PipelineHookListener",-1)])),_:1,__:[9]}),e[11]||(e[11]=s("<")),e[12]||(e[12]=n("code",null,"T",-1)),e[13]||(e[13]=s(", ")),e[14]||(e[14]=n("code",null,"R",-1)),e[15]||(e[15]=s(", ")),e[16]||(e[16]=n("code",null,"Args",-1)),e[17]||(e[17]=s("> | ")),t(a,{to:"/api/pipeline/declarations/type-aliases/PipelineHookListener.html"},{default:p(()=>e[10]||(e[10]=[n("code",null,"PipelineHookListener",-1)])),_:1,__:[10]}),e[18]||(e[18]=s("<")),e[19]||(e[19]=n("code",null,"T",-1)),e[20]||(e[20]=s(", ")),e[21]||(e[21]=n("code",null,"R",-1)),e[22]||(e[22]=s(", ")),e[23]||(e[23]=n("code",null,"Args",-1)),e[24]||(e[24]=s(">[]"))]),e[70]||(e[70]=r(`<h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2"><span>Returns</span></a></h4><p><code>this</code></p><p>The current Pipeline instance.</p><hr><h3 id="pipe" tabindex="-1"><a class="header-anchor" href="#pipe"><span>pipe()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token operator">...</span>pipe<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Add additional pipes to the pipeline.</p><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3"><span>Parameters</span></a></h4><h5 id="pipe-1" tabindex="-1"><a class="header-anchor" href="#pipe-1"><span>pipe</span></a></h5>`,9)),n("p",null,[e[26]||(e[26]=s("...")),t(a,{to:"/api/pipeline/declarations/type-aliases/MixedPipe.html"},{default:p(()=>e[25]||(e[25]=[n("code",null,"MixedPipe",-1)])),_:1,__:[25]}),e[27]||(e[27]=s("<")),e[28]||(e[28]=n("code",null,"T",-1)),e[29]||(e[29]=s(", ")),e[30]||(e[30]=n("code",null,"R",-1)),e[31]||(e[31]=s(", ")),e[32]||(e[32]=n("code",null,"Args",-1)),e[33]||(e[33]=s(">[]"))]),e[71]||(e[71]=r(`<p>A single pipe or a list of pipes to add.</p><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3"><span>Returns</span></a></h4><p><code>this</code></p><p>The current Pipeline instance.</p><hr><h3 id="send" tabindex="-1"><a class="header-anchor" href="#send"><span>send()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">send</span><span class="token punctuation">(</span>passable<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Set the passable objects being sent through the pipeline.</p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4"><span>Parameters</span></a></h4><h5 id="passable" tabindex="-1"><a class="header-anchor" href="#passable"><span>passable</span></a></h5><p><code>T</code></p><p>The object to pass through the pipeline.</p><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4"><span>Returns</span></a></h4><p><code>this</code></p><p>The current Pipeline instance.</p><hr><h3 id="sync" tabindex="-1"><a class="header-anchor" href="#sync"><span>sync()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">sync</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Configure the pipeline to run synchronously or asynchronously.</p><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5"><span>Parameters</span></a></h4><h5 id="value-1" tabindex="-1"><a class="header-anchor" href="#value-1"><span>value</span></a></h5><p><code>boolean</code> = <code>true</code></p><p>Set true for sync, false for async (default is true).</p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5"><span>Returns</span></a></h4><p><code>this</code></p><p>The current Pipeline instance.</p><hr><h3 id="then" tabindex="-1"><a class="header-anchor" href="#then"><span>then()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">then</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token operator">:</span> Promiseable<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Run the pipeline with a final destination callback.</p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6"><span>Parameters</span></a></h4><h5 id="destination" tabindex="-1"><a class="header-anchor" href="#destination"><span>destination</span></a></h5>`,32)),n("p",null,[t(a,{to:"/api/pipeline/declarations/type-aliases/PipeExecutor.html"},{default:p(()=>e[34]||(e[34]=[n("code",null,"PipeExecutor",-1)])),_:1,__:[34]}),e[35]||(e[35]=s("<")),e[36]||(e[36]=n("code",null,"T",-1)),e[37]||(e[37]=s(", ")),e[38]||(e[38]=n("code",null,"R",-1)),e[39]||(e[39]=s(">"))]),e[72]||(e[72]=n("p",null,"The final function to execute.",-1)),e[73]||(e[73]=n("h4",{id:"returns-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#returns-6"},[n("span",null,"Returns")])],-1)),n("p",null,[t(a,{to:"/api/pipeline/declarations/type-aliases/Promiseable.html"},{default:p(()=>e[40]||(e[40]=[n("code",null,"Promiseable",-1)])),_:1,__:[40]}),e[41]||(e[41]=s("<")),e[42]||(e[42]=n("code",null,"R",-1)),e[43]||(e[43]=s(">"))]),e[74]||(e[74]=r(`<p>The result of the pipeline, either synchronously or as a Promise.</p><hr><h3 id="thenreturn" tabindex="-1"><a class="header-anchor" href="#thenreturn"><span>thenReturn()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promiseable<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Run the pipeline and return the result.</p><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7"><span>Returns</span></a></h4>`,6)),n("p",null,[t(a,{to:"/api/pipeline/declarations/type-aliases/Promiseable.html"},{default:p(()=>e[44]||(e[44]=[n("code",null,"Promiseable",-1)])),_:1,__:[44]}),e[45]||(e[45]=s("<")),e[46]||(e[46]=n("code",null,"R",-1)),e[47]||(e[47]=s(">"))]),e[75]||(e[75]=r(`<p>The result of the pipeline, either synchronously or as a Promise.</p><hr><h3 id="through" tabindex="-1"><a class="header-anchor" href="#through"><span>through()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">through</span><span class="token punctuation">(</span><span class="token operator">...</span>pipes<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Set the pipes for the pipeline.</p><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7"><span>Parameters</span></a></h4><h5 id="pipes" tabindex="-1"><a class="header-anchor" href="#pipes"><span>pipes</span></a></h5>`,7)),n("p",null,[e[49]||(e[49]=s("...")),t(a,{to:"/api/pipeline/declarations/type-aliases/MixedPipe.html"},{default:p(()=>e[48]||(e[48]=[n("code",null,"MixedPipe",-1)])),_:1,__:[48]}),e[50]||(e[50]=s("<")),e[51]||(e[51]=n("code",null,"T",-1)),e[52]||(e[52]=s(", ")),e[53]||(e[53]=n("code",null,"R",-1)),e[54]||(e[54]=s(", ")),e[55]||(e[55]=n("code",null,"Args",-1)),e[56]||(e[56]=s(">[]"))]),e[76]||(e[76]=r(`<p>The pipes or MetaPipe instances.</p><h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8"><span>Returns</span></a></h4><p><code>this</code></p><p>The current Pipeline instance.</p><hr><h3 id="via" tabindex="-1"><a class="header-anchor" href="#via"><span>via()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">via</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Set the method to call on each pipe.</p><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8"><span>Parameters</span></a></h4><h5 id="method" tabindex="-1"><a class="header-anchor" href="#method"><span>method</span></a></h5><p><code>string</code></p><p>The method name to use on each pipe.</p><h4 id="returns-9" tabindex="-1"><a class="header-anchor" href="#returns-9"><span>Returns</span></a></h4><p><code>this</code></p><p>The current Pipeline instance.</p><hr><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create"><span>create()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">static</span> <span class="token generic-function"><span class="token function">create</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">,</span> Args<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Pipeline<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Create a pipeline instance.</p><h4 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1"><span>Type Parameters</span></a></h4><h5 id="t-1" tabindex="-1"><a class="header-anchor" href="#t-1"><span>T</span></a></h5><p><code>T</code> = <code>unknown</code></p><h5 id="r-1" tabindex="-1"><a class="header-anchor" href="#r-1"><span>R</span></a></h5><p><code>R</code> = <code>T</code></p><h5 id="args-1" tabindex="-1"><a class="header-anchor" href="#args-1"><span>Args</span></a></h5><p><code>Args</code> <em>extends</em> <code>any</code>[] = <code>any</code>[]</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9"><span>Parameters</span></a></h4><h5 id="options-1" tabindex="-1"><a class="header-anchor" href="#options-1"><span>options?</span></a></h5>`,28)),n("p",null,[t(a,{to:"/api/pipeline/declarations/interfaces/PipelineOptions.html"},{default:p(()=>e[57]||(e[57]=[n("code",null,"PipelineOptions",-1)])),_:1,__:[57]}),e[58]||(e[58]=s("<")),e[59]||(e[59]=n("code",null,"T",-1)),e[60]||(e[60]=s(", ")),e[61]||(e[61]=n("code",null,"R",-1)),e[62]||(e[62]=s(", ")),e[63]||(e[63]=n("code",null,"Args",-1)),e[64]||(e[64]=s(">"))]),e[77]||(e[77]=n("p",null,"Optional Pipeline options.",-1)),e[78]||(e[78]=n("h4",{id:"returns-10",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#returns-10"},[n("span",null,"Returns")])],-1)),e[79]||(e[79]=n("p",null,[n("code",null,"Pipeline"),s("<"),n("code",null,"T"),s(", "),n("code",null,"R"),s(">")],-1)),e[80]||(e[80]=n("p",null,"The pipeline instance.",-1))])}const k=i(u,[["render",c]]),b=JSON.parse('{"path":"/api/pipeline/Pipeline/classes/Pipeline.html","title":"Class: Pipeline<T, R, Args>","lang":"en-US","frontmatter":{"description":"Class: Pipeline<T, R, Args> Class representing a Pipeline. Type Parameters T T = unknown The type of the passable object in the pipeline. R R = T The type of the return value fr...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Class: Pipeline<T, R, Args>\\",\\"image\\":[\\"/logo_square.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/pipeline/Pipeline/classes/Pipeline.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Class: Pipeline<T, R, Args>"}],["meta",{"property":"og:description","content":"Class: Pipeline<T, R, Args> Class representing a Pipeline. Type Parameters T T = unknown The type of the passable object in the pipeline. R R = T The type of the return value fr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo_square.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":1.49,"words":447},"filePathRelative":"api/pipeline/Pipeline/classes/Pipeline.md","autoDesc":true}');export{k as comp,b as data};
