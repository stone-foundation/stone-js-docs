import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as o,a,e as r,d as n,w as s,r as l,o as i}from"./app-CrbMk51G.js";const u={};function c(m,e){const t=l("RouteLink");return i(),d("div",null,[e[45]||(e[45]=o(`<h1 id="function-defineadaptererrorhandler" tabindex="-1"><a class="header-anchor" href="#function-defineadaptererrorhandler"><span>Function: defineAdapterErrorHandler()</span></a></h1><p>Registers an adapter error handler in the blueprint with appropriate metadata.</p><p>This function creates and injects a middleware into the blueprint that registers an error handler for a specific adapter based on platform or alias.</p><h2 id="param" tabindex="-1"><a class="header-anchor" href="#param"><span>Param</span></a></h2><p>The handler function, factory, or class.</p><h2 id="param-1" tabindex="-1"><a class="header-anchor" href="#param-1"><span>Param</span></a></h2><p>Options including <code>platform</code>, <code>adapterAlias</code>, and <code>error</code> type(s) to handle.</p><h2 id="call-signature" tabindex="-1"><a class="header-anchor" href="#call-signature"><span>Call Signature</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">defineAdapterErrorHandler</span><span class="token generic class-name"><span class="token operator">&lt;</span>RawEventType<span class="token punctuation">,</span> RawResponseType<span class="token punctuation">,</span> ExecutionContextType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>StoneBlueprint<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Defines a function-based adapter error handler.</p><p>This overload is used for plain function handlers that handle specific adapter errors.</p><h3 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h3><h4 id="raweventtype" tabindex="-1"><a class="header-anchor" href="#raweventtype"><span>RawEventType</span></a></h4><p><code>RawEventType</code> = <code>any</code></p><h4 id="rawresponsetype" tabindex="-1"><a class="header-anchor" href="#rawresponsetype"><span>RawResponseType</span></a></h4><p><code>RawResponseType</code> = <code>any</code></p><h4 id="executioncontexttype" tabindex="-1"><a class="header-anchor" href="#executioncontexttype"><span>ExecutionContextType</span></a></h4><p><code>ExecutionContextType</code> = <code>any</code></p><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h3><h4 id="module" tabindex="-1"><a class="header-anchor" href="#module"><span>module</span></a></h4>`,20)),a("p",null,[r(t,{to:"/api/core/declarations/type-aliases/FunctionalAdapterErrorHandler.html"},{default:s(()=>e[0]||(e[0]=[a("code",null,"FunctionalAdapterErrorHandler",-1)])),_:1,__:[0]}),e[1]||(e[1]=n("<")),e[2]||(e[2]=a("code",null,"RawEventType",-1)),e[3]||(e[3]=n(", ")),e[4]||(e[4]=a("code",null,"RawResponseType",-1)),e[5]||(e[5]=n(", ")),e[6]||(e[6]=a("code",null,"ExecutionContextType",-1)),e[7]||(e[7]=n(">"))]),e[46]||(e[46]=a("p",null,"The function to handle the adapter error.",-1)),e[47]||(e[47]=a("h4",{id:"options",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#options"},[a("span",null,"options")])],-1)),a("p",null,[r(t,{to:"/api/core/declarations/interfaces/AdapterErrorHandlerOptions.html"},{default:s(()=>e[8]||(e[8]=[a("code",null,"AdapterErrorHandlerOptions",-1)])),_:1,__:[8]}),e[9]||(e[9]=n(" & ")),e[10]||(e[10]=a("code",null,"object",-1))]),e[48]||(e[48]=a("p",null,"Metadata describing when to apply the handler (e.g. platform, alias, error types).",-1)),e[49]||(e[49]=a("h3",{id:"returns",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#returns"},[a("span",null,"Returns")])],-1)),a("p",null,[e[12]||(e[12]=a("code",null,"Partial",-1)),e[13]||(e[13]=n("<")),r(t,{to:"/api/core/options/StoneBlueprint/interfaces/StoneBlueprint.html"},{default:s(()=>e[11]||(e[11]=[a("code",null,"StoneBlueprint",-1)])),_:1,__:[11]}),e[14]||(e[14]=n(">"))]),e[50]||(e[50]=o(`<p>A Stone.js blueprint fragment that adds the registration middleware.</p><h3 id="param-2" tabindex="-1"><a class="header-anchor" href="#param-2"><span>Param</span></a></h3><p>The handler function, factory, or class.</p><h3 id="param-3" tabindex="-1"><a class="header-anchor" href="#param-3"><span>Param</span></a></h3><p>Options including <code>platform</code>, <code>adapterAlias</code>, and <code>error</code> type(s) to handle.</p><h2 id="call-signature-1" tabindex="-1"><a class="header-anchor" href="#call-signature-1"><span>Call Signature</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">defineAdapterErrorHandler</span><span class="token generic class-name"><span class="token operator">&lt;</span>RawEventType<span class="token punctuation">,</span> RawResponseType<span class="token punctuation">,</span> ExecutionContextType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>StoneBlueprint<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Defines a factory-based adapter error handler.</p><p>This overload allows defining an adapter error handler as a factory function.</p><h3 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1"><span>Type Parameters</span></a></h3><h4 id="raweventtype-1" tabindex="-1"><a class="header-anchor" href="#raweventtype-1"><span>RawEventType</span></a></h4><p><code>RawEventType</code> = <code>any</code></p><h4 id="rawresponsetype-1" tabindex="-1"><a class="header-anchor" href="#rawresponsetype-1"><span>RawResponseType</span></a></h4><p><code>RawResponseType</code> = <code>any</code></p><h4 id="executioncontexttype-1" tabindex="-1"><a class="header-anchor" href="#executioncontexttype-1"><span>ExecutionContextType</span></a></h4><p><code>ExecutionContextType</code> = <code>any</code></p><h3 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h3><h4 id="module-1" tabindex="-1"><a class="header-anchor" href="#module-1"><span>module</span></a></h4>`,18)),a("p",null,[r(t,{to:"/api/core/declarations/type-aliases/FactoryAdapterErrorHandler.html"},{default:s(()=>e[15]||(e[15]=[a("code",null,"FactoryAdapterErrorHandler",-1)])),_:1,__:[15]}),e[16]||(e[16]=n("<")),e[17]||(e[17]=a("code",null,"RawEventType",-1)),e[18]||(e[18]=n(", ")),e[19]||(e[19]=a("code",null,"RawResponseType",-1)),e[20]||(e[20]=n(", ")),e[21]||(e[21]=a("code",null,"ExecutionContextType",-1)),e[22]||(e[22]=n(">"))]),e[51]||(e[51]=a("p",null,"A factory that returns the adapter error handler function.",-1)),e[52]||(e[52]=a("h4",{id:"options-1",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#options-1"},[a("span",null,"options")])],-1)),a("p",null,[r(t,{to:"/api/core/declarations/interfaces/AdapterErrorHandlerOptions.html"},{default:s(()=>e[23]||(e[23]=[a("code",null,"AdapterErrorHandlerOptions",-1)])),_:1,__:[23]}),e[24]||(e[24]=n(" & ")),e[25]||(e[25]=a("code",null,"object",-1))]),e[53]||(e[53]=a("p",null,"Metadata describing when to apply the handler (e.g. platform, alias, error types).",-1)),e[54]||(e[54]=a("h3",{id:"returns-1",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#returns-1"},[a("span",null,"Returns")])],-1)),a("p",null,[e[27]||(e[27]=a("code",null,"Partial",-1)),e[28]||(e[28]=n("<")),r(t,{to:"/api/core/options/StoneBlueprint/interfaces/StoneBlueprint.html"},{default:s(()=>e[26]||(e[26]=[a("code",null,"StoneBlueprint",-1)])),_:1,__:[26]}),e[29]||(e[29]=n(">"))]),e[55]||(e[55]=o(`<p>A Stone.js blueprint fragment that adds the registration middleware.</p><h3 id="param-4" tabindex="-1"><a class="header-anchor" href="#param-4"><span>Param</span></a></h3><p>The handler function, factory, or class.</p><h3 id="param-5" tabindex="-1"><a class="header-anchor" href="#param-5"><span>Param</span></a></h3><p>Options including <code>platform</code>, <code>adapterAlias</code>, and <code>error</code> type(s) to handle.</p><h2 id="call-signature-2" tabindex="-1"><a class="header-anchor" href="#call-signature-2"><span>Call Signature</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">defineAdapterErrorHandler</span><span class="token generic class-name"><span class="token operator">&lt;</span>RawEventType<span class="token punctuation">,</span> RawResponseType<span class="token punctuation">,</span> ExecutionContextType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>StoneBlueprint<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Defines a class-based adapter error handler.</p><p>This overload allows defining an adapter error handler as a class.</p><h3 id="type-parameters-2" tabindex="-1"><a class="header-anchor" href="#type-parameters-2"><span>Type Parameters</span></a></h3><h4 id="raweventtype-2" tabindex="-1"><a class="header-anchor" href="#raweventtype-2"><span>RawEventType</span></a></h4><p><code>RawEventType</code> = <code>any</code></p><h4 id="rawresponsetype-2" tabindex="-1"><a class="header-anchor" href="#rawresponsetype-2"><span>RawResponseType</span></a></h4><p><code>RawResponseType</code> = <code>any</code></p><h4 id="executioncontexttype-2" tabindex="-1"><a class="header-anchor" href="#executioncontexttype-2"><span>ExecutionContextType</span></a></h4><p><code>ExecutionContextType</code> = <code>any</code></p><h3 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h3><h4 id="module-2" tabindex="-1"><a class="header-anchor" href="#module-2"><span>module</span></a></h4>`,18)),a("p",null,[r(t,{to:"/api/core/declarations/type-aliases/IAdapterErrorHandlerClass.html"},{default:s(()=>e[30]||(e[30]=[a("code",null,"IAdapterErrorHandlerClass",-1)])),_:1,__:[30]}),e[31]||(e[31]=n("<")),e[32]||(e[32]=a("code",null,"RawEventType",-1)),e[33]||(e[33]=n(", ")),e[34]||(e[34]=a("code",null,"RawResponseType",-1)),e[35]||(e[35]=n(", ")),e[36]||(e[36]=a("code",null,"ExecutionContextType",-1)),e[37]||(e[37]=n(">"))]),e[56]||(e[56]=a("p",null,"A class that implements the adapter error handler logic.",-1)),e[57]||(e[57]=a("h4",{id:"options-2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#options-2"},[a("span",null,"options")])],-1)),a("p",null,[r(t,{to:"/api/core/declarations/interfaces/AdapterErrorHandlerOptions.html"},{default:s(()=>e[38]||(e[38]=[a("code",null,"AdapterErrorHandlerOptions",-1)])),_:1,__:[38]}),e[39]||(e[39]=n(" & ")),e[40]||(e[40]=a("code",null,"object",-1))]),e[58]||(e[58]=a("p",null,"Metadata describing when to apply the handler (e.g. platform, alias, error types).",-1)),e[59]||(e[59]=a("h3",{id:"returns-2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#returns-2"},[a("span",null,"Returns")])],-1)),a("p",null,[e[42]||(e[42]=a("code",null,"Partial",-1)),e[43]||(e[43]=n("<")),r(t,{to:"/api/core/options/StoneBlueprint/interfaces/StoneBlueprint.html"},{default:s(()=>e[41]||(e[41]=[a("code",null,"StoneBlueprint",-1)])),_:1,__:[41]}),e[44]||(e[44]=n(">"))]),e[60]||(e[60]=o('<p>A Stone.js blueprint fragment that adds the registration middleware.</p><h3 id="param-6" tabindex="-1"><a class="header-anchor" href="#param-6"><span>Param</span></a></h3><p>The handler function, factory, or class.</p><h3 id="param-7" tabindex="-1"><a class="header-anchor" href="#param-7"><span>Param</span></a></h3><p>Options including <code>platform</code>, <code>adapterAlias</code>, and <code>error</code> type(s) to handle.</p>',5))])}const y=p(u,[["render",c]]),x=JSON.parse('{"path":"/api/core/blueprint/AdapterUtils/functions/defineAdapterErrorHandler.html","title":"Function: defineAdapterErrorHandler()","lang":"en-US","frontmatter":{"description":"Function: defineAdapterErrorHandler() Registers an adapter error handler in the blueprint with appropriate metadata. This function creates and injects a middleware into the blue...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function: defineAdapterErrorHandler()\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/api/core/blueprint/AdapterUtils/functions/defineAdapterErrorHandler.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Function: defineAdapterErrorHandler()"}],["meta",{"property":"og:description","content":"Function: defineAdapterErrorHandler() Registers an adapter error handler in the blueprint with appropriate metadata. This function creates and injects a middleware into the blue..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":1.25,"words":374},"filePathRelative":"api/core/blueprint/AdapterUtils/functions/defineAdapterErrorHandler.md","autoDesc":true}');export{y as comp,x as data};
