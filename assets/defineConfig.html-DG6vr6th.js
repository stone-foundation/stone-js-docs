import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as o,a as e,e as s,d as t,w as i,r as l,o as u}from"./app-BJyWHIWB.js";const d={};function c(f,n){const a=l("RouteLink");return u(),r("div",null,[n[13]||(n[13]=o(`<h1 id="function-defineconfig" tabindex="-1"><a class="header-anchor" href="#function-defineconfig"><span>Function: defineConfig()</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token operator">:</span> ConfigurationClass<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Defines an application blueprint by merging user-defined blueprints with default options.</p><p>This function allows users to define their own blueprints and merges them with the default blueprint options provided by the framework. It ensures that all necessary properties are available while allowing user customizations.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>configuration</span></a></h3><p>The user-defined blueprint configuration.</p>`,7)),e("p",null,[s(a,{to:"/api/core/declarations/type-aliases/FunctionalConfiguration.html"},{default:i(()=>n[0]||(n[0]=[e("code",null,"FunctionalConfiguration",-1)])),_:1,__:[0]}),n[2]||(n[2]=t(" | ")),n[3]||(n[3]=e("code",null,"Partial",-1)),n[4]||(n[4]=t("<")),n[5]||(n[5]=e("code",null,"Record",-1)),n[6]||(n[6]=t("<")),n[7]||(n[7]=e("code",null,'"configure"',-1)),n[8]||(n[8]=t(" | ")),n[9]||(n[9]=e("code",null,'"afterConfigure"',-1)),n[10]||(n[10]=t(", ")),s(a,{to:"/api/core/declarations/type-aliases/FunctionalConfiguration.html"},{default:i(()=>n[1]||(n[1]=[e("code",null,"FunctionalConfiguration",-1)])),_:1,__:[1]}),n[11]||(n[11]=t(">>"))]),n[14]||(n[14]=e("h2",{id:"returns",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns"},[e("span",null,"Returns")])],-1)),e("p",null,[s(a,{to:"/api/core/declarations/type-aliases/ConfigurationClass.html"},{default:i(()=>n[12]||(n[12]=[e("code",null,"ConfigurationClass",-1)])),_:1,__:[12]})]),n[15]||(n[15]=o(`<p>The fully defined application blueprint.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> appBlueprint <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span>blueprint<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MyApp&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3))])}const b=p(d,[["render",c]]),h=JSON.parse('{"path":"/api/core/blueprint/BlueprintUtils/functions/defineConfig.html","title":"Function: defineConfig()","lang":"en-US","frontmatter":{"description":"Function: defineConfig() Defines an application blueprint by merging user-defined blueprints with default options. This function allows users to define their own blueprints and ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function: defineConfig()\\",\\"image\\":[\\"/logo_square.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/core/blueprint/BlueprintUtils/functions/defineConfig.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Function: defineConfig()"}],["meta",{"property":"og:description","content":"Function: defineConfig() Defines an application blueprint by merging user-defined blueprints with default options. This function allows users to define their own blueprints and ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo_square.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.29,"words":87},"filePathRelative":"api/core/blueprint/BlueprintUtils/functions/defineConfig.md","autoDesc":true}');export{b as comp,h as data};
