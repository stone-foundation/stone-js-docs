import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as i,e as l,a as n,w as a,d as e,r as p,o as m}from"./app-C80Pz9_H.js";const g={};function k(v,s){const r=p("Mermaid"),c=p("Tabs"),u=p("RouteLink");return m(),h("div",null,[s[20]||(s[20]=i('<p>The <strong>Event handler</strong> is the core execution unit of every Stone.js application.<br> It represents the precise moment when the domain finally meets the context, when your logic responds to a real-world intention.</p><p>In Stone.js, <strong>all external interactions</strong>—HTTP requests, CLI commands, WebSocket messages, MQTT events—are normalized as a single type: the <a href="./incoming-event"><code>IncomingEvent</code></a>.<br> And there&#39;s exactly <strong>one</strong> way to handle an incoming event: the <strong>event handler</strong>.</p><p>Each event handler receives the <a href="./incoming-event"><code>IncomingEvent</code></a> as its only parameter and may return a result, or not.<br> This minimal contract allows Stone.js to remain completely adaptable, from tiny edge-deployed functions to complex applications with routers and dynamic flows.</p><h3 id="the-continuum-perspective" tabindex="-1"><a class="header-anchor" href="#the-continuum-perspective"><span>The Continuum Perspective</span></a></h3><p>In the <strong>Continuum Architecture</strong>, context and domain form a dynamic relationship.<br> Your domain should never assume full control over its context—nor should it ignore it completely. This tension is captured in the <strong>uncertainty principle</strong>:</p><blockquote><p><em>“The domain cannot both fully know its execution context and remain independent from it.”</em></p></blockquote><p>The event handler embodies this principle.<br> It accepts an <a href="./incoming-event"><code>IncomingEvent</code></a>, reacts with domain logic, and produces an outcome—without ever binding itself to the raw source of that event.<br> It doesn’t care whether the event came from HTTP, WebSocket, or a CLI—it just handles <em>intentions</em>, not mechanics.</p><h3 id="where-it-lives" tabindex="-1"><a class="header-anchor" href="#where-it-lives"><span>Where It Lives</span></a></h3><p>The event handler belongs to the <strong>initialization dimension</strong> of Stone.js.<br> It runs after your app is bootstrapped and ready to process a request.<br> Every application <strong>must</strong> define at least one event handler—or it cannot react to incoming events at all.</p>',9)),l(r,{id:"mermaid-29",code:"eJyNjzFrwzAQhXf/ikNBmw0pTRcPhdhuaCFTA12MB8U+x0cvUpGUpo3xf6+sLtmSW+5473vcnZQjafI5jMIPeESRg9grhyKFf+FDWVJ7RhecMQEQvdF+R5dIPqy+fkQ6q0waS8PGzvKie3xaLZcimaZJyqRnc24HZT1s3wMLsK7fwk5STBflyWio6IjahamBLHuGon75Ru3hVemO0TYxVESrrDcn3c4hxVexSJSRqOri5MI1zsHWHKhtEilh53/DhQfojQXFDNp06GLIBQdhHbo1n5idqfNDHt5Ke2LOF5tYV2RxN1neTVY3yD9E34Nj"}),s[21]||(s[21]=i('<p>By default, a Stone.js app has one event handler. If you need multiple entry points, use the <a href="../router">Router</a> to delegate the right events to the right handlers.</p><h2 id="variants-and-execution" tabindex="-1"><a class="header-anchor" href="#variants-and-execution"><span>Variants and Execution</span></a></h2><p>Stone.js supports <strong>three variants</strong> for defining event handlers:</p><ul><li><strong>Class-based</strong> (recommended for declarative APIs and introspection)</li><li><strong>Function-based</strong> (ideal for quick scripts or nano apps)</li><li><strong>Factory-based</strong> (perfect when you need dependency injection via the container)</li></ul><p>No matter the variant, the contract remains the same:<br> You receive an <code>IncomingEvent</code> and optionally return a response.</p>',5)),l(c,{data:[{id:"Class-based"},{id:"Function-based"},{id:"Function-based"}],active:0,"tab-id":"class-factory-function"},{title0:a(({value:t,isActive:o})=>s[0]||(s[0]=[e("Class-based")])),title1:a(({value:t,isActive:o})=>s[1]||(s[1]=[e("Function-based")])),title2:a(({value:t,isActive:o})=>s[2]||(s[2]=[e("Function-based")])),tab0:a(({value:t,isActive:o})=>s[3]||(s[3]=[n("h3",{id:"class-based-event-handler",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-based-event-handler"},[n("span",null,"Class-based Event Handler")])],-1),n("p",null,"If you prefer structure and decorators, this is the default variant.",-1),n("p",null,[e("Just implement the "),n("code",null,"handle"),e(" method from the "),n("code",null,"IEventHandler"),e(" interface:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),e(),n("span",{class:"token punctuation"},"{"),e(" IncomingEvent"),n("span",{class:"token punctuation"},","),e(" IEventHandler "),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},'"@stone-js/core"')]),e(`
`),n("span",{class:"line"}),e(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),e(),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Application"),e(),n("span",{class:"token keyword"},"implements"),e(),n("span",{class:"token class-name"},[e("IEventHandler"),n("span",{class:"token operator"},"<"),e("IncomingEvent"),n("span",{class:"token operator"},">")]),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("  "),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),e("event"),n("span",{class:"token operator"},":"),e(" IncomingEvent"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token keyword"},"void"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("    "),n("span",{class:"token comment"},"// Handle the event here")]),e(`
`),n("span",{class:"line"},[e("  "),n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,"This shape integrates seamlessly with the declarative API.",-1)])),tab1:a(({value:t,isActive:o})=>s[4]||(s[4]=[n("h3",{id:"function-based-event-handler",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#function-based-event-handler"},[n("span",null,"Function-based Event Handler")])],-1),n("p",null,"For fast prototyping or single-purpose apps, you can write a simple function:",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),e(),n("span",{class:"token punctuation"},"{"),e(" IncomingEvent "),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},'"@stone-js/core"')]),e(`
`),n("span",{class:"line"}),e(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),e(" Application "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token punctuation"},"("),e("event"),n("span",{class:"token operator"},":"),e(" IncomingEvent"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token keyword"},"void"),e(),n("span",{class:"token operator"},"=>"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("  "),n("span",{class:"token comment"},"// Handle the event here")]),e(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,"Great for edge functions, CLI tools, or single-route logic.",-1)])),tab2:a(({value:t,isActive:o})=>s[5]||(s[5]=[n("h3",{id:"factory-based-event-handler",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#factory-based-event-handler"},[n("span",null,"Factory-based Event Handler")])],-1),n("p",null,[e("Need access to the service container or runtime dependencies?"),n("br"),e(" Use a factory-based handler: a function that returns your actual handler function.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),e(),n("span",{class:"token punctuation"},"{"),e(" IContainer"),n("span",{class:"token punctuation"},","),e(" IncomingEvent "),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},'"@stone-js/core"')]),e(`
`),n("span",{class:"line"}),e(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),e(),n("span",{class:"token function-variable function"},"Application"),e(),n("span",{class:"token operator"},"="),e(),n("span",{class:"token punctuation"},"("),e("container"),n("span",{class:"token operator"},":"),e(" IContainer"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"=>"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("  "),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token punctuation"},"("),e("event"),n("span",{class:"token operator"},":"),e(" IncomingEvent"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token punctuation"},"{"),e(" message"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token builtin"},"string"),e(),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token operator"},"=>"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("    "),n("span",{class:"token keyword"},"const"),e(" message "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"Hello "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),e("event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"get"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),n("span",{class:"token builtin"},"string"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'name'"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token string"},"'World'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"!!"),n("span",{class:"token template-punctuation string"},"`")])]),e(`
`),n("span",{class:"line"},[e("    "),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token punctuation"},"{"),e(" message "),n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"},[e("  "),n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,"This gives you full access to registered services at runtime, while keeping the handler itself focused.",-1)])),_:1}),s[22]||(s[22]=i('<p>Each variant is valid and interchangeable.<br> The choice depends on your app size, your preferred programming style, and how much framework-level automation you want.</p><h2 id="execution-context-event-lifecycle" tabindex="-1"><a class="header-anchor" href="#execution-context-event-lifecycle"><span>Execution Context &amp; Event Lifecycle</span></a></h2><p>Event handlers in Stone.js are executed within the <strong>initialization dimension</strong>, and they are called <strong>once per incoming event</strong>.<br> Each time an external request (or message) reaches your system, the event handler is invoked with a normalized <a href="./incoming-event"><code>IncomingEvent</code></a> instance.</p>',3)),l(r,{id:"mermaid-109",code:"eJyNjzFrwzAQRnf/ikNBWwwxTRcPhdhpaaFTA12CByU+20cvUpGPpo3xf68iLx0KsRbBe+8DSeuBLEkOg5IOT6hyUAfTo1rCBN6NJ3Ng7IMZEgDVOCs7usQyW39+q+WVMlksHTt/xYv67n69WqlkHEetk4bd+dgZL/D6FlqAzf7FCrbeCDlbQZo+QBHQ0Z3Ito9faKWKXRFVGRQJGabLNIiunGbZv7ssyu0+Mng2tmb0VaI17OQnPLWFxnkwzGBdjX0c9cEgbMLt3QemZ6qly8P/lg0x54uneP6Uxfwym52Ws8vtjfIXX/SR1w=="}),s[23]||(s[23]=i(`<p>This is where intention meets behavior, your application, in the most literal sense, <em>happens</em> here.</p><h3 id="one-event-one-handler" tabindex="-1"><a class="header-anchor" href="#one-event-one-handler"><span>One Event, One Handler</span></a></h3><p>Stone.js guarantees a <strong>single point of entry</strong> for handling each incoming event.<br> Whether the event originates from HTTP, WebSocket, CLI, MQTT, or another integration, the event handler remains the only valid execution entry.</p><p>This consistency ensures that:</p><ul><li>Your domain logic remains isolated from transport concerns</li><li>Your application remains portable and platform-agnostic</li><li>You always deal with the same <a href="./incoming-event"><code>IncomingEvent</code></a> interface or its subclasses</li></ul><h3 id="what-you-receive" tabindex="-1"><a class="header-anchor" href="#what-you-receive"><span>What You Receive</span></a></h3><p>The handler always receives an <a href="./incoming-event"><code>IncomingEvent</code></a> or a subclass of it.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> IncomingHttpEvent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">  event<span class="token punctuation">.</span>uri <span class="token comment">// The request URI</span></span>
<span class="line">  event<span class="token punctuation">.</span>body <span class="token comment">// The raw HTTP request body</span></span>
<span class="line">  event<span class="token punctuation">.</span>headers <span class="token comment">// The HTTP request headers</span></span>
<span class="line">  event<span class="token punctuation">.</span>params <span class="token comment">// The URL parameters</span></span>
<span class="line">  event<span class="token punctuation">.</span>query <span class="token comment">// The query string parameters as URLSearchParams</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Which abstracts the raw request and wraps useful context like:</p><ul><li>Parameters</li><li>Headers</li><li>Payload/body</li><li>Metadata</li><li>And more...</li></ul><p>This means you write one handler that works across environments, even across platforms.</p><h3 id="what-you-can-return" tabindex="-1"><a class="header-anchor" href="#what-you-can-return"><span>What You Can Return</span></a></h3><p>Your handler can return:</p><p><code>void</code>, if you’re doing something side-effectful or async</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> IncomingHttpEvent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>uri<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <strong>value</strong>, which will be passed back as the final response</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> IncomingHttpEvent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&#39;Hello world!&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An <strong>object</strong>, which will be passed back as the final response</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> IncomingHttpEvent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Hello world!&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <strong>Promise</strong>, if you’re doing async work (e.g., calling a database)</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> IncomingHttpEvent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Hello world!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An <a href="./outgoing-response"><code>OutgoingResponse</code></a>, if you want to have full control over the response body, status code, headers, etc.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> IncomingHttpEvent<span class="token punctuation">)</span><span class="token operator">:</span> OutgoingHttpResponse <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> OutgoingHttpResponse<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    content<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      message<span class="token operator">:</span> <span class="token string">&#39;Hello world!&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Stone.js will take care of response normalization based on the integration adapter (e.g., format the object as JSON in HTTP).</p><h3 id="what-happens-around-the-handler" tabindex="-1"><a class="header-anchor" href="#what-happens-around-the-handler"><span>What Happens Around the Handler</span></a></h3><p>Before and after your event handler is called, the system may:</p><ul><li>Execute middleware (e.g., authentication, logging, transformations)</li><li>Trigger lifecycle hooks (<code>onHandlingEvent</code>, <code>onEventHandled</code>, etc.)</li><li>Manage error propagation (<code>onExecutingErrorHandler</code>)</li><li>Build and finalize the response (<code>onPreparingResponse</code>, <code>onResponsePrepared</code>)</li></ul><p>This means you can focus purely on <strong>what the domain should do</strong>, while Stone.js handles the infrastructure logic transparently.</p><h2 id="registering-the-event-handler" tabindex="-1"><a class="header-anchor" href="#registering-the-event-handler"><span>Registering the Event Handler</span></a></h2><p>Stone.js offers <strong>two ways</strong> to register your event handler:</p><ul><li>Declarative API, using decorators and class-based modules</li><li>Imperative API, using <code>defineBlueprintConfig</code> for manual control</li></ul><p>No matter the shape (class, function, factory), the registration process makes your handler available to the kernel for runtime execution.</p>`,32)),l(c,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:a(({value:t,isActive:o})=>s[6]||(s[6]=[e("Declarative")])),title1:a(({value:t,isActive:o})=>s[7]||(s[7]=[e("Imperative")])),tab0:a(({value:t,isActive:o})=>s[8]||(s[8]=[n("h3",{id:"declarative-registration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative-registration"},[n("span",null,"Declarative Registration")])],-1),n("p",null,[e("This is the "),n("strong",null,"simplest and most common"),e(" way to register an event handler.")],-1),n("p",null,[e("If your application is class-based and uses the "),n("code",null,"@StoneApp()"),e(" decorator, all you need to do is implement the "),n("code",null,"handle()"),e(" method:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),e(),n("span",{class:"token punctuation"},"{"),e(" StoneApp"),n("span",{class:"token punctuation"},","),e(" IncomingEvent"),n("span",{class:"token punctuation"},","),e(" IEventHandler "),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},'"@stone-js/core"')]),e(`
`),n("span",{class:"line"}),e(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"StoneApp")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),e(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),e(),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Application"),e(),n("span",{class:"token keyword"},"implements"),e(),n("span",{class:"token class-name"},[e("IEventHandler"),n("span",{class:"token operator"},"<"),e("IncomingEvent"),n("span",{class:"token operator"},">")]),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("  "),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),e("event"),n("span",{class:"token operator"},":"),e(" IncomingEvent"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token keyword"},"void"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("    "),n("span",{class:"token comment"},"// Do your logic here")]),e(`
`),n("span",{class:"line"},[e("  "),n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[e("As soon as you decorate the class with "),n("code",null,"@StoneApp()"),e(", the system recognizes it as your main application entrypoint and automatically wires up the event handler.")],-1),n("p",null,[e("Note: You can only have "),n("strong",null,"one main event handler"),e(" by default."),n("br"),e(" For multiple handlers, see the "),n("a",{href:"../router"},"Router documentation"),e(" to route events conditionally.")],-1)])),tab1:a(({value:t,isActive:o})=>s[9]||(s[9]=[n("h3",{id:"imperative-registration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imperative-registration"},[n("span",null,"Imperative Registration")])],-1),n("p",null,[e("Prefer full control or want to register a function/factory manually?"),n("br"),e(" Use the "),n("code",null,"defineBlueprintConfig"),e(" function and set the "),n("code",null,"stone.kernel.eventHandler"),e(" key.")],-1),n("h4",{id:"function-based-handler",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#function-based-handler"},[n("span",null,"Function-based Handler")])],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),e(),n("span",{class:"token keyword"},"const"),e(" AppBlueprint "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),e("blueprint"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"=>"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("  blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.kernel.eventHandler'"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token punctuation"},"{"),e(" module"),n("span",{class:"token operator"},":"),e(" Application "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),e(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),e(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("h4",{id:"factory-based-handler",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#factory-based-handler"},[n("span",null,"Factory-based Handler")])],-1),n("p",null,[e("If you're using a factory shape, add "),n("code",null,"isFactory: true"),e(":")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),e(),n("span",{class:"token keyword"},"const"),e(" AppBlueprint "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),e("blueprint"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"=>"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("  blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'stone.kernel.eventHandler'"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("    module"),n("span",{class:"token operator"},":"),e(" Application"),n("span",{class:"token punctuation"},",")]),e(`
`),n("span",{class:"line"},[e("    isFactory"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},",")]),e(`
`),n("span",{class:"line"},[e("  "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),e(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),e(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,"This gives you low-level flexibility, useful for advanced bootstrapping or dynamic registration scenarios.",-1)])),_:1}),s[24]||(s[24]=n("p",null,[e("In both modes, once registered, the framework ensures that the handler is executed for every "),n("code",null,"IncomingEvent"),e(" reaching your application.")],-1)),s[25]||(s[25]=n("h2",{id:"router-and-multi-route-support",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#router-and-multi-route-support"},[n("span",null,"Router and Multi-Route Support")])],-1)),n("p",null,[s[11]||(s[11]=e("By default, a Stone.js application has ")),s[12]||(s[12]=n("strong",null,"one event handler",-1)),s[13]||(s[13]=e(". That’s perfect for nano-services, single-purpose FaaS functions, or CLI tools. But what if your app needs to handle ")),s[14]||(s[14]=n("strong",null,"multiple types of requests",-1)),s[15]||(s[15]=e(", mapped to different logic? That’s where the ")),l(u,{to:"/docs/router/"},{default:a(()=>s[10]||(s[10]=[n("strong",null,"Router",-1)])),_:1,__:[10]}),s[16]||(s[16]=e(" comes in."))]),s[26]||(s[26]=i('<h3 id="one-handler-by-default" tabindex="-1"><a class="header-anchor" href="#one-handler-by-default"><span>One Handler by Default</span></a></h3><p>Out of the box, the kernel expects a <strong>single</strong> event handler. It will receive every <code>IncomingEvent</code> and decide what to do. This makes your app ultra-lightweight and cloud-ready, but limited to one entrypoint.</p><h3 id="scaling-with-the-router" tabindex="-1"><a class="header-anchor" href="#scaling-with-the-router"><span>Scaling with the Router</span></a></h3><p>If your app needs to support:</p><ul><li>Multiple endpoints (e.g., <code>/users</code>, <code>/posts</code>)</li><li>Different event types (e.g., HTTP vs. WebSocket)</li><li>Modular handler definitions per domain</li></ul>',5)),n("p",null,[s[18]||(s[18]=e("…then install the ")),l(u,{to:"/docs/router/"},{default:a(()=>s[17]||(s[17]=[n("strong",null,"Router",-1)])),_:1,__:[17]}),s[19]||(s[19]=e(" and use it to dispatch events to the appropriate handler."))]),s[27]||(s[27]=i(`<p>The Router lives in the <strong>initialization dimension</strong>, just like event handlers. It intercepts incoming events and <strong>routes them</strong> to the correct handler, based on metadata like path, method, or headers.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">EventHandler</span></span><span class="token punctuation">(</span><span class="token string">&#39;/users&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;users&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserEventHandler</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;list&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JsonHttpResponse</span></span><span class="token punctuation">(</span><span class="token number">206</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">async</span> <span class="token function">list</span><span class="token punctuation">(</span>event<span class="token operator">:</span> IncomingHttpEvent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>UserResponse<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/:user@id(\\\\d+)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> bindings<span class="token operator">:</span> <span class="token punctuation">{</span> user<span class="token operator">:</span> UserService <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">show</span><span class="token punctuation">(</span>event<span class="token operator">:</span> IncomingHttpEvent<span class="token punctuation">)</span><span class="token operator">:</span> UserResponse <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Check out the <a href="../router">Router documentation</a> to learn more about how to set it up and use it.</p><p>Stone.js lets you scale from <strong>mono-handler</strong> to <strong>multi-handler</strong> seamlessly, with no change to how event handlers are written.</p><h2 id="dimension-specific-behavior" tabindex="-1"><a class="header-anchor" href="#dimension-specific-behavior"><span>Dimension-Specific Behavior</span></a></h2><p>In Stone.js, every component belongs to a <strong>dimension</strong> of the Continuum Architecture.<br> The <strong>event handler</strong> is firmly rooted in the <strong>initialization dimension</strong>, the moment your system is fully built and ready to process intentions.</p><h3 id="initialization-only" tabindex="-1"><a class="header-anchor" href="#initialization-only"><span>Initialization-Only</span></a></h3><p>Unlike setup-time configuration or integration-specific behavior, the event handler is:</p><ul><li>Created <strong>after</strong> the system is bootstrapped</li><li>Executed <strong>once per incoming event</strong></li><li>Independent of the integration layer or platform</li></ul><p>It is the final stage of the request lifecycle, the domain’s direct response to the external world.</p><h3 id="platform-agnostic" tabindex="-1"><a class="header-anchor" href="#platform-agnostic"><span>Platform-Agnostic</span></a></h3><p>Thanks to the <code>IncomingEvent</code> abstraction, you can write <strong>one handler</strong> that works across:</p><ul><li><strong>HTTP</strong> requests</li><li><strong>CLI</strong> commands</li><li><strong>WebSocket</strong> messages</li><li><strong>MQTT</strong> events</li><li>And more…</li></ul><p>The event handler doesn’t care how the event got in, only <strong>what it means</strong>.<br> This allows your domain logic to stay pure, portable, and deployment-agnostic.</p><h3 id="no-setup-or-integration-responsibilities" tabindex="-1"><a class="header-anchor" href="#no-setup-or-integration-responsibilities"><span>No Setup or Integration Responsibilities</span></a></h3><p>Event handlers do <strong>not</strong> participate in:</p><ul><li><strong>Setup dimension</strong> tasks (e.g., registering services, adapters, middleware)</li><li><strong>Integration dimension</strong> operations (e.g., transforming raw input, mapping routes)</li></ul><p>Those are handled before the event handler is even called.</p><p>Your handler&#39;s job is simple:<br><strong>Receive the intention, interpret it, and reply.</strong></p><p>This is what makes Stone.js ideal for continuum-based, context-flexible applications, from mono-cloud systems to full systems.</p><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>The event handler is <strong>not a traditional controller</strong>.<br> It’s the <strong>meeting point between intention and domain</strong>, and it should remain as focused as possible.</p><p>Here’s how to get the most out of your event handlers in Stone.js:</p><h4 id="_1-keep-it-thin" tabindex="-1"><a class="header-anchor" href="#_1-keep-it-thin"><span>1. Keep It Thin</span></a></h4><p>Your event handler should do exactly one thing:<br><strong>Accept the incoming event and pass it along to the right part of your domain.</strong></p><p>Avoid writing business logic inside the handler, that’s what services, use cases, or domain modules are for.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> IncomingEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>content<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The thinner your handler, the easier it is to test, maintain, and reuse.</p><h4 id="_2-treat-it-like-a-function-entry-point" tabindex="-1"><a class="header-anchor" href="#_2-treat-it-like-a-function-entry-point"><span>2. Treat It Like a Function Entry Point</span></a></h4><p>Think of your handler as a function signature for external input.</p><ul><li>Validate the event (if needed)</li><li>Transform the input (if needed)</li><li>Call into the domain</li><li>Return the output</li></ul><p>That’s it.<br> No side quests, no side effects.</p><h4 id="_3-never-bind-to-context-specific-apis" tabindex="-1"><a class="header-anchor" href="#_3-never-bind-to-context-specific-apis"><span>3. Never Bind to Context-Specific APIs</span></a></h4><p>Avoid direct calls to <code>req</code>, <code>res</code>, <code>process</code>, <code>console</code>, or anything else tied to a specific environment.<br> Use the <code>IncomingEvent</code> and domain services to stay agnostic and portable.</p><h4 id="_4-compose-with-middleware" tabindex="-1"><a class="header-anchor" href="#_4-compose-with-middleware"><span>4. Compose With Middleware</span></a></h4><p>If your handler is starting to grow:</p><ul><li>Move shared logic to middleware (auth, logging, headers)</li><li>Move domain logic to services or use cases</li><li>Let the handler just <strong>orchestrate</strong></li></ul><p>You’ll thank yourself when it’s time to scale or refactor.</p><h4 id="_5-prefer-class-shape-for-declarative-use" tabindex="-1"><a class="header-anchor" href="#_5-prefer-class-shape-for-declarative-use"><span>5. Prefer Class Shape for Declarative Use</span></a></h4><p>If you&#39;re using the declarative API and <code>@StoneApp()</code>, use the <strong>class-based handler</strong>.<br> It integrates naturally with introspection, decorators, and tooling.</p><h4 id="_6-use-factories-for-container-access" tabindex="-1"><a class="header-anchor" href="#_6-use-factories-for-container-access"><span>6. Use Factories for Container Access</span></a></h4><p>If you need services or runtime config in your function-based handler, use the <strong>factory shape</strong>.<br> That’s what it’s for.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>container<span class="token operator">:</span> IContainer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> auth <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AuthService<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> auth<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A clean handler is a scalable handler.<br> Stick to the intention → domain → response model, and your apps will remain elegant and resilient.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>The <strong>event handler</strong> is the central execution point of every Stone.js application.<br> It’s where context becomes meaningful, and the domain takes action.</p><p>Here’s what you should remember:</p><ul><li>It belongs to the <strong>initialization dimension</strong></li><li>It is the <strong>only way</strong> to handle an <code>IncomingEvent</code></li><li>It can be written as a <strong>class</strong>, <strong>function</strong>, or <strong>factory</strong></li><li>It can be registered <strong>declaratively</strong> (with <code>@StoneApp</code>) or <strong>imperatively</strong> (via <code>defineBlueprintConfig</code>)</li><li>It runs <strong>once per incoming event</strong>, and may return a value, <code>void</code>, or a <code>Promise</code></li><li>It must stay <strong>light</strong>, <strong>clean</strong>, and <strong>focused on delegation</strong></li><li>It works identically across all platforms, thanks to the standardized <code>IncomingEvent</code></li></ul><p>Stone.js gives you one, and only one, entrypoint for application logic, because that’s all you need to build anything.</p><blockquote><p>One handler.<br> Infinite possibilities.<br> And absolutely zero assumptions about the platform.</p></blockquote><p>Ready to handle some events?</p>`,51))])}const y=d(g,[["render",k]]),w=JSON.parse('{"path":"/docs/essentials/event-handler.html","title":"Event Handlers","lang":"en-US","frontmatter":{"title":"Event Handlers","description":"The Event handler is the core execution unit of every Stone.js application. It represents the precise moment when the domain finally meets the context, when your logic responds ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Event Handlers\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/docs/essentials/event-handler.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Event Handlers"}],["meta",{"property":"og:description","content":"The Event handler is the core execution unit of every Stone.js application. It represents the precise moment when the domain finally meets the context, when your logic responds ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":7.47,"words":2240},"filePathRelative":"docs/essentials/event-handler.md","autoDesc":true}');export{y as comp,w as data};
