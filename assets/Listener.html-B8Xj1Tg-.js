import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as r,a as s,d as t,e as a,w as o,r as l,o as c}from"./app-BJyWHIWB.js";const d={};function u(m,e){const n=l("RouteLink");return c(),p("div",null,[e[8]||(e[8]=r(`<h1 id="function-listener" tabindex="-1"><a class="header-anchor" href="#function-listener"><span>Function: Listener()</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">Listener</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token operator">:</span> ClassDecorator<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Listener decorator to mark a class as a listener for a specific event.</p><p>This decorator is useful for customizing classes that need to listen for specific events within the Stone.js framework. It allows the class to be recognized and managed by the event-handling system.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3>`,6)),s("p",null,[e[2]||(e[2]=s("code",null,"T",-1)),e[3]||(e[3]=t()),e[4]||(e[4]=s("em",null,"extends",-1)),e[5]||(e[5]=t()),a(n,{to:"/api/core/declarations/type-aliases/ClassType.html"},{default:o(()=>e[0]||(e[0]=[s("code",null,"ClassType",-1)])),_:1,__:[0]}),e[6]||(e[6]=t(" = ")),a(n,{to:"/api/core/declarations/type-aliases/ClassType.html"},{default:o(()=>e[1]||(e[1]=[s("code",null,"ClassType",-1)])),_:1,__:[1]})]),e[9]||(e[9]=s("h2",{id:"parameters",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#parameters"},[s("span",null,"Parameters")])],-1)),e[10]||(e[10]=s("h3",{id:"options",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#options"},[s("span",null,"options")])],-1)),s("p",null,[a(n,{to:"/api/core/declarations/interfaces/ListenerOptions.html"},{default:o(()=>e[7]||(e[7]=[s("code",null,"ListenerOptions",-1)])),_:1,__:[7]})]),e[11]||(e[11]=r(`<p>The configuration options for the listener, including the event to listen for.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>ClassDecorator</code></p><p>A decorator function to set metadata on the target class.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Listener</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> event<span class="token operator">:</span> <span class="token string">&#39;UserRegistered&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UserRegisteredListener</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Listener class logic here.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6))])}const g=i(d,[["render",u]]),k=JSON.parse('{"path":"/api/core/decorators/Listener/functions/Listener.html","title":"Function: Listener()","lang":"en-US","frontmatter":{"description":"Function: Listener() Listener decorator to mark a class as a listener for a specific event. This decorator is useful for customizing classes that need to listen for specific eve...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function: Listener()\\",\\"image\\":[\\"/logo_square.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/core/decorators/Listener/functions/Listener.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Function: Listener()"}],["meta",{"property":"og:description","content":"Function: Listener() Listener decorator to mark a class as a listener for a specific event. This decorator is useful for customizing classes that need to listen for specific eve..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo_square.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.35,"words":104},"filePathRelative":"api/core/decorators/Listener/functions/Listener.md","autoDesc":true}');export{g as comp,k as data};
