import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as t,b as s,e as i,w as l,d as n,r,o as d}from"./app-7vCtLRjQ.js";const u={};function m(f,e){const a=r("RouteLink");return d(),o("div",null,[t("p",null,[i(a,{to:"/api/pipeline/"},{default:l(()=>e[0]||(e[0]=[t("strong",null,"Pipeline Documentation",-1)])),_:1,__:[0]})]),e[31]||(e[31]=t("hr",null,null,-1)),t("p",null,[i(a,{to:"/api/pipeline/"},{default:l(()=>e[1]||(e[1]=[n("Pipeline Documentation")])),_:1,__:[1]}),e[3]||(e[3]=n(" / ")),i(a,{to:"/api/pipeline/declarations/"},{default:l(()=>e[2]||(e[2]=[n("declarations")])),_:1,__:[2]}),e[4]||(e[4]=n(" / FunctionalPipe"))]),e[32]||(e[32]=t("h1",{id:"type-alias-functionalpipe-t-r",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-alias-functionalpipe-t-r"},[t("span",null,"Type Alias: FunctionalPipe()<T, R>")])],-1)),t("blockquote",null,[t("p",null,[e[6]||(e[6]=t("strong",null,"FunctionalPipe",-1)),e[7]||(e[7]=n("<")),e[8]||(e[8]=t("code",null,"T",-1)),e[9]||(e[9]=n(", ")),e[10]||(e[10]=t("code",null,"R",-1)),e[11]||(e[11]=n("> = (")),e[12]||(e[12]=t("code",null,"passable",-1)),e[13]||(e[13]=n(", ")),e[14]||(e[14]=t("code",null,"next",-1)),e[15]||(e[15]=n(", ...")),e[16]||(e[16]=t("code",null,"params",-1)),e[17]||(e[17]=n(") => ")),i(a,{to:"/api/pipeline/declarations/type-aliases/Promiseable.html"},{default:l(()=>e[5]||(e[5]=[t("code",null,"Promiseable",-1)])),_:1,__:[5]}),e[18]||(e[18]=n("<")),e[19]||(e[19]=t("code",null,"R",-1)),e[20]||(e[20]=n(">"))])]),e[33]||(e[33]=s('<p>Defined in: <a href="https://github.com/stonemjs/pipeline/blob/4373463e5220be8ed997c5e4b7e1c704715db014/src/declarations.ts#L19" target="_blank" rel="noopener noreferrer">declarations.ts:19</a></p><p>A function type that represents a pipe.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> = <code>unknown</code></p><h3 id="r" tabindex="-1"><a class="header-anchor" href="#r"><span>R</span></a></h3><p><code>R</code> = <code>T</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="passable" tabindex="-1"><a class="header-anchor" href="#passable"><span>passable</span></a></h3><p><code>T</code></p><h3 id="next" tabindex="-1"><a class="header-anchor" href="#next"><span>next</span></a></h3>',11)),t("p",null,[i(a,{to:"/api/pipeline/declarations/type-aliases/PipeExecutor.html"},{default:l(()=>e[21]||(e[21]=[t("code",null,"PipeExecutor",-1)])),_:1,__:[21]}),e[22]||(e[22]=n("<")),e[23]||(e[23]=t("code",null,"T",-1)),e[24]||(e[24]=n(", ")),e[25]||(e[25]=t("code",null,"R",-1)),e[26]||(e[26]=n(">"))]),e[34]||(e[34]=t("h3",{id:"params",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#params"},[t("span",null,"params")])],-1)),e[35]||(e[35]=t("p",null,[n("..."),t("code",null,"any"),n("[]")],-1)),e[36]||(e[36]=t("h2",{id:"returns",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns"},[t("span",null,"Returns")])],-1)),t("p",null,[i(a,{to:"/api/pipeline/declarations/type-aliases/Promiseable.html"},{default:l(()=>e[27]||(e[27]=[t("code",null,"Promiseable",-1)])),_:1,__:[27]}),e[28]||(e[28]=n("<")),e[29]||(e[29]=t("code",null,"R",-1)),e[30]||(e[30]=n(">"))])])}const P=p(u,[["render",m]]),T=JSON.parse('{"path":"/api/pipeline/declarations/type-aliases/FunctionalPipe.html","title":"Type Alias: FunctionalPipe()<T, R>","lang":"en-US","frontmatter":{"description":"/ / FunctionalPipe Type Alias: FunctionalPipe()<T, R> FunctionalPipe<T, R> = (passable, next, ...params) => <R> Defined in: declarations.ts:19 A function type that represents a ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type Alias: FunctionalPipe()<T, R>\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/api/pipeline/declarations/type-aliases/FunctionalPipe.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Type Alias: FunctionalPipe()<T, R>"}],["meta",{"property":"og:description","content":"/ / FunctionalPipe Type Alias: FunctionalPipe()<T, R> FunctionalPipe<T, R> = (passable, next, ...params) => <R> Defined in: declarations.ts:19 A function type that represents a ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":0.21,"words":63},"filePathRelative":"api/pipeline/declarations/type-aliases/FunctionalPipe.md","autoDesc":true}');export{P as comp,T as data};
