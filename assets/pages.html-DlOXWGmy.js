import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as p,e as i,w as e,r as l,o as k,a as n,d as s}from"./app-D3YQYQ8j.js";const g={};function m(h,a){const c=l("Tabs"),r=l("Mermaid");return k(),d("div",null,[a[8]||(a[8]=p(`<p>In most frameworks, a page is just a UI component mapped to a route.</p><p>In Stone.js, a page is a <strong>context-aware unit of behavior</strong> that participates in the <strong>entire application lifecycle</strong>, before, during, and after rendering.</p><p>A page in Stone.js is not simply a visual artifact. It is:</p><ul><li>A <strong>route-bound event handler</strong></li><li>A <strong>renderable component</strong></li><li>A <strong>functional unit of context</strong></li><li>A <strong>gateway between functional and visual logic</strong></li></ul><p>Stone.js pages are powered by the <strong>Continuum Architecture</strong>. That means they:</p><ul><li>Integrate with routing, dependency injection, and middleware</li><li>Respond to incoming events from any environment (server, browser, serverless, etc.)</li><li>Participate in lifecycle hooks like <code>onInit</code>, <code>onPreparingPage</code>, <code>onTerminate</code></li><li>Render UI using a <strong>React functional component</strong></li></ul><p>This model offers full separation of concerns:</p><ul><li><strong>Stone.js</strong> handles context, routing, data, and infrastructure</li><li><strong>React</strong> handles rendering, DOM interaction, and local component state</li></ul><p>Together, they form a <strong>continuum</strong> between the system and the view.</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>You don&#39;t have to manage the glue between route, lifecycle, and rendering, Stone.js does it for you.</p></div><h3 id="not-just-another-component" tabindex="-1"><a class="header-anchor" href="#not-just-another-component"><span>Not just another component</span></a></h3><p>A Stone.js page is not a React component with a route slapped on top. It’s a <strong>complete unit of interaction</strong> in a system-aware architecture.</p><p>Unlike typical frameworks where you return JSX and sprinkle some router sugar, here, your page:</p><ul><li>Participates in the functional lifecycle</li><li>Handles system incoming events</li><li>Can use middleware, lifecycle hooks, dependency injection, and error handling</li><li>And only <strong>then</strong>, returns a React tree to render</li></ul><p>This means a page is <strong>not</strong>:</p><ul><li>A class component</li><li>A hook-based view with <code>useEffect</code> everywhere</li><li>A glorified wrapper around React Router</li></ul><p>It’s a <strong>system construct</strong> that delegates rendering to React, <strong>not the other way around</strong>.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">implements</span> <span class="token class-name">IComponentEventHandler<span class="token operator">&lt;</span>ReactIncomingEvent<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> container<span class="token operator">:</span> IContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> ReactIncomingEvent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Hello world!&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token operator">:</span> RenderContext<span class="token operator">&lt;</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> ReactNode <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>data<span class="token operator">?.</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>React does the rendering. Stone.js does the orchestration, context resolution, error management, and hydration.</p><p>Together, they form a continuum, not a stack.</p><h2 id="defining-pages" tabindex="-1"><a class="header-anchor" href="#defining-pages"><span>Defining Pages</span></a></h2><p>A page in Stone.js is an <strong>event handler</strong> that renders a view.</p><p>It can be defined using:</p><ul><li>A <strong>class</strong> (recommended for structure, decorators, and lifecycle)</li><li>A <strong>factory function</strong> (useful for dynamic composition or DI-driven construction)</li></ul><p>Regardless of shape, all pages must implement the <code>IComponentEventHandler</code> interface from <code>@stone-js/use-react</code>.</p><p>This interface provides three optional hooks:</p><ul><li><code>handle()</code>, to process the incoming event</li><li><code>head()</code>, to return metadata like title and meta tags</li><li><code>render()</code>, to return a <strong>React functional component</strong> (required)</li></ul><p>Stone.js doesn’t enforce a specific file structure or naming convention. You’re free to organize pages in <code>app/pages</code>, co-locate them by feature, or group by adapter, it’s your call.</p><p>What matters is <strong>what they do</strong>, not how they’re stored.</p>`,29)),i(c,{data:[{id:"Class-based"},{id:"Factory-based"}],active:0,"tab-id":"class-factory"},{title0:e(({value:t,isActive:o})=>a[0]||(a[0]=[s("Class-based")])),title1:e(({value:t,isActive:o})=>a[1]||(a[1]=[s("Factory-based")])),tab0:e(({value:t,isActive:o})=>a[2]||(a[2]=[n("h3",{id:"class-based-page",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-based-page"},[n("span",null,"Class-based Page")])],-1),n("p",null,"Use this shape when you want introspection, lifecycle hooks, and decorator-based configuration. It is the most structured and recommended form.",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" IComponentEventHandler"),n("span",{class:"token punctuation"},","),s(" ReactIncomingEvent "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/use-react'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Application"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},[s("IComponentEventHandler"),n("span",{class:"token operator"},"<"),s("ReactIncomingEvent"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" ReactIncomingEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(" name"),n("span",{class:"token operator"},":"),s(" event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'name'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'World'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" data "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(" RenderContext"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" React"),n("span",{class:"token punctuation"},"."),s("ReactNode "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"<"),s("h1"),n("span",{class:"token operator"},">"),s("Hello"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s("data"),n("span",{class:"token operator"},"?."),s("name"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("h1"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:o})=>a[3]||(a[3]=[n("h3",{id:"factory-based-page",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#factory-based-page"},[n("span",null,"Factory-based Page")])],-1),n("p",null,"If you need runtime flexibility or functional programming, use the factory shape. It’s fully supported and highly composable.",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" IContainer "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" ReactIncomingEvent "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/use-react'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"Application"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("container"),n("span",{class:"token operator"},":"),s(" IContainer"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"const"),s(" userService "),n("span",{class:"token operator"},"="),s(" container"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),s("UserService"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" ReactIncomingEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"await"),s(" userService"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getGreeting"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'userId'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" data "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(" RenderContext"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" React"),n("span",{class:"token punctuation"},"."),s("ReactNode "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"<"),s("h1"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"{"),s("data"),n("span",{class:"token punctuation"},"."),s("message"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("h1"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[9]||(a[9]=p('<p>Both formats are interchangeable and interoperable, you can use class pages in some routes and factory pages in others.</p><p>The shape you choose does <strong>not</strong> impact SSR, hydration, routing, or page behavior. Choose the form that fits your module’s complexity.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>But it is recommended to choose one style and stick to it for consistency.</p></div><h2 id="registering-pages" tabindex="-1"><a class="header-anchor" href="#registering-pages"><span>Registering Pages</span></a></h2><p>Once a page is defined, it must be registered in your application blueprint so that Stone.js knows how to route events to it.</p><p>There are two styles of registration:</p><ul><li><strong>Declarative</strong>, using decorators (for class-based pages)</li><li><strong>Imperative</strong>, using blueprint utilities (for class or factory pages)</li></ul><p>In both cases, pages are treated as event handlers operating in the <strong>functional dimension</strong>.</p>',8)),i(c,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:e(({value:t,isActive:o})=>a[4]||(a[4]=[s("Declarative")])),title1:e(({value:t,isActive:o})=>a[5]||(a[5]=[s("Imperative")])),tab0:e(({value:t,isActive:o})=>a[6]||(a[6]=[n("h3",{id:"declarative-registration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative-registration"},[n("span",null,"Declarative Registration")])],-1),n("p",null,"This approach is ideal when using class-based pages and decorators. It gives you maximum introspection and automatic lazy-loading support (in multi-page apps).",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" StoneApp "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" UseReact "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/use-react'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Browser "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/browser-adapter'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Browser")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"UseReact")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"StoneApp")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Application"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},[s("IComponentEventHandler"),n("span",{class:"token operator"},"<"),s("ReactIncomingEvent"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"readonly"),s(" container"),n("span",{class:"token operator"},":"),s(" IContainer"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" ReactIncomingEvent"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(" message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Hello world!'"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" data "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(" RenderContext"),n("span",{class:"token operator"},"<"),n("span",{class:"token punctuation"},"{"),s(" message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" ReactNode "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"<"),s("h1"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"{"),s("data"),n("span",{class:"token operator"},"?."),s("message"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("h1"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("This way, you have a mono-route app that handles all incoming events. Refer to the "),n("a",{href:"./routing"},"Routing documentation"),s(" for more details on how to register multiple routes.")],-1)])),tab1:e(({value:t,isActive:o})=>a[7]||(a[7]=[n("h3",{id:"imperative-registration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imperative-registration"},[n("span",null,"Imperative Registration")])],-1),n("p",null,"Use this approach when:",-1),n("ul",null,[n("li",null,"You define your page as a factory function"),n("li",null,"You want runtime control over route configuration"),n("li",null,"You need conditional logic during registration"),n("li",null,"You are doing functional programming")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" browserAdapterBlueprint "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/browser-adapter'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" defineBlueprintConfig"),n("span",{class:"token punctuation"},","),s(" IBlueprint"),n("span",{class:"token punctuation"},","),s(" stoneBlueprint "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" useReactBlueprint"),n("span",{class:"token punctuation"},","),s(" defineComponentEventHandler "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s("  "),n("span",{class:"token string"},"'@stone-js/use-react'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"Application"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("container"),n("span",{class:"token operator"},":"),s(" IContainer"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"const"),s(" userService "),n("span",{class:"token operator"},"="),s(" container"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),s("UserService"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" ReactIncomingEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"await"),s(" userService"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" data "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(" RenderContext"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"<"),s("h1"),n("span",{class:"token operator"},">"),s("Welcome"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s("data"),n("span",{class:"token operator"},"?."),s("name"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},"<"),n("span",{class:"token operator"},"/"),s("h1"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" AppBlueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token operator"},":"),s(" IBlueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},"  blueprint"),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("stoneBlueprint"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("useReactBlueprint"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("browserAdapterBlueprint"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"defineComponentEventHandler"),n("span",{class:"token punctuation"},"("),s("Application"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[n("code",null,"defineComponentEventHandler()"),s(":")],-1),n("ul",null,[n("li",null,"Works with any shape: class and factory."),n("li",null,[s("The "),n("code",null,"true"),s(" flag indicates this is a factory page.")]),n("li",null,[s("Works only for mono-route apps, for multi-route apps refer to the "),n("a",{href:"./routing"},"Routing documentation"),s(".")])],-1)])),_:1}),a[10]||(a[10]=p('<div class="hint-container tip"><p class="hint-container-title">Tips</p><p>In a <strong>mono-route app</strong>, you don&#39;t need to declare any route, the page is simply your app entry point.<br> In <strong>multi-route apps</strong>, you must register your routes using the Stone.js Router (see the <a href="./routing">Routing documentation</a>).</p></div><h3 id="mono-route-vs-multi-route-applications" tabindex="-1"><a class="header-anchor" href="#mono-route-vs-multi-route-applications"><span>Mono-route vs Multi-route Applications</span></a></h3><ul><li><strong>Mono-route apps</strong> only require one registered page. It will handle all incoming events.</li><li><strong>Multi-route apps</strong> require you to define each route explicitly, using either API style.</li><li>Routes in Stone.js support advanced features: parameter validation, bindings, aliases, protocols, and more.</li></ul><p>See the <a href="./routing">Routing documentation</a> for the full routing API available to your pages.</p><h2 id="page-lifecycle" tabindex="-1"><a class="header-anchor" href="#page-lifecycle"><span>Page Lifecycle</span></a></h2><p>In Stone.js, every page operates across two interconnected dimensions:</p><ul><li>The <strong>functional dimension</strong>, where Stone.js manages context, routing, services, middleware, hooks, and data resolution</li><li>The <strong>view dimension</strong>, where React takes over to render the UI tree and manage DOM interactions</li></ul><p>Stone.js orchestrates the entire page flow <strong>up to the rendering point</strong>. After that, control is passed to React.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>Once the page is rendered, Stone.js steps back, and React takes full control.</p></div><p>This lifecycle ensures that:</p><ul><li>All data is fetched and injected <strong>before rendering</strong></li><li>System-level responsibilities like DI, routing, snapshots, and middleware are resolved</li><li>Rendering is <strong>deterministic</strong>, <strong>contextual</strong>, and <strong>isolated</strong></li></ul><h3 id="lifecycle-flow" tabindex="-1"><a class="header-anchor" href="#lifecycle-flow"><span>Lifecycle flow</span></a></h3><p>Here’s what happens when a page is invoked:</p>',13)),i(r,{id:"mermaid-390",code:"eJy1kkFPAjEQhe/8imbN3iBxARPDwUTYXSBqYpR4IR4KO0BjaTftKijhvzudCqxc7MU9vbz3dWY63TjeCSWqHttF1QrWEPVYNOMWoibzxgs3gs8kWEx2DcaihVbVs/giMumW26jpXCkUDLTUxtkXReeqe3kZNfb7fRw3loaXKzZJkbudajXGfq+o+6hHXBV4dJl9gCJzMH00eg7WoskeRFFI2HAD7F7rkvJkmm1h/l5BLaWgjeVOZ+/AKJBnSAeR8+DnCBSOSBHw5Q8z0YBgXJj9Co3Rphbm1B1K3JZaPoEttbLUNE/qySNfkjtE80D50A8wcj1OfckbozcBsxaKV3jYbZG1Wjes73ZIauAu51WbVuF1QvvyukP3P6Pdi6Sk8qPK3E2PXu6Vq5T7SkM3PamRm5fUuBHH7Ln6dC/JFtowLiVTugCLCGMWE8ChbWX0G7Q2oqhWPfxzmgshZe8ip69G9oPJQTiZhKPtcLQTjKbBZBZM5v9Bni3quo62024NHQYXHQWT4z/IbzI7bwg="}),a[11]||(a[11]=p(`<div class="hint-container important"><p class="hint-container-title">Important</p><p>It is important to understand that these lifecycle hooks are <strong>not</strong> React lifecycle hooks.<br> They are Stone.js lifecycle hooks that happen before the rendering phase.</p></div><p>Each step belongs to a <strong>different concern</strong>:</p><table><thead><tr><th>Phase</th><th>Responsibility</th><th>Dimension</th></tr></thead><tbody><tr><td><code>handle()</code></td><td>Fetch data, validate, process event</td><td>Functional dimension</td></tr><tr><td><code>onPreparingPage</code></td><td>Last system hook before rendering</td><td>Functional dimension</td></tr><tr><td><code>render()</code></td><td>Return JSX tree (React functional component)</td><td>View dimension</td></tr></tbody></table><h3 id="the-handle-method" tabindex="-1"><a class="header-anchor" href="#the-handle-method"><span>The <code>handle()</code> method</span></a></h3><p>This method is optional but recommended. It runs as part of the <strong>event handling pipeline</strong>.</p><p>You can:</p><ul><li>Use the injected <code>event</code> to extract params, headers, cookies, etc.</li><li>Fetch data from services using the DI container</li><li>Return raw data or a full <code>ReactOutgoingResponse</code></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">async</span> <span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> ReactIncomingEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> id <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>articleService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The result of <code>handle()</code> is passed as the <code>data</code> parameter to the <code>render()</code> method.</p><div class="hint-container important"><p class="hint-container-title">Snapshotted automatically</p><p>In SSR mode, the result is also <strong>snapshotted automatically</strong> and injected into the HTML.</p></div><h3 id="the-render-method" tabindex="-1"><a class="header-anchor" href="#the-render-method"><span>The <code>render()</code> method</span></a></h3><p>This method is <strong>required</strong>. It behaves exactly like a <strong>React functional component</strong> , but with superpowers.</p><p>It receives a <code>RenderContext</code>, giving it:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">RenderContext<span class="token operator">&lt;</span>TData <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  data<span class="token operator">?</span><span class="token operator">:</span> TData</span>
<span class="line">  container<span class="token operator">:</span> IContainer</span>
<span class="line">  event<span class="token operator">:</span> ReactIncomingEvent</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This means you can:</p><ul><li>Use <code>data</code> from <code>handle()</code></li><li>Access services using <code>container.resolve(...)</code></li><li>Inspect the incoming event (headers, query, cookies, etc.)</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">,</span> event<span class="token punctuation">,</span> container <span class="token punctuation">}</span><span class="token operator">:</span> RenderContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> user <span class="token operator">=</span> data<span class="token operator">?.</span>user</span>
<span class="line">  <span class="token keyword">const</span> router <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> router<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">&#39;/logout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Logout<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Stone.js renders this output using the correct renderer depending on the runtime:</p><table><thead><tr><th>Environment</th><th>Method used</th><th>Result</th></tr></thead><tbody><tr><td><strong>SSR / SOR (server)</strong></td><td><code>renderToString</code> from <code>react-dom/server</code></td><td>HTML string returned to the client</td></tr><tr><td><strong>SSR (client)</strong></td><td><code>hydrateRoot</code> from <code>react-dom/client</code></td><td>Hydrates the HTML and activates React</td></tr><tr><td><strong>SPA / CSR</strong></td><td><code>createRoot</code> from <code>react-dom/client</code></td><td>Standard React rendering in the browser</td></tr></tbody></table><h3 id="head-–-html-head-tags" tabindex="-1"><a class="header-anchor" href="#head-–-html-head-tags"><span><code>head()</code> – HTML head tags</span></a></h3><p>Your page can also define a <code>head()</code> method to populate metadata like title, description, and meta tags.</p><p>This is especially useful for:</p><ul><li>SEO</li><li>Dynamic titles based on route data</li><li>Sharing/social previews</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">{</span> event <span class="token punctuation">}</span><span class="token operator">:</span> RenderContext<span class="token punctuation">)</span><span class="token operator">:</span> HeadContext <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    title<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    description<span class="token operator">:</span> <span class="token string">&#39;This is a React page in Stone.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    metas<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;author&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;Stone.js&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;keywords&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;stonejs, react, ssr, framework&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HeadContext supports:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">HeadContext</span> <span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  description<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  metas<span class="token operator">?</span><span class="token operator">:</span> HTMLMetaDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  links<span class="token operator">?</span><span class="token operator">:</span> HTMLLinkDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  styles<span class="token operator">?</span><span class="token operator">:</span> HTMLStyleDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  scripts<span class="token operator">?</span><span class="token operator">:</span> HTMLScriptDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Stone.js will inject these tags into the rendered page, whether on the server (SSR/SOR) or the client (SPA).</p><h3 id="onpreparingpage-hook" tabindex="-1"><a class="header-anchor" href="#onpreparingpage-hook"><span><code>onPreparingPage</code> hook</span></a></h3><p>Right before React renders the page, Stone.js emits a special lifecycle hook: <code>onPreparingPage</code>.</p><p>This hook is your <strong>last chance</strong> to inspect or mutate context before rendering happens.</p><p>It occurs after:</p><ul><li>Middleware execution</li><li><code>handle()</code> resolution</li></ul><p>And before:</p><ul><li>Snapshot registration (SSR)</li><li>React rendering (DOM or hydration)</li><li><code>onResponsePrepared</code> and <code>onTerminate</code> lifecycle hooks</li></ul><h4 id="use-cases" tabindex="-1"><a class="header-anchor" href="#use-cases"><span>Use cases:</span></a></h4><ul><li>Logging or analytics</li><li>Injecting flags or metadata</li><li>Mutation of the response or event</li><li>Preparing SSR-specific rendering context</li></ul><h4 id="example-decorator-based" tabindex="-1"><a class="header-anchor" href="#example-decorator-based"><span>Example (decorator-based)</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Hook<span class="token punctuation">,</span> UseReactHookListenerContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/use-react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PageLogger</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Hook</span></span><span class="token punctuation">(</span><span class="token string">&#39;onPreparingPage&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">logBeforeRender</span><span class="token punctuation">(</span>context<span class="token operator">:</span> UseReactHookListenerContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Preparing page:&#39;</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>@Hook()</code> decorator and the <code>defineHook</code> utility from <code>@stone-js/use-react</code> provide full TypeScript support, enabling type safety and rich IDE features like autocompletion and inline documentation for the UseReact hooks.</p><h4 id="hook-context" tabindex="-1"><a class="header-anchor" href="#hook-context"><span>Hook Context</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">UseReactHookListenerContext</span> <span class="token punctuation">{</span></span>
<span class="line">  data<span class="token operator">:</span> <span class="token builtin">any</span></span>
<span class="line">  error<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span></span>
<span class="line">  head<span class="token operator">?</span><span class="token operator">:</span> HeadContext</span>
<span class="line">  container<span class="token operator">:</span> IContainer</span>
<span class="line">  event<span class="token operator">:</span> ReactIncomingEvent</span>
<span class="line">  snapshot<span class="token operator">:</span> ResponseSnapshotType</span>
<span class="line">  response<span class="token operator">:</span> ReactOutgoingResponse</span>
<span class="line">  componentType<span class="token operator">:</span> React<span class="token punctuation">.</span>ElementType</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ssr-dual-execution-lifecycle" tabindex="-1"><a class="header-anchor" href="#ssr-dual-execution-lifecycle"><span>SSR: Dual Execution Lifecycle</span></a></h3><p>In SSR mode, the page lifecycle executes <strong>twice</strong>:</p><ol><li><p>On the <strong>server</strong>:</p><ul><li>Runs <code>handle()</code></li><li>Generates the HTML using <code>renderToString()</code></li><li>Snapshots the result</li></ul></li><li><p>On the <strong>client</strong>:</p><ul><li>Hydrates the page using <code>hydrateRoot()</code></li><li>Replays lifecycle hooks</li><li><strong>Does not refetch data</strong> (thanks to snapshots)</li></ul></li></ol><p>This guarantees consistency between server and client, while preserving full control over lifecycle and context.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>This dual-execution is necessary: Stone.js defers context detection to runtime, so lifecycle hooks must run on both ends.</p></div><h2 id="pages-hooks-explained" tabindex="-1"><a class="header-anchor" href="#pages-hooks-explained"><span>Pages Hooks Explained</span></a></h2><p>Once your page reaches the <code>render()</code> phase, Stone.js has already done its job. But your page still has access to <strong>powerful utilities</strong> and <strong>contextual behavior</strong> that help you shape the outcome of an incoming event or interaction.</p><p>These hooks and helpers let you respond, redirect, and access data in a context-aware way.</p><h3 id="reactincomingevent-one-event-to-rule-them-all" tabindex="-1"><a class="header-anchor" href="#reactincomingevent-one-event-to-rule-them-all"><span><code>ReactIncomingEvent</code>: One event to rule them all</span></a></h3><p>Every page receives a <code>ReactIncomingEvent</code> as its event type. This object <strong>wraps and abstracts</strong> the underlying runtime event:</p><table><thead><tr><th>Runtime</th><th>Wrapped Event Type</th></tr></thead><tbody><tr><td>SSR / SOR</td><td><code>IncomingHttpEvent</code></td></tr><tr><td>CSR / SPA</td><td><code>IncomingBrowserEvent</code></td></tr></tbody></table><p>You never need to check where your code is running. Just use the event consistently:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> ReactIncomingEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> locale <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;locale&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;en&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> query <span class="token operator">=</span> event<span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;q&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Fully context-aware, platform-agnostic</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>ReactIncomingEvent</code> unifies request parsing, header access, cookie handling, user agent parsing, and much more.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Wherever your app runs, this event gives you <strong>one consistent interface</strong>.</p></div><h3 id="reactoutgoingresponse-full-control-when-needed" tabindex="-1"><a class="header-anchor" href="#reactoutgoingresponse-full-control-when-needed"><span><code>ReactOutgoingResponse</code>: Full control when needed</span></a></h3><p>By default, you can return raw data from <code>handle()</code> and let Stone.js wrap it for you. But if you want full control over headers, status codes, or advanced behavior (like redirection), you should return a <code>ReactOutgoingResponse</code>.</p><p>Use the utility function <code>reactResponse()</code> to create one:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/use-react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> ReactIncomingEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token function">reactResponse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Stone&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&#39;x-app-version&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> response</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Stone.js will:</p><ul><li>Automatically infer the correct response type (<code>Http</code>, <code>Browser</code>)</li><li>Snapshot the data if SSR is enabled</li><li>Send the correct output for your environment</li></ul><p>You still get full hydration, even with a manual response.</p><h3 id="redirection-reactredirectresponse" tabindex="-1"><a class="header-anchor" href="#redirection-reactredirectresponse"><span>Redirection: <code>reactRedirectResponse()</code></span></a></h3><p>If you need to redirect from within your <code>handle()</code> method or a middleware, use the utility <code>reactRedirectResponse()</code>.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactRedirectResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/use-react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> ReactIncomingEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>authService<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">reactRedirectResponse</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Welcome back!&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This response:</p><ul><li>Triggers a browser navigation in CSR</li><li>Sends an HTTP 302 in SSR/SOR</li><li>Works identically in middleware or page logic</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Don&#39;t use the <code>Router.navigate()</code> method inside <code>handle()</code> or middleware , it only works inside the React component tree <strong>after rendering</strong>.</p></div><h3 id="meta-tags-head" tabindex="-1"><a class="header-anchor" href="#meta-tags-head"><span>Meta tags: <code>head()</code></span></a></h3><p>As explained earlier, pages can define a <code>head()</code> method to customize metadata for the rendered page:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token operator">:</span> RenderContext<span class="token punctuation">)</span><span class="token operator">:</span> HeadContext <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    title<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Profile of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    metas<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;description&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;User profile page&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;author&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;Stone.js&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This works in all rendering modes and is essential for SEO, OpenGraph, and analytics.</p><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>Designing pages in Stone.js is not just about wiring up a route and returning JSX, it’s about composing context-aware, modular units that cooperate across dimensions. Here are best practices to help you get the most out of Stone.js pages:</p><h4 id="separate-concerns-clearly" tabindex="-1"><a class="header-anchor" href="#separate-concerns-clearly"><span>Separate concerns clearly</span></a></h4><ul><li>Use <code>handle()</code> to process the <strong>intent</strong> (event) and fetch or compute <strong>data</strong>.</li><li>Use <code>render()</code> to output the <strong>view</strong>, keeping it clean and stateless.</li><li>Use <code>head()</code> to define metadata, don’t set it imperatively elsewhere.</li></ul><p>This clear split between functional and view dimensions keeps logic predictable, testable, and easier to debug.</p><h4 id="prefer-class-based-pages-for-most-use-cases" tabindex="-1"><a class="header-anchor" href="#prefer-class-based-pages-for-most-use-cases"><span>Prefer class-based pages for most use cases</span></a></h4><p>Class pages give you:</p><ul><li>Decorator-based registration (<code>@Page()</code>)</li><li>Better introspection for tooling</li><li>Lifecycle hook integration</li><li>Cleaner dependency injection</li></ul><p>Factory pages are great when you need dynamic logic or runtime-driven composition, but for most routes, classes are more declarative and maintainable.</p><h4 id="let-stone-js-do-the-orchestration" tabindex="-1"><a class="header-anchor" href="#let-stone-js-do-the-orchestration"><span>Let Stone.js do the orchestration</span></a></h4><p>Avoid:</p><ul><li>Manually handling SSR logic</li><li>Writing hydration-specific code</li><li>Manually injecting metadata</li></ul><p>Instead:</p><ul><li>Return raw data from <code>handle()</code></li><li>Let Stone.js snapshot it</li><li>Define <code>head()</code> as needed</li></ul><p>Trust the framework to manage the flow, <strong>it’s built for that.</strong></p><h4 id="use-reactincomingevent-everywhere" tabindex="-1"><a class="header-anchor" href="#use-reactincomingevent-everywhere"><span>Use <code>ReactIncomingEvent</code> everywhere</span></a></h4><p>This event type is platform-agnostic and automatically adapted to your runtime:</p><ul><li>No need to check if you&#39;re in the browser or server</li><li>Works the same across SPA, SSR, and SOR</li><li>Exposes cookies, headers, query, user-agent, and more</li></ul><h4 id="keep-pages-light-delegate-logic-to-services" tabindex="-1"><a class="header-anchor" href="#keep-pages-light-delegate-logic-to-services"><span>Keep pages light, delegate logic to services</span></a></h4><p>Avoid bloating your <code>handle()</code> method with deep logic or manual validations. Instead, inject services and keep your handler focused:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authService<span class="token punctuation">.</span><span class="token function">validateToken</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This keeps pages declarative, and your business logic reusable across multiple modules.</p><h4 id="redirect-using-reactredirectresponse" tabindex="-1"><a class="header-anchor" href="#redirect-using-reactredirectresponse"><span>Redirect using <code>reactRedirectResponse()</code></span></a></h4><p>Avoid using <code>router.navigate()</code> in <code>handle()</code> or middleware, it won’t work reliably in SSR or SOR.</p><p>Instead:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">return</span> <span class="token function">reactRedirectResponse</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>It will adapt to your runtime automatically.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>A <strong>Stone.js Page</strong> is a structured unit that connects <strong>user intention</strong> to <strong>visual outcome</strong>, bridging the <strong>functional dimension</strong> of your application with the <strong>view dimension</strong> powered by React.</p><p>Unlike frameworks that reduce pages to route-bound components, Stone.js treats pages as full-fledged <strong>contextual actors</strong>:</p><ul><li>They receive normalized, platform-agnostic <strong>incoming events</strong></li><li>They participate in lifecycle orchestration and system-level hooks</li><li>They return fully reactive, renderable <strong>React components</strong></li><li>They can control metadata, redirection, error handling, and hydration with precision</li></ul><p>Each page is made of three core methods:</p><ul><li><code>handle()</code> → fetch or process data in the functional dimension</li><li><code>render()</code> → return JSX using React in the view dimension</li><li><code>head()</code> → provide head metadata like title, meta, and links</li></ul><p>Pages can be registered declaratively or imperatively, and can be structured as classes or factories, depending on how much introspection or flexibility you need.</p><p>Stone.js provides automatic:</p><ul><li><strong>Routing integration</strong></li><li><strong>Context injection</strong> (DI container, incoming event, snapshot data)</li><li><strong>SSR hydration</strong> using snapshots</li><li><strong>Error delegation</strong> and lifecycle visibility</li></ul><p>And most importantly: <strong>Once the page is rendered, Stone.js steps back and React takes full control.</strong></p><p>That’s the power of the Continuum: clean boundaries, contextual flow, and zero-friction rendering across platforms.</p><p>A Stone.js page is not a view. It’s a conversation between the system and the user, shaped by context, delivered by logic, and rendered through React.</p>`,112))])}const y=u(g,[["render",m]]),f=JSON.parse('{"path":"/docs/react/pages.html","title":"Pages","lang":"en-US","frontmatter":{"title":"Pages","description":"In most frameworks, a page is just a UI component mapped to a route. In Stone.js, a page is a context-aware unit of behavior that participates in the entire application lifecycl...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Pages\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/docs/react/pages.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Pages"}],["meta",{"property":"og:description","content":"In most frameworks, a page is just a UI component mapped to a route. In Stone.js, a page is a context-aware unit of behavior that participates in the entire application lifecycl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":9.61,"words":2883},"filePathRelative":"docs/react/pages.md","autoDesc":true}');export{y as comp,f as data};
