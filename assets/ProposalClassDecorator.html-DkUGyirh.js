import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as o,a as e,d as s,e as n,w as r,r as c,o as i}from"./app-BJyWHIWB.js";const d={};function m(u,a){const t=c("RouteLink");return i(),l("div",null,[a[7]||(a[7]=o(`<h1 id="type-alias-proposalclassdecorator-tclass" tabindex="-1"><a class="header-anchor" href="#type-alias-proposalclassdecorator-tclass"><span>Type Alias: ProposalClassDecorator()&lt;TClass&gt;</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">ProposalClassDecorator<span class="token operator">&lt;</span>TClass<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token operator">&lt;</span>TFunction<span class="token operator">&gt;</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TFunction <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Represents a class decorator using the 2023-11 proposal syntax.</p><p>A function that decorates a class and optionally returns a new constructor.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="tclass" tabindex="-1"><a class="header-anchor" href="#tclass"><span>TClass</span></a></h3>`,6)),e("p",null,[a[2]||(a[2]=e("code",null,"TClass",-1)),a[3]||(a[3]=s()),a[4]||(a[4]=e("em",null,"extends",-1)),a[5]||(a[5]=s()),n(t,{to:"/api/core/declarations/type-aliases/ClassType.html"},{default:r(()=>a[0]||(a[0]=[e("code",null,"ClassType",-1)])),_:1,__:[0]}),a[6]||(a[6]=s(" = ")),n(t,{to:"/api/core/declarations/type-aliases/ClassType.html"},{default:r(()=>a[1]||(a[1]=[e("code",null,"ClassType",-1)])),_:1,__:[1]})]),a[8]||(a[8]=o('<p>The type of the class constructor being decorated.</p><h2 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1"><span>Type Parameters</span></a></h2><h3 id="tfunction" tabindex="-1"><a class="header-anchor" href="#tfunction"><span>TFunction</span></a></h3><p><code>TFunction</code> <em>extends</em> <code>TClass</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="target" tabindex="-1"><a class="header-anchor" href="#target"><span>target</span></a></h3><p><code>TFunction</code></p><p>The class constructor to be decorated.</p><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>context</span></a></h3><p><code>ClassDecoratorContext</code>&lt;<code>TClass</code>&gt;</p><p>The context object providing metadata about the class.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>TFunction</code> | <code>undefined</code></p><p>The original or a modified class constructor, or <code>undefined</code>.</p>',14))])}const g=p(d,[["render",m]]),T=JSON.parse('{"path":"/api/core/declarations/type-aliases/ProposalClassDecorator.html","title":"Type Alias: ProposalClassDecorator()<TClass>","lang":"en-US","frontmatter":{"description":"Type Alias: ProposalClassDecorator()<TClass> Represents a class decorator using the 2023-11 proposal syntax. A function that decorates a class and optionally returns a new const...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type Alias: ProposalClassDecorator()<TClass>\\",\\"image\\":[\\"/logo_square.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/core/declarations/type-aliases/ProposalClassDecorator.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Type Alias: ProposalClassDecorator()<TClass>"}],["meta",{"property":"og:description","content":"Type Alias: ProposalClassDecorator()<TClass> Represents a class decorator using the 2023-11 proposal syntax. A function that decorates a class and optionally returns a new const..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo_square.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.3,"words":91},"filePathRelative":"api/core/declarations/type-aliases/ProposalClassDecorator.md","autoDesc":true}');export{g as comp,T as data};
