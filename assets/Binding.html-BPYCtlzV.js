import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as i,a,e as s,w as t,d as r,r as p,o as d}from"./app-CsZBgwJX.js";const c={};function h(u,e){const n=p("RouteLink");return d(),l("div",null,[e[8]||(e[8]=i('<h1 id="class-abstract-binding-v" tabindex="-1"><a class="header-anchor" href="#class-abstract-binding-v"><span>Class: <code>abstract</code> Binding&lt;V&gt;</span></a></h1><p>Abstract class representing a Binding.</p><p>This abstract class serves as the base class for all types of bindings in the service container. It holds a value and provides an abstract method to resolve and return that value, allowing different subclasses to implement their own resolution logic. Bindings are used to manage dependencies and control how objects are instantiated within the container.</p><h2 id="author" tabindex="-1"><a class="header-anchor" href="#author"><span>Author</span></a></h2><p>Mr. Stone <a href="mailto:evensstone@gmail.com" target="_blank" rel="noopener noreferrer">evensstone@gmail.com</a></p><h2 id="extended-by" tabindex="-1"><a class="header-anchor" href="#extended-by"><span>Extended by</span></a></h2>',6)),a("ul",null,[a("li",null,[s(n,{to:"/api/service-container/models/Instance/classes/Instance.html"},{default:t(()=>e[0]||(e[0]=[a("code",null,"Instance",-1)])),_:1,__:[0]})]),a("li",null,[s(n,{to:"/api/service-container/models/ResolverBinding/classes/ResolverBinding.html"},{default:t(()=>e[1]||(e[1]=[a("code",null,"ResolverBinding",-1)])),_:1,__:[1]})])]),e[9]||(e[9]=a("h2",{id:"type-parameters",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#type-parameters"},[a("span",null,"Type Parameters")])],-1)),e[10]||(e[10]=a("h3",{id:"v",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#v"},[a("span",null,"V")])],-1)),a("p",null,[e[3]||(e[3]=a("code",null,"V",-1)),e[4]||(e[4]=r()),e[5]||(e[5]=a("em",null,"extends",-1)),e[6]||(e[6]=r()),s(n,{to:"/api/service-container/declarations/type-aliases/BindingValue.html"},{default:t(()=>e[2]||(e[2]=[a("code",null,"BindingValue",-1)])),_:1,__:[2]})]),e[11]||(e[11]=i(`<p>The type of value that this binding holds.</p><h2 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">new</span> <span class="token class-name">Binding<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Binding<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Create a new instance of Binding.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><h5 id="value" tabindex="-1"><a class="header-anchor" href="#value"><span>value?</span></a></h5><p><code>V</code></p><p>The value to be held by the binding.</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>Binding</code>&lt;<code>V</code>&gt;</p><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties"><span>Properties</span></a></h2><h3 id="value-1" tabindex="-1"><a class="header-anchor" href="#value-1"><span>value?</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">protected</span> optional value<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The value held by the binding.</p><p>This value is resolved at runtime, either directly or through a resolver function.</p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h2><h3 id="isresolved" tabindex="-1"><a class="header-anchor" href="#isresolved"><span>isResolved()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">protected</span> <span class="token function">isResolved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Check if the value has been resolved.</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>boolean</code></p><p>A boolean indicating whether the value has been resolved.</p><hr><h3 id="resolve" tabindex="-1"><a class="header-anchor" href="#resolve"><span>resolve()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">abstract</span> <span class="token function">resolve</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token constant">V</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Resolve and return the value of the binding.</p><p>This abstract method must be implemented by subclasses to provide specific resolution logic.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><h5 id="container" tabindex="-1"><a class="header-anchor" href="#container"><span>container</span></a></h5>`,30)),a("p",null,[s(n,{to:"/api/service-container/Container/classes/Container.html"},{default:t(()=>e[7]||(e[7]=[a("code",null,"Container",-1)])),_:1,__:[7]})]),e[12]||(e[12]=a("p",null,"The container to resolve dependencies from.",-1)),e[13]||(e[13]=a("h4",{id:"returns-2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#returns-2"},[a("span",null,"Returns")])],-1)),e[14]||(e[14]=a("p",null,[a("code",null,"undefined"),r(" | "),a("code",null,"V")],-1)),e[15]||(e[15]=a("p",null,"The resolved value of the binding.",-1))])}const v=o(c,[["render",h]]),b=JSON.parse('{"path":"/api/service-container/models/Binding/classes/Binding.html","title":"Class: abstract Binding<V>","lang":"en-US","frontmatter":{"description":"Class: abstract Binding<V> Abstract class representing a Binding. This abstract class serves as the base class for all types of bindings in the service container. It holds a val...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Class: abstract Binding<V>\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/service-container/models/Binding/classes/Binding.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Class: abstract Binding<V>"}],["meta",{"property":"og:description","content":"Class: abstract Binding<V> Abstract class representing a Binding. This abstract class serves as the base class for all types of bindings in the service container. It holds a val..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.72,"words":217},"filePathRelative":"api/service-container/models/Binding/classes/Binding.md","autoDesc":true}');export{v as comp,b as data};
