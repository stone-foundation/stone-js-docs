import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as t,b as s,e as n,w as o,d as p,r as a,o as d}from"./app-7vCtLRjQ.js";const u={};function m(y,e){const i=a("RouteLink");return d(),l("div",null,[t("p",null,[n(i,{to:"/api/pipeline/"},{default:o(()=>e[0]||(e[0]=[t("strong",null,"Pipeline Documentation",-1)])),_:1,__:[0]})]),e[37]||(e[37]=t("hr",null,null,-1)),t("p",null,[n(i,{to:"/api/pipeline/"},{default:o(()=>e[1]||(e[1]=[p("Pipeline Documentation")])),_:1,__:[1]}),e[3]||(e[3]=p(" / ")),n(i,{to:"/api/pipeline/declarations/"},{default:o(()=>e[2]||(e[2]=[p("declarations")])),_:1,__:[2]}),e[4]||(e[4]=p(" / PipeType"))]),e[38]||(e[38]=t("h1",{id:"type-alias-pipetype-t-r-args",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-alias-pipetype-t-r-args"},[t("span",null,"Type Alias: PipeType<T, R, Args>")])],-1)),t("blockquote",null,[t("p",null,[e[9]||(e[9]=t("strong",null,"PipeType",-1)),e[10]||(e[10]=p("<")),e[11]||(e[11]=t("code",null,"T",-1)),e[12]||(e[12]=p(", ")),e[13]||(e[13]=t("code",null,"R",-1)),e[14]||(e[14]=p(", ")),e[15]||(e[15]=t("code",null,"Args",-1)),e[16]||(e[16]=p("> = ")),n(i,{to:"/api/pipeline/declarations/type-aliases/PipeAlias.html"},{default:o(()=>e[5]||(e[5]=[t("code",null,"PipeAlias",-1)])),_:1,__:[5]}),e[17]||(e[17]=p(" | ")),n(i,{to:"/api/pipeline/declarations/type-aliases/PipeClass.html"},{default:o(()=>e[6]||(e[6]=[t("code",null,"PipeClass",-1)])),_:1,__:[6]}),e[18]||(e[18]=p("<")),e[19]||(e[19]=t("code",null,"T",-1)),e[20]||(e[20]=p(", ")),e[21]||(e[21]=t("code",null,"R",-1)),e[22]||(e[22]=p(", ")),e[23]||(e[23]=t("code",null,"Args",-1)),e[24]||(e[24]=p("> | ")),n(i,{to:"/api/pipeline/declarations/type-aliases/FunctionalPipe.html"},{default:o(()=>e[7]||(e[7]=[t("code",null,"FunctionalPipe",-1)])),_:1,__:[7]}),e[25]||(e[25]=p("<")),e[26]||(e[26]=t("code",null,"T",-1)),e[27]||(e[27]=p(", ")),e[28]||(e[28]=t("code",null,"R",-1)),e[29]||(e[29]=p("> | ")),n(i,{to:"/api/pipeline/declarations/type-aliases/FactoryPipe.html"},{default:o(()=>e[8]||(e[8]=[t("code",null,"FactoryPipe",-1)])),_:1,__:[8]}),e[30]||(e[30]=p("<")),e[31]||(e[31]=t("code",null,"T",-1)),e[32]||(e[32]=p(", ")),e[33]||(e[33]=t("code",null,"R",-1)),e[34]||(e[34]=p(", ")),e[35]||(e[35]=t("code",null,"Args",-1)),e[36]||(e[36]=p(">"))])]),e[39]||(e[39]=s('<p>Defined in: <a href="https://github.com/stonemjs/pipeline/blob/4373463e5220be8ed997c5e4b7e1c704715db014/src/declarations.ts#L31" target="_blank" rel="noopener noreferrer">declarations.ts:31</a></p><p>A type that can either be a function or a string, representing a pipeline step.</p><p>A pipe can either be a function that performs an action or a string identifier to be resolved.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> = <code>unknown</code></p><h3 id="r" tabindex="-1"><a class="header-anchor" href="#r"><span>R</span></a></h3><p><code>R</code> = <code>T</code></p><h3 id="args" tabindex="-1"><a class="header-anchor" href="#args"><span>Args</span></a></h3><p><code>Args</code> <em>extends</em> <code>any</code>[] = <code>any</code>[]</p>',10))])}const f=r(u,[["render",m]]),A=JSON.parse('{"path":"/api/pipeline/declarations/type-aliases/PipeType.html","title":"Type Alias: PipeType<T, R, Args>","lang":"en-US","frontmatter":{"description":"/ / PipeType Type Alias: PipeType<T, R, Args> PipeType<T, R, Args> = | <T, R, Args> | <T, R> | <T, R, Args> Defined in: declarations.ts:31 A type that can either be a function o...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type Alias: PipeType<T, R, Args>\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/api/pipeline/declarations/type-aliases/PipeType.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Type Alias: PipeType<T, R, Args>"}],["meta",{"property":"og:description","content":"/ / PipeType Type Alias: PipeType<T, R, Args> PipeType<T, R, Args> = | <T, R, Args> | <T, R> | <T, R, Args> Defined in: declarations.ts:31 A type that can either be a function o..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":0.3,"words":90},"filePathRelative":"api/pipeline/declarations/type-aliases/PipeType.md","autoDesc":true}');export{f as comp,A as data};
