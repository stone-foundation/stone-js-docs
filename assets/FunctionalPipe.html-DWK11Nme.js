import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as i,a,e as s,d as n,w as p,r as l,o as d}from"./app-CsZBgwJX.js";const c={};function m(u,e){const t=l("RouteLink");return d(),r("div",null,[e[10]||(e[10]=i(`<h1 id="type-alias-functionalpipe-t-r" tabindex="-1"><a class="header-anchor" href="#type-alias-functionalpipe-t-r"><span>Type Alias: FunctionalPipe()&lt;T, R&gt;</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">FunctionalPipe<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>passable<span class="token punctuation">,</span> next<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promiseable<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>A function type that represents a pipe.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> = <code>unknown</code></p><h3 id="r" tabindex="-1"><a class="header-anchor" href="#r"><span>R</span></a></h3><p><code>R</code> = <code>T</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="passable" tabindex="-1"><a class="header-anchor" href="#passable"><span>passable</span></a></h3><p><code>T</code></p><h3 id="next" tabindex="-1"><a class="header-anchor" href="#next"><span>next</span></a></h3>`,12)),a("p",null,[s(t,{to:"/api/pipeline/declarations/type-aliases/PipeExecutor.html"},{default:p(()=>e[0]||(e[0]=[a("code",null,"PipeExecutor",-1)])),_:1,__:[0]}),e[1]||(e[1]=n("<")),e[2]||(e[2]=a("code",null,"T",-1)),e[3]||(e[3]=n(", ")),e[4]||(e[4]=a("code",null,"R",-1)),e[5]||(e[5]=n(">"))]),e[11]||(e[11]=a("h3",{id:"params",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#params"},[a("span",null,"params")])],-1)),e[12]||(e[12]=a("p",null,[n("..."),a("code",null,"any"),n("[]")],-1)),e[13]||(e[13]=a("h2",{id:"returns",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#returns"},[a("span",null,"Returns")])],-1)),a("p",null,[s(t,{to:"/api/pipeline/declarations/type-aliases/Promiseable.html"},{default:p(()=>e[6]||(e[6]=[a("code",null,"Promiseable",-1)])),_:1,__:[6]}),e[7]||(e[7]=n("<")),e[8]||(e[8]=a("code",null,"R",-1)),e[9]||(e[9]=n(">"))])])}const h=o(c,[["render",m]]),f=JSON.parse('{"path":"/api/pipeline/declarations/type-aliases/FunctionalPipe.html","title":"Type Alias: FunctionalPipe()<T, R>","lang":"en-US","frontmatter":{"description":"Type Alias: FunctionalPipe()<T, R> A function type that represents a pipe. Type Parameters T T = unknown R R = T Parameters passable T next <T, R> params ...any[] Returns <R>","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type Alias: FunctionalPipe()<T, R>\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/pipeline/declarations/type-aliases/FunctionalPipe.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Type Alias: FunctionalPipe()<T, R>"}],["meta",{"property":"og:description","content":"Type Alias: FunctionalPipe()<T, R> A function type that represents a pipe. Type Parameters T T = unknown R R = T Parameters passable T next <T, R> params ...any[] Returns <R>"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.15,"words":45},"filePathRelative":"api/pipeline/declarations/type-aliases/FunctionalPipe.md","autoDesc":true}');export{h as comp,f as data};
