import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as o,e as c,w as a,r as u,o as d,a as n,d as s}from"./app-D3YQYQ8j.js";const k={};function m(v,e){const l=u("Tabs");return d(),r("div",null,[e[20]||(e[20]=o('<p>Events are a core building block in Stone.js, enabling modular and loosely coupled applications.<br> However, it is important to understand that <strong>not all events are the same</strong>.</p><p>Stone.js distinguishes between two major categories:</p><ul><li><p><strong>Incoming Events</strong>:<br> These events come from the external world, such as HTTP requests, WebSocket messages, or CLI commands.<br> They represent <em>intentions</em> from outside the system and are handled using <strong>Event Handlers</strong>, not listeners or subscribers.<br> To learn more about handling external events, refer to the <a href="./incoming-event"><code>IncomingEvent</code></a> and <a href="./event-handler"><code>Event Handlers</code></a> documentations.</p></li><li><p><strong>Internal Events</strong>:<br> These events are triggered <em>inside</em> your Stone.js application.<br> For example, when a route is matched, a <code>RouteEvent</code> is emitted internally. Internal events allow your modules to communicate, coordinate workflows, and react to changes without creating direct dependencies between them.</p></li></ul><p>This documentation focuses exclusively on <strong>Internal Events</strong>:<br> their structure, their behavior, and how you can listen, subscribe, and dispatch them within your application.</p><p>All internal events inherit from the core <code>Event</code> class, which provides a unified and simple API to:</p><ul><li>Store and retrieve structured metadata.</li><li>Identify the event type.</li><li>Track the event source and timestamp.</li></ul><p>By relying on a common internal event model, Stone.js reinforces the <strong>continuum principle</strong>:<br><strong>different modules, one coherent way to react to change.</strong></p><p>In the next sections, youâ€™ll learn how to define listeners, group subscriptions, and create your own custom events to build modular and powerful Stone.js applications.</p><h2 id="listeners" tabindex="-1"><a class="header-anchor" href="#listeners"><span>Listeners</span></a></h2><p>Listeners are the primary way to react to <strong>internal events</strong> in Stone.js. A listener waits for a specific event to occur and then executes its associated logic.</p><p>Listeners promote <strong>low coupling</strong> between parts of your system, the module that emits the event doesn&#39;t need to know who will react to it, it simply emits the event into the system.</p><p>Stone.js supports multiple ways to define listeners, giving you full flexibility depending on your needs.</p><h3 id="variants" tabindex="-1"><a class="header-anchor" href="#variants"><span>Variants</span></a></h3><p>You can define a listener using one of three shapes:</p><ul><li><strong>Class-based</strong> (recommended for declarative APIs and introspection)</li><li><strong>Function-based</strong> (ideal for quick scripts or nano apps)</li><li><strong>Factory-based</strong> (perfect when you need dependency injection via the container)</li></ul><p>Each variant gives you different tradeoffs between simplicity, structure, and flexibility.</p>',16)),c(l,{data:[{id:"Class-based"},{id:"Function-based"},{id:"Factory-based"}],active:0,"tab-id":"class-factory-function"},{title0:a(({value:t,isActive:i})=>e[0]||(e[0]=[s("Class-based")])),title1:a(({value:t,isActive:i})=>e[1]||(e[1]=[s("Function-based")])),title2:a(({value:t,isActive:i})=>e[2]||(e[2]=[s("Factory-based")])),tab0:a(({value:t,isActive:i})=>e[3]||(e[3]=[n("h4",{id:"class-based-listener",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-based-listener"},[n("span",null,"Class-based Listener")])],-1),n("p",null,[s("Class-based listeners are the preferred way in Stone.js, especially when using the declarative API."),n("br"),s(" They are introspectable by the system, easy to organize, and allow constructor-based dependency injection.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" ILogger "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" RouteEvent"),n("span",{class:"token punctuation"},","),s(" Route "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/router'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"LogMatchedRouteEventListener"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},[s("IEventListener"),n("span",{class:"token operator"},"<"),s("RouteEvent"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"readonly"),s(" logger"),n("span",{class:"token operator"},":"),s(" ILogger")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"construct"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" logger "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" logger"),n("span",{class:"token operator"},":"),s(" ILogger "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("logger "),n("span",{class:"token operator"},"="),s(" logger")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" RouteEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("logger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"get"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("Route"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'route'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("uri"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("ul",null,[n("li",null,[n("code",null,"construct"),s(" is used to inject services from the container.")]),n("li",null,[n("code",null,"handle"),s(" is automatically called when the event is dispatched.")])],-1)])),tab1:a(({value:t,isActive:i})=>e[4]||(e[4]=[n("h4",{id:"function-based-listener",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#function-based-listener"},[n("span",null,"Function-based Listener")])],-1),n("p",null,[s("Function-based listeners are simple functions."),n("br"),s(" They are a great choice when you want a lightweight listener without dependency injection.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"eventListener"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" RouteEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"get"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("Route"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'route'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("uri"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("ul",null,[n("li",null,"Functions are straightforward but have no automatic dependency injection."),n("li",null,"Use them for lightweight or one-off listeners.")],-1)])),tab2:a(({value:t,isActive:i})=>e[5]||(e[5]=[n("h4",{id:"factory-based-listener",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#factory-based-listener"},[n("span",null,"Factory-based Listener")])],-1),n("p",null,[s("Factory-based listeners are functions that "),n("strong",null,"return"),s(" the actual event handler."),n("br"),s(" This pattern allows you to inject dependencies manually, while keeping flexibility.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"eventListener"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" logger "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" logger"),n("span",{class:"token operator"},":"),s(" ILogger "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" RouteEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    logger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"get"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("Route"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'route'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("uri"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("ul",null,[n("li",null,"The first function receives injected services."),n("li",null,"It returns the real event handler that will be called when the event occurs."),n("li",null,"Factory-based listeners are especially powerful when you need dynamic setup per listener instance.")],-1)])),_:1}),e[21]||(e[21]=o('<h3 id="register" tabindex="-1"><a class="header-anchor" href="#register"><span>Register</span></a></h3><p>Once your listener is defined, you must <strong>register</strong> it so that Stone.js knows it should react to a specific event.</p><p>Stone.js offers two ways to register listeners:</p><ul><li><strong>Declarative API</strong>, using decorators (recommended for class-based modules)</li><li><strong>Imperative API</strong>, using blueprint utilities for manual control</li></ul><p>No matter which variant you choose (class, function, or factory), the registration process ensures your listeners are properly integrated at runtime.</p>',5)),c(l,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:a(({value:t,isActive:i})=>e[6]||(e[6]=[s("Declarative")])),title1:a(({value:t,isActive:i})=>e[7]||(e[7]=[s("Imperative")])),tab0:a(({value:t,isActive:i})=>e[8]||(e[8]=[n("h4",{id:"declarative-registration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative-registration"},[n("span",null,"Declarative Registration")])],-1),n("p",null,[s("When using a class-based listener, you can register it declaratively using the "),n("code",null,"@Listener"),s(" decorator.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Listener "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" RouteEvent "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/router'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Listener")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  event"),n("span",{class:"token operator"},":"),s(" RouteEvent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ROUTE_MATCHED")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"LogMatchedRouteEventListener"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},[s("IEventListener"),n("span",{class:"token operator"},"<"),s("RouteEvent"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("ul",null,[n("li",null,[n("code",null,"@Listener"),s(" associates your class with a specific event type.")]),n("li",null,"The listener will be automatically discovered and activated by the system during initialization.")],-1),n("p",null,"This is the cleanest and most continuum-aligned way to register listeners.",-1)])),tab1:a(({value:t,isActive:i})=>e[9]||(e[9]=[n("h4",{id:"imperative-registration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imperative-registration"},[n("span",null,"Imperative Registration")])],-1),n("p",null,[s("For more manual or dynamic control, you can register listeners imperatively using "),n("code",null,"defineBlueprintConfig"),s(" and "),n("code",null,"defineEventListener"),s(".")],-1),n("h5",{id:"function-based-example",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#function-based-example"},[n("span",null,"Function-based example")])],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" AppBlueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"defineEventListener"),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("    LogMatchedRouteEventListener"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    RouteEvent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ROUTE_MATCHED")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("ul",null,[n("li",null,"This method works for class-based or function-based listeners."),n("li",null,"You specify the listener and the event type manually.")],-1),n("h5",{id:"factory-based-example",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#factory-based-example"},[n("span",null,"Factory-based example")])],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" AppBlueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"defineEventListener"),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("    LogMatchedRouteEventListener"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    RouteEvent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ROUTE_MATCHED"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token boolean"},"true")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("ul",null,[n("li",null,[s("By passing "),n("code",null,"true"),s(" as the third parameter, you tell Stone.js to treat the listener as a factory.")]),n("li",null,"This enables manual dependency injection at runtime.")],-1)])),_:1}),e[22]||(e[22]=o('<h2 id="subscribers" tabindex="-1"><a class="header-anchor" href="#subscribers"><span>Subscribers</span></a></h2><p>While listeners handle a <strong>single event</strong>, subscribers allow you to <strong>subscribe to multiple events</strong> within the same module.</p><p>A subscriber receives the <code>EventEmitter</code> instance and can programmatically attach multiple event handlers inside a single <code>subscribe</code> method.<br> This pattern is especially useful when you need to manage several related events together.</p><p>Like listeners, subscribers in Stone.js can be defined in three variants.</p><h3 id="variants-1" tabindex="-1"><a class="header-anchor" href="#variants-1"><span>Variants</span></a></h3><p>You can define a subscriber using one of three shapes:</p><ul><li><strong>Class-based</strong> (recommended for declarative APIs and introspection)</li><li><strong>Function-based</strong> (ideal for quick scripts or nano apps)</li><li><strong>Factory-based</strong> (perfect when you need dependency injection via the container)</li></ul>',7)),c(l,{data:[{id:"Class-based"},{id:"Function-based"},{id:"Factory-based"}],active:0,"tab-id":"class-factory-function"},{title0:a(({value:t,isActive:i})=>e[10]||(e[10]=[s("Class-based")])),title1:a(({value:t,isActive:i})=>e[11]||(e[11]=[s("Function-based")])),title2:a(({value:t,isActive:i})=>e[12]||(e[12]=[s("Factory-based")])),tab0:a(({value:t,isActive:i})=>e[13]||(e[13]=[n("h4",{id:"class-based-subscriber",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-based-subscriber"},[n("span",null,"Class-based Subscriber")])],-1),n("p",null,"Class-based subscribers are ideal for maintaining structure and leveraging dependency injection.",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" RouteEvent"),n("span",{class:"token punctuation"},","),s(" Route "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/router'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" IEventSubscriber"),n("span",{class:"token punctuation"},","),s(" ILogger"),n("span",{class:"token punctuation"},","),s(" EventEmitter "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"RouteEventSubscriber"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"IEventSubscriber"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"readonly"),s(" logger"),n("span",{class:"token operator"},":"),s(" ILogger")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"construct"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" logger "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" logger"),n("span",{class:"token operator"},":"),s(" ILogger "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("logger "),n("span",{class:"token operator"},"="),s(" logger")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"subscribe"),n("span",{class:"token punctuation"},"("),s("eventEmitter"),n("span",{class:"token operator"},":"),s(" EventEmitter"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    eventEmitter"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"on"),n("span",{class:"token punctuation"},"("),s("RouteEvent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ROUTE_MATCHED"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" RouteEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("logger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"get"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("Route"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'route'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("uri"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("ul",null,[n("li",null,[n("code",null,"construct"),s(" injects dependencies.")]),n("li",null,[n("code",null,"subscribe"),s(" is called automatically, passing the "),n("code",null,"EventEmitter"),s(".")])],-1)])),tab1:a(({value:t,isActive:i})=>e[14]||(e[14]=[n("h4",{id:"function-based-subscriber",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#function-based-subscriber"},[n("span",null,"Function-based Subscriber")])],-1),n("p",null,[s("Function-based subscribers are simple functions that receive the "),n("code",null,"EventEmitter"),s(" directly.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"subscribe"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("eventEmitter"),n("span",{class:"token operator"},":"),s(" EventEmitter"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  eventEmitter"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"on"),n("span",{class:"token punctuation"},"("),s("RouteEvent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ROUTE_MATCHED"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" RouteEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"get"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("Route"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'route'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("uri"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("ul",null,[n("li",null,"Lightweight and quick to implement."),n("li",null,"No dependency injection, perfect for small tasks or nano apps.")],-1)])),tab2:a(({value:t,isActive:i})=>e[15]||(e[15]=[n("h4",{id:"factory-based-subscriber",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#factory-based-subscriber"},[n("span",null,"Factory-based Subscriber")])],-1),n("p",null,"Factory-based subscribers allow you to inject services before subscribing.",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"subscribe"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" logger "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" logger"),n("span",{class:"token operator"},":"),s(" ILogger "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),s("eventEmitter"),n("span",{class:"token operator"},":"),s(" EventEmitter"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  eventEmitter"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"on"),n("span",{class:"token punctuation"},"("),s("RouteEvent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ROUTE_MATCHED"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token operator"},":"),s(" RouteEvent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    logger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"get"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("Route"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'route'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("uri"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("ul",null,[n("li",null,"First function receives services."),n("li",null,[s("Second function receives the "),n("code",null,"EventEmitter"),s(".")]),n("li",null,"Very powerful when you need full control over dependencies.")],-1)])),_:1}),e[23]||(e[23]=o('<h3 id="register-1" tabindex="-1"><a class="header-anchor" href="#register-1"><span>Register</span></a></h3><p>After defining your subscriber, you need to <strong>register</strong> it so that Stone.js can activate it during the initialization process.</p><p>Stone.js provides two ways to register subscribers:</p><ul><li><strong>Declarative API</strong>, using decorators (recommended for class-based modules)</li><li><strong>Imperative API</strong>, using blueprint utilities for manual control</li></ul><p>Subscribers behave similarly to listeners during registration but are attached to the system at the subscription level rather than the individual event level.</p>',5)),c(l,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:a(({value:t,isActive:i})=>e[16]||(e[16]=[s("Declarative")])),title1:a(({value:t,isActive:i})=>e[17]||(e[17]=[s("Imperative")])),tab0:a(({value:t,isActive:i})=>e[18]||(e[18]=[n("h4",{id:"declarative-registration-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative-registration-1"},[n("span",null,"Declarative Registration")])],-1),n("p",null,[s("When using a class-based subscriber, you can register it declaratively using the "),n("code",null,"@Subscriber"),s(" decorator.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Subscriber"),n("span",{class:"token punctuation"},","),s(" IEventSubscriber "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Subscriber")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"RouteEventSubscriber"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"IEventSubscriber"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("ul",null,[n("li",null,[n("code",null,"@Subscriber()"),s(" marks the class as an event subscriber.")]),n("li",null,[s("The system will automatically instantiate it, inject its dependencies, and call its "),n("code",null,"subscribe"),s(" method with the "),n("code",null,"EventEmitter"),s(".")])],-1)])),tab1:a(({value:t,isActive:i})=>e[19]||(e[19]=[n("h4",{id:"imperative-registration-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imperative-registration-1"},[n("span",null,"Imperative Registration")])],-1),n("p",null,[s("If you prefer or need manual control, you can register subscribers imperatively using "),n("code",null,"defineBlueprintConfig"),s(" and "),n("code",null,"defineEventSubscriber"),s(".")],-1),n("h5",{id:"function-based-example-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#function-based-example-1"},[n("span",null,"Function-based example")])],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" AppBlueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"defineEventSubscriber"),n("span",{class:"token punctuation"},"("),s("RouteEventSubscriber"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("ul",null,[n("li",null,"Suitable for both class-based and function-based subscribers."),n("li",null,"Gives you full control over registration.")],-1),n("h5",{id:"factory-based-example-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#factory-based-example-1"},[n("span",null,"Factory-based example")])],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" AppBlueprint "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineBlueprintConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("blueprint"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"defineEventSubscriber"),n("span",{class:"token punctuation"},"("),s("RouteEventSubscriber"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("ul",null,[n("li",null,[s("Passing "),n("code",null,"true"),s(" tells Stone.js to treat the subscriber as a factory.")]),n("li",null,"Allows manual dependency injection for subscriber setup.")],-1)])),_:1}),e[24]||(e[24]=o(`<h2 id="custom-events" tabindex="-1"><a class="header-anchor" href="#custom-events"><span>Custom Events</span></a></h2><p>Stone.js doesn&#39;t limit you to built-in events. You can define your own <strong>custom events</strong> to propagate domain-specific changes inside your application, fully aligned with the internal event system.</p><p>Creating custom events allows your modules to communicate through clear, typed messages, without creating tight coupling between them.</p><h3 id="event-object" tabindex="-1"><a class="header-anchor" href="#event-object"><span>Event Object</span></a></h3><p>To define a custom event, you simply extend the core <code>Event</code> class provided by Stone.js.</p><p>Hereâ€™s a typical custom event:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Event <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * MyCustomEvent name.</span>
<span class="line">   *</span>
<span class="line">   * <span class="token keyword">@event</span> MyCustomEvent#MY_CUSTOM_EVENT</span>
<span class="line">   * <span class="token keyword">@returns</span> <span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token constant">MY_CUSTOM_EVENT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;MY_CUSTOM_EVENT&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * Create a MyCustomEvent.</span>
<span class="line">   *</span>
<span class="line">   * <span class="token keyword">@param</span> <span class="token parameter">metadata</span> - Event metadata.</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>metadata<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> MyCustomEvent<span class="token punctuation">.</span><span class="token constant">MY_CUSTOM_EVENT</span><span class="token punctuation">,</span> metadata <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Key points:</p><ul><li>You define a <strong>static getter</strong> (e.g., <code>MY_CUSTOM_EVENT</code>) to return the event type.</li><li>The event type must be a <strong>static constant</strong> to ensure compatibility with bundlers and minifiers, especially on the frontend.</li><li>You pass your event data into the event&#39;s <strong>metadata</strong> object when constructing it.</li></ul><h4 id="why-use-a-static-getter-for-the-event-type" tabindex="-1"><a class="header-anchor" href="#why-use-a-static-getter-for-the-event-type"><span>Why use a static getter for the event type?</span></a></h4><p>In frontend builds (or aggressive bundling scenarios), class names can be mangled or renamed.<br> Using a static string getter ensures that your event names remain <strong>stable</strong>, <strong>predictable</strong>, and <strong>safe</strong>, even after minification.</p><h3 id="listener" tabindex="-1"><a class="header-anchor" href="#listener"><span>Listener</span></a></h3><p>Listening to custom events works exactly the same way as for built-in internal events.<br> You simply define a listener and associate it with your custom event type.</p><p>Hereâ€™s a class-based listener example for <code>MyCustomEvent</code>:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> MyCustomEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./events/MyCustomEvent&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Listener<span class="token punctuation">,</span> IEventListener <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Listener</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  event<span class="token operator">:</span> MyCustomEvent<span class="token punctuation">.</span><span class="token constant">MY_CUSTOM_EVENT</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LogMyCustomEventListener</span> <span class="token keyword">implements</span> <span class="token class-name">IEventListener<span class="token operator">&lt;</span>MyCustomEvent<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> MyCustomEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>metadata<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>The <code>@Listener</code> decorator binds this class to the <code>MY_CUSTOM_EVENT</code> event type.</li><li>When <code>MyCustomEvent</code> is emitted, the <code>handle</code> method will be called automatically.</li><li>You can access the event data through the <code>metadata</code> object or use the <code>get()</code> method for deep path access.</li></ul><p>For example, if your metadata is structured:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  user<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    id<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can safely retrieve nested data like this:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> userId <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;user.id&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This approach ensures that even complex event payloads stay easy to navigate and type-safe.</p><h3 id="dispatcher" tabindex="-1"><a class="header-anchor" href="#dispatcher"><span>Dispatcher</span></a></h3><p>Once your custom event is defined, you need to <strong>dispatch</strong> it inside your application when the appropriate action occurs.</p><p>In Stone.js, event dispatching is done via the <code>EventEmitter</code>, which is available for dependency injection through the service container under the <code>events</code> and <code>eventEmitter</code> aliases.</p><p>Hereâ€™s how you dispatch a custom event:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Service <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> MyCustomEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./events/MyCustomEvent&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Service</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">readonly</span> events<span class="token operator">:</span> EventEmitter</span>
<span class="line"></span>
<span class="line">  <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">{</span> events <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> events<span class="token operator">:</span> EventEmitter <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> events</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">saveUser</span><span class="token punctuation">(</span>user<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCustomEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Key points:</p><ul><li>Inject the <code>EventEmitter</code> with the <code>events</code> alias, using the <code>construct</code> method.</li><li>Create an instance of your custom event, passing in the metadata (your data payload).</li><li>Emit the event using the <code>emit()</code> method.</li><li>Your data is wrapped, so you can access it through the <code>event.get(&#39;user&#39;)</code> method in the listener.</li></ul><h4 id="why-dispatch-custom-events" tabindex="-1"><a class="header-anchor" href="#why-dispatch-custom-events"><span>Why dispatch custom events?</span></a></h4><p>Dispatching custom events allows your system to stay modular:</p><ul><li>The module emitting the event doesn&#39;t need to know who will handle it.</li><li>Other parts of the application can subscribe and react without direct dependencies.</li><li>You make your application easier to extend, test, and maintain.</li></ul><h4 id="always-wrap-your-event-data" tabindex="-1"><a class="header-anchor" href="#always-wrap-your-event-data"><span>Always Wrap Your Event Data</span></a></h4><p>When creating a custom event, <strong>always wrap your payload inside a key</strong>.</p><p>Since the <code>metadata</code> property must always be an object, it is important to define a structured key when passing your event data.<br> For example, instead of passing the object directly:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">new</span> <span class="token class-name">MyCustomEvent</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You should wrap it like this:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">new</span> <span class="token class-name">MyCustomEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This practice offers several advantages:</p><ul><li><p>You can easily retrieve the user with:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>You avoid ambiguity if you later expand the event payload.</p></li><li><p>You maintain a consistent event structure across your application.</p></li></ul><p>Also, remember:</p><ul><li><p>You <strong>cannot inject primitive values</strong> (like a string, number, or boolean) directly into the event metadata.<br> You must always wrap them:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">new</span> <span class="token class-name">MyCustomEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Stone&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>Following this wrapping convention guarantees a predictable, safe, and continuum-aligned event model.</p><p>Stone.js strongly recommends <strong>always wrapping your event data inside a named object key</strong> at the creation phase.</p><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>When working with internal events in Stone.js, following a few simple best practices will help you keep your system clean, modular, and future-proof.</p><h4 id="listeners-1" tabindex="-1"><a class="header-anchor" href="#listeners-1"><span>Listeners</span></a></h4><ul><li><p><strong>Use factory-based listeners</strong> only when you need dynamic dependencies injected at runtime.</p></li><li><p><strong>Keep listener methods small and focused</strong>.<br> Each listener should handle only one clear responsibility per event.</p></li><li><p><strong>Avoid side effects</strong> inside listeners.<br> If needed, emit new events rather than chaining direct method calls between modules.</p></li><li><p><strong>Return early when necessary</strong>.<br> If a listener must ignore certain events based on conditions, check quickly and exit.</p></li></ul><h4 id="subscribers-1" tabindex="-1"><a class="header-anchor" href="#subscribers-1"><span>Subscribers</span></a></h4><ul><li><p><strong>Use subscribers when handling multiple related events</strong> together.<br> It keeps your blueprint clean and groups logic by business concern.</p></li><li><p><strong>Keep subscription setup simple and readable</strong>.<br> Prefer chaining a few related <code>on</code> calls rather than mixing unrelated events in the same subscriber.</p></li><li><p><strong>Inject dependencies cleanly</strong>.<br> Always prefer injecting services via <code>construct</code>, even in subscribers, instead of fetching manually inside the <code>subscribe</code> method.</p></li></ul><h4 id="custom-events-1" tabindex="-1"><a class="header-anchor" href="#custom-events-1"><span>Custom Events</span></a></h4><ul><li><p><strong>Always define your event type as a static getter</strong>.<br> Never rely on class names directly, use constants to guarantee stability after bundling and minification.</p></li><li><p><strong>Design metadata explicitly</strong>.<br> Keep your event payloads small, predictable, and documented.</p></li><li><p><strong>Use the <code>get()</code> method</strong> for safe, deep retrieval of nested metadata properties.</p></li><li><p><strong>Always wrap your event data with a key</strong> when creating custom events.<br> Never pass raw objects or primitives directly; always use a structured key, like <code>new MyCustomEvent({ user })</code>.<br> This keeps your metadata consistent, predictable, and easy to access via <code>event.get()</code>.</p></li><li><p><strong>Clone events if necessary</strong>.<br> If a module needs to modify an event without affecting the original, use the <code>clone()</code> method.</p></li><li><p><strong>Dispatch events instead of tight coupling</strong>.<br> Instead of calling other modules directly, emit events to express changes and let other parts of your system react appropriately.</p></li></ul><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>In Stone.js, internal events are the backbone of modular, decoupled application design.<br> They allow different parts of your system to <strong>react to changes</strong> without creating tight dependencies.</p><ul><li><strong>Listeners</strong> are used to handle a single event at a time.</li><li><strong>Subscribers</strong> allow you to organize multiple related event reactions inside one module.</li><li><strong>Custom Events</strong> enable you to define your own domain-specific events and propagate structured data across your system.</li></ul><p>Listeners and subscribers can be defined using classes, functions, or factories, giving you full flexibility depending on your application&#39;s size and needs.<br> Class-based (declarative) patterns are preferred for introspection, clarity, and maintainability.</p><p>Every internal event is an instance of the <code>Event</code> class, ensuring a consistent API for accessing metadata, event type, and origin.</p><p>By following Stone.jsâ€™s event system best practices, you can create applications that are highly modular, adaptable, and aligned with the <strong>Continuum Architecture</strong> philosophy:<br><strong>same principles, everywhere, all the time.</strong></p>`,57))])}const h=p(k,[["render",m]]),y=JSON.parse('{"path":"/docs/essentials/events.html","title":"Events","lang":"en-US","frontmatter":{"title":"Events","description":"Events are a core building block in Stone.js, enabling modular and loosely coupled applications. However, it is important to understand that not all events are the same. Stone.j...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Events\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/docs/essentials/events.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Events"}],["meta",{"property":"og:description","content":"Events are a core building block in Stone.js, enabling modular and loosely coupled applications. However, it is important to understand that not all events are the same. Stone.j..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":8.15,"words":2444},"filePathRelative":"docs/essentials/events.md","autoDesc":true}');export{h as comp,y as data};
