import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-C80Pz9_H.js";const i={};function p(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<p><strong>Service Container Documentation v0.0.44</strong></p><hr><h1 id="stone-js-service-container" tabindex="-1"><a class="header-anchor" href="#stone-js-service-container"><span>Stone.js: Service Container</span></a></h1><p><a href="https://opensource.org/licenses/Apache-2.0" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/l/@stone-js/service-container" alt="npm" loading="lazy"></a><a href="https://www.npmjs.com/package/@stone-js/service-container" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/@stone-js/service-container" alt="npm" loading="lazy"></a><a href="https://www.npmjs.com/package/@stone-js/service-container" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/dm/@stone-js/service-container" alt="npm" loading="lazy"></a><img src="https://img.shields.io/maintenance/yes/2025" alt="Maintenance" loading="lazy"><a href="https://github.com/stonemjs/service-container/actions/workflows/release.yml" target="_blank" rel="noopener noreferrer"><img src="https://github.com/stonemjs/service-container/actions/workflows/release.yml/badge.svg" alt="Publish Package to npmjs" loading="lazy"></a><a href="https://conventionalcommits.org" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/Conventional Commits-1.0.0-yellow.svg" alt="Conventional Commits" loading="lazy"></a></p><p>IoC Service Container with proposal decorator, proxy resolver and destructuring injection provides a very simple, centralized container that stores and resolves libraries, objects, and values to better organize code, manage dependencies, and enhance testability.</p><hr><h2 id="synopsis" tabindex="-1"><a class="header-anchor" href="#synopsis"><span>Synopsis</span></a></h2><p>The <strong>Service Container</strong> is an advanced JavaScript/TypeScript library that helps you manage dependencies effectively in your applications. It utilizes the Inversion of Control (IoC) pattern to simplify dependency injection, allowing you to create highly decoupled and maintainable codebases.</p><p>By using Dependency Injection (DI), the service container ensures that objects are provided with their dependencies from an external source, rather than creating them internally. This approach improves testability, minimizes code duplication, and promotes the Single Responsibility Principle by allowing objects to focus only on their primary functions.</p><p>In addition to DI, the <strong>Service Container</strong> implements the Proxy pattern, which lets you access dependencies as properties of the container itself. This feature, combined with destructuring, enables a streamlined approach to dependency injection, making it easy to use dependencies without the need for extra boilerplate code.</p><p>With the <strong>Service Container</strong>, you can easily register, resolve, and manage dependencies, making it suitable for projects of any scale. It supports binding instances, singletons, and factories, as well as providing auto and conditional binding options. This flexibility makes your application more modular, scalable, and maintainable, while ensuring efficient dependency management throughout the development process.</p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><p>The <code>Service Container</code> library is available from the <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer"><code>npm registry</code></a> and can be installed as follows:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> i @stone-js/service-container</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Yarn:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">yarn</span> <span class="token function">add</span> @stone-js/service-container</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>PNPM:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">pnpm</span> <span class="token function">add</span> @stone-js/service-container</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>[!NOTE] This package is Pure ESM. If you are unfamiliar with what that means or how to handle it in your project, please refer to <a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c" target="_blank" rel="noopener noreferrer"><code>this guide on Pure ESM packages</code></a>.</p></blockquote><p>Make sure your project setup is compatible with ESM. This might involve updating your <code>package.json</code> or using certain bundler configurations.</p><p>The <code>Service Container</code> module can only be imported via ESM import syntax:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Container <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/service-container&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started"><span>Getting Started</span></a></h2><p>To get started with the <code>Service Container</code>, you need to import the <code>Container</code> class and create an instance of it. This instance will act as the central registry for all your dependencies in your application.</p><p>Let&#39;s begin with a simple example to discover the power of the service container by logging a message.</p><h3 id="_1-create-the-logger-class" tabindex="-1"><a class="header-anchor" href="#_1-create-the-logger-class"><span>1. Create the <code>Logger</code> Class</span></a></h3><p>First, create a simple <code>Logger</code> class to log messages:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Your Logger class</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">log</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-create-the-class-that-provides-the-message" tabindex="-1"><a class="header-anchor" href="#_2-create-the-class-that-provides-the-message"><span>2. Create the Class that Provides the Message</span></a></h3><p>Next, create a class <code>A</code> that provides a message to be logged:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Your class A</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-create-the-class-that-logs-the-message-using-the-logger" tabindex="-1"><a class="header-anchor" href="#_3-create-the-class-that-logs-the-message-using-the-logger"><span>3. Create the Class that Logs the Message Using the Logger</span></a></h3><p>Now, create a class <code>B</code> that depends on <code>Logger</code> and <code>A</code> to log the message:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Binding <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/service-container&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Your class B</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">readonly</span> a<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">readonly</span> logger<span class="token operator">:</span> Logger<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span> logger <span class="token punctuation">}</span><span class="token operator">:</span> Binding<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token operator">|</span> Logger<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Dependency injection by destructuring</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a <span class="token keyword">as</span> <span class="token constant">A</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>logger <span class="token operator">=</span> logger <span class="token keyword">as</span> Logger<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-use-the-container-to-manage-dependencies" tabindex="-1"><a class="header-anchor" href="#_4-use-the-container-to-manage-dependencies"><span>4. Use the Container to Manage Dependencies</span></a></h3><p>Finally, create an instance of the <code>Container</code> class and use it to manage these dependencies:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Container <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/service-container&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a container instance</span></span>
<span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Auto-register components</span></span>
<span class="line">container</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">autoBinding</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">autoBinding</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">autoBinding</span><span class="token punctuation">(</span>Logger<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span>Logger<span class="token punctuation">,</span> <span class="token string">&#39;logger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Make B instance</span></span>
<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Call logMessage method</span></span>
<span class="line">b<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: Hello World!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this guide, we covered how to define and register dependencies using the <code>Container</code> class, and how to leverage dependency injection through destructuring and the Proxy pattern.</p><p>By following these steps, you can effectively manage dependencies in your applications, making them more modular, testable, and maintainable.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><p>The true power of Stone Service Container lies in its ability to simplify and enhance the management of dependencies within your application. By leveraging the Inversion of Control (IoC) and Proxy patterns, the library offers a highly flexible and intuitive way to bind, resolve, and inject dependencies. Whether you&#39;re working with simple instances, complex singletons, or dynamic factories, the Service Container provides a robust foundation for building scalable and maintainable applications.</p><h3 id="binding" tabindex="-1"><a class="header-anchor" href="#binding"><span>Binding</span></a></h3><p>You can bind instances, singletons, and factories to the container using various methods provided by the <code>Container</code> class.</p><h4 id="instance" tabindex="-1"><a class="header-anchor" href="#instance"><span>Instance</span></a></h4><p>To bind a single instance or value to the container:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Bind value</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> apiUrl<span class="token operator">:</span> <span class="token string">&#39;https://api.example.com&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Bind instance</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token string">&#39;ApiUrl&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="singleton" tabindex="-1"><a class="header-anchor" href="#singleton"><span>Singleton</span></a></h4><p>To bind a resolver function that returns a singleton instance:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Bind a singleton using a resolver function</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Resolve the singleton (same instance every time)</span></span>
<span class="line"><span class="token keyword">const</span> logger1 <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> logger2 <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>logger1 <span class="token operator">===</span> logger2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Should output: true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="factory" tabindex="-1"><a class="header-anchor" href="#factory"><span>Factory</span></a></h4><p>To bind a resolver function that returns a new instance each time:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// To bind a resolver function that returns a new instance each time</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">binding</span><span class="token punctuation">(</span><span class="token string">&#39;userService&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="auto-binding" tabindex="-1"><a class="header-anchor" href="#auto-binding"><span>Auto Binding</span></a></h3><p>The <code>autoBinding</code> method in the service container simplifies the process of binding dependencies by ensuring they are only bound if not already present in the container. This method can be used implicitly or explicitly, providing flexibility in how dependencies are registered and resolved.</p><h4 id="implicit-auto-binding" tabindex="-1"><a class="header-anchor" href="#implicit-auto-binding"><span>Implicit Auto Binding</span></a></h4><p>Implicit auto binding allows you to automatically register and bind a class to the container using the class&#39;s own name. This approach simplifies dependency management by using the class name as the key for resolution.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Auto binding Logger</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">autoBinding</span><span class="token punctuation">(</span>Logger<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Resolve Logger (it will be registered implicitly if not found)</span></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&#39;Logger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prefer to use a string key for clarity.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="explicit-auto-binding" tabindex="-1"><a class="header-anchor" href="#explicit-auto-binding"><span>Explicit Auto Binding</span></a></h4><p>Explicit auto binding allows you to register and bind a class to the container with a specified key, as a singleton or factory, and with optional aliases. This method offers greater flexibility in naming and accessing dependencies.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Auto binding Logger with specified key and aliases</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">autoBinding</span><span class="token punctuation">(</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">,</span> Logger<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;logging&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;log&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Resolve Logger using different aliases</span></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> loggerByAlias <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&#39;logging&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="conditional-binding" tabindex="-1"><a class="header-anchor" href="#conditional-binding"><span>Conditional Binding</span></a></h3><p>You can bind instances, singletons, and factories to the container conditionally using various methods provided by the <code>Container</code> class.</p><h4 id="instance-1" tabindex="-1"><a class="header-anchor" href="#instance-1"><span>Instance</span></a></h4><p>To bind a single instance or value to the container, if it is not already bound:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Bind value conditionally</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">instanceIf</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> apiUrl<span class="token operator">:</span> <span class="token string">&#39;https://api.example.com&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Bind instance conditionally</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">instanceIf</span><span class="token punctuation">(</span><span class="token string">&#39;ApiUrl&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="singleton-1" tabindex="-1"><a class="header-anchor" href="#singleton-1"><span>Singleton</span></a></h4><p>To bind a resolver function that returns a singleton instance, if it is not already bound:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">container<span class="token punctuation">.</span><span class="token function">singletonIf</span><span class="token punctuation">(</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="factory-1" tabindex="-1"><a class="header-anchor" href="#factory-1"><span>Factory</span></a></h4><p>To bind a resolver function that returns a new instance each time, if it is not already bound:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">container<span class="token punctuation">.</span><span class="token function">bindingIf</span><span class="token punctuation">(</span><span class="token string">&#39;userService&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="resolving-dependencies" tabindex="-1"><a class="header-anchor" href="#resolving-dependencies"><span>Resolving Dependencies</span></a></h3><p>You can resolve dependencies from the container using the <code>make</code> method:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userService <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&#39;userService&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="on-demand-resolving" tabindex="-1"><a class="header-anchor" href="#on-demand-resolving"><span>On-Demand Resolving</span></a></h3><p>This method provides a convenient way to resolve a value from the container by its key and return it wrapped in a factory function. This approach is useful when you need to create multiple instances of a dependency on demand.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Get the logger factory function</span></span>
<span class="line"><span class="token keyword">const</span> loggerFactory <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Resolve logger on demand</span></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">loggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="conditional-resolving" tabindex="-1"><a class="header-anchor" href="#conditional-resolving"><span>Conditional Resolving</span></a></h3><p>This method checks if the dependency is already bound in the container. If it is, the dependency is resolved. If not, the method binds the dependency and then resolves it. This ensures that dependencies are always available when needed, without redundant bindings.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Assuming Logger is a class that we want to ensure is bound and resolved</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;Logger&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Resolve the logger instance</span></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&#39;Logger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-aliases" tabindex="-1"><a class="header-anchor" href="#using-aliases"><span>Using Aliases</span></a></h3><p>Aliases allow you to reference bindings by alternative names.</p><h4 id="setting-aliases" tabindex="-1"><a class="header-anchor" href="#setting-aliases"><span>Setting Aliases</span></a></h4><p>To set an alias for a binding:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Set an alias for Logger</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span>Logger<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;logging&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;log&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="retrieving-aliases" tabindex="-1"><a class="header-anchor" href="#retrieving-aliases"><span>Retrieving Aliases</span></a></h4><p>To retrieve a binding by its alias:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&#39;logging&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="checking-bindings" tabindex="-1"><a class="header-anchor" href="#checking-bindings"><span>Checking Bindings</span></a></h3><p>You can check if a binding or alias exists in the container:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// With bound method</span></span>
<span class="line"><span class="token keyword">const</span> hasLogger <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span>Logger<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Can be used with alias</span></span>
<span class="line"><span class="token keyword">const</span> hasLoggerAlias <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span><span class="token string">&#39;logging&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// An alias of bound method</span></span>
<span class="line"><span class="token keyword">const</span> hasLoggerAliasUsingHas <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>Logger<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Check if this alias exists</span></span>
<span class="line"><span class="token keyword">const</span> isAlias <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">isAlias</span><span class="token punctuation">(</span><span class="token string">&#39;logging&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clearing-the-container" tabindex="-1"><a class="header-anchor" href="#clearing-the-container"><span>Clearing the Container</span></a></h3><p>To remove all bindings and reset the container:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Clear all bindings and aliases</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>With this library, managing dependencies in your application becomes much simpler and more efficient. By adhering to the principles of Inversion of Control and Dependency Injection, you can create more modular, testable, and maintainable code.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>The Stone Service Container simplifies dependency management in your applications, making them more modular, testable, and maintainable. It provides tools for binding instances, singletons, and factories, as well as auto and conditional binding. By leveraging Inversion of Control and dependency injection, the service container ensures efficient, flexible, and scalable management of dependencies, fitting projects of any size.</p><h2 id="api-documentation" tabindex="-1"><a class="header-anchor" href="#api-documentation"><span>API documentation</span></a></h2><ul><li><a href="https://github.com/stonemjs/service-container/blob/main/docs/modules.md" target="_blank" rel="noopener noreferrer">API</a></li></ul><h2 id="contributing" tabindex="-1"><a class="header-anchor" href="#contributing"><span>Contributing</span></a></h2><p>See <a href="https://github.com/stonemjs/service-container/blob/main/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contributing Guide</a>.</p><h2 id="credits" tabindex="-1"><a class="header-anchor" href="#credits"><span>Credits</span></a></h2><ul><li><a href="https://github.com/illuminate/container" target="_blank" rel="noopener noreferrer">Laravel Service Container</a></li><li><a href="https://github.com/halliganjs/service-container" target="_blank" rel="noopener noreferrer">Halligan JS: Service Container</a></li></ul>`,103)]))}const r=s(i,[["render",p]]),u=JSON.parse('{"path":"/api/service-container/","title":"Stone.js: Service Container","lang":"en-US","frontmatter":{"description":"Service Container Documentation v0.0.44 Stone.js: Service Container npm npm npm Maintenance Publish Package to npmjs Conventional Commits IoC Service Container with proposal dec...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Stone.js: Service Container\\",\\"image\\":[\\"https://img.shields.io/npm/l/@stone-js/service-container\\",\\"https://img.shields.io/npm/v/@stone-js/service-container\\",\\"https://img.shields.io/npm/dm/@stone-js/service-container\\",\\"https://img.shields.io/maintenance/yes/2025\\",\\"https://github.com/stonemjs/service-container/actions/workflows/release.yml/badge.svg\\",\\"https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/api/service-container/"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Stone.js: Service Container"}],["meta",{"property":"og:description","content":"Service Container Documentation v0.0.44 Stone.js: Service Container npm npm npm Maintenance Publish Package to npmjs Conventional Commits IoC Service Container with proposal dec..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.shields.io/npm/l/@stone-js/service-container"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":5.29,"words":1588},"filePathRelative":"api/service-container/README.md","autoDesc":true}');export{r as comp,u as data};
