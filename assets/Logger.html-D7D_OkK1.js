import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as s,a as e,e as t,w as r,r as i,o as c}from"./app-CIBZQWs4.js";const l={};function d(h,a){const n=i("RouteLink");return c(),o("div",null,[a[2]||(a[2]=s(`<h1 id="class-logger" tabindex="-1"><a class="header-anchor" href="#class-logger"><span>Class: Logger</span></a></h1><p>Class representing a Logger for the Stone.js framework.</p><p>Any class that implements the ILogger interface can be used as a logger. The Logger class provides static methods for logging messages at different levels (info, debug, warn, error).</p><h2 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Logger<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>Logger</code></p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h2><h3 id="debug" tabindex="-1"><a class="header-anchor" href="#debug"><span>debug()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">static</span> <span class="token function">debug</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Logs debug-level messages, used for debugging purposes.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><h5 id="message" tabindex="-1"><a class="header-anchor" href="#message"><span>message</span></a></h5><p><code>string</code></p><p>The message to log.</p><h5 id="optionalparams" tabindex="-1"><a class="header-anchor" href="#optionalparams"><span>optionalParams</span></a></h5><p>...<code>unknown</code>[]</p><p>Optional parameters to log.</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>void</code></p><hr><h3 id="error" tabindex="-1"><a class="header-anchor" href="#error"><span>error()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">static</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Logs errors, used to report errors or exceptions.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><h5 id="message-1" tabindex="-1"><a class="header-anchor" href="#message-1"><span>message</span></a></h5><p><code>string</code></p><p>The error message to log.</p><h5 id="optionalparams-1" tabindex="-1"><a class="header-anchor" href="#optionalparams-1"><span>optionalParams</span></a></h5><p>...<code>unknown</code>[]</p><p>Optional parameters to log.</p><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2"><span>Returns</span></a></h4><p><code>void</code></p><hr><h3 id="getinstance" tabindex="-1"><a class="header-anchor" href="#getinstance"><span>getInstance()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ILogger<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns the current logger instance.</p><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3"><span>Returns</span></a></h4>`,39)),e("p",null,[t(n,{to:"/api/core/declarations/interfaces/ILogger.html"},{default:r(()=>a[0]||(a[0]=[e("code",null,"ILogger",-1)])),_:1,__:[0]})]),a[3]||(a[3]=s(`<ul><li>The current logger instance.</li></ul><hr><h3 id="info" tabindex="-1"><a class="header-anchor" href="#info"><span>info()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">static</span> <span class="token function">info</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Logs informational messages.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h4><h5 id="message-2" tabindex="-1"><a class="header-anchor" href="#message-2"><span>message</span></a></h5><p><code>string</code></p><p>The message to log.</p><h5 id="optionalparams-2" tabindex="-1"><a class="header-anchor" href="#optionalparams-2"><span>optionalParams</span></a></h5><p>...<code>unknown</code>[]</p><p>Optional parameters to log.</p><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4"><span>Returns</span></a></h4><p><code>void</code></p><hr><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>init()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">static</span> <span class="token function">init</span><span class="token punctuation">(</span>blueprint<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Initializes the logger instance.</p><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3"><span>Parameters</span></a></h4><h5 id="blueprint" tabindex="-1"><a class="header-anchor" href="#blueprint"><span>blueprint</span></a></h5>`,20)),e("p",null,[t(n,{to:"/api/core/declarations/type-aliases/IBlueprint.html"},{default:r(()=>a[1]||(a[1]=[e("code",null,"IBlueprint",-1)])),_:1,__:[1]})]),a[4]||(a[4]=s(`<p>The blueprint to initialize the logger with.</p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5"><span>Returns</span></a></h4><p><code>void</code></p><hr><h3 id="log" tabindex="-1"><a class="header-anchor" href="#log"><span>log()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">static</span> <span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Logs general messages, similar to <code>info</code> but less specific.</p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4"><span>Parameters</span></a></h4><h5 id="message-3" tabindex="-1"><a class="header-anchor" href="#message-3"><span>message</span></a></h5><p><code>string</code></p><p>The message to log.</p><h5 id="optionalparams-3" tabindex="-1"><a class="header-anchor" href="#optionalparams-3"><span>optionalParams</span></a></h5><p>...<code>unknown</code>[]</p><p>Optional parameters to log.</p><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6"><span>Returns</span></a></h4><p><code>void</code></p><hr><h3 id="warn" tabindex="-1"><a class="header-anchor" href="#warn"><span>warn()</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">static</span> <span class="token function">warn</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Logs warnings, used to indicate potential issues.</p><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5"><span>Parameters</span></a></h4><h5 id="message-4" tabindex="-1"><a class="header-anchor" href="#message-4"><span>message</span></a></h5><p><code>string</code></p><p>The warning message to log.</p><h5 id="optionalparams-4" tabindex="-1"><a class="header-anchor" href="#optionalparams-4"><span>optionalParams</span></a></h5><p>...<code>unknown</code>[]</p><p>Optional parameters to log.</p><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7"><span>Returns</span></a></h4><p><code>void</code></p>`,29))])}const m=p(l,[["render",d]]),k=JSON.parse('{"path":"/api/core/logger/Logger/classes/Logger.html","title":"Class: Logger","lang":"en-US","frontmatter":{"description":"Class: Logger Class representing a Logger for the Stone.js framework. Any class that implements the ILogger interface can be used as a logger. The Logger class provides static m...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Class: Logger\\",\\"image\\":[\\"/logo.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/core/logger/Logger/classes/Logger.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Class: Logger"}],["meta",{"property":"og:description","content":"Class: Logger Class representing a Logger for the Stone.js framework. Any class that implements the ILogger interface can be used as a logger. The Logger class provides static m..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.81,"words":242},"filePathRelative":"api/core/logger/Logger/classes/Logger.md","autoDesc":true}');export{m as comp,k as data};
