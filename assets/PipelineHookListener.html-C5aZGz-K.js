import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as i,a as n,e as s,d as t,w as o,r as l,o as d}from"./app-BJyWHIWB.js";const c={};function m(u,e){const a=l("RouteLink");return d(),p("div",null,[e[12]||(e[12]=i(`<h1 id="type-alias-pipelinehooklistener-t-r-args" tabindex="-1"><a class="header-anchor" href="#type-alias-pipelinehooklistener-t-r-args"><span>Type Alias: PipelineHookListener()&lt;T, R, Args&gt;</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">PipelineHookListener<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">,</span> Args<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promiseable<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>PipelineHookListener Type.</p><p>Represents a listener hook that can either be synchronous or asynchronous.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> = <code>unknown</code></p><h3 id="r" tabindex="-1"><a class="header-anchor" href="#r"><span>R</span></a></h3><p><code>R</code> = <code>T</code></p><h3 id="args" tabindex="-1"><a class="header-anchor" href="#args"><span>Args</span></a></h3><p><code>Args</code> <em>extends</em> <code>any</code>[] = <code>any</code>[]</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>context</span></a></h3>`,13)),n("p",null,[s(a,{to:"/api/pipeline/declarations/interfaces/PipelineHookContext.html"},{default:o(()=>e[0]||(e[0]=[n("code",null,"PipelineHookContext",-1)])),_:1,__:[0]}),e[1]||(e[1]=t("<")),e[2]||(e[2]=n("code",null,"T",-1)),e[3]||(e[3]=t(", ")),e[4]||(e[4]=n("code",null,"R",-1)),e[5]||(e[5]=t(", ")),e[6]||(e[6]=n("code",null,"Args",-1)),e[7]||(e[7]=t(">"))]),e[13]||(e[13]=n("h2",{id:"returns",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#returns"},[n("span",null,"Returns")])],-1)),n("p",null,[s(a,{to:"/api/pipeline/declarations/type-aliases/Promiseable.html"},{default:o(()=>e[8]||(e[8]=[n("code",null,"Promiseable",-1)])),_:1,__:[8]}),e[9]||(e[9]=t("<")),e[10]||(e[10]=n("code",null,"void",-1)),e[11]||(e[11]=t(">"))])])}const k=r(c,[["render",m]]),g=JSON.parse('{"path":"/api/pipeline/declarations/type-aliases/PipelineHookListener.html","title":"Type Alias: PipelineHookListener()<T, R, Args>","lang":"en-US","frontmatter":{"description":"Type Alias: PipelineHookListener()<T, R, Args> PipelineHookListener Type. Represents a listener hook that can either be synchronous or asynchronous. Type Parameters T T = unknow...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type Alias: PipelineHookListener()<T, R, Args>\\",\\"image\\":[\\"/logo_square.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/pipeline/declarations/type-aliases/PipelineHookListener.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Type Alias: PipelineHookListener()<T, R, Args>"}],["meta",{"property":"og:description","content":"Type Alias: PipelineHookListener()<T, R, Args> PipelineHookListener Type. Represents a listener hook that can either be synchronous or asynchronous. Type Parameters T T = unknow..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo_square.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.17,"words":52},"filePathRelative":"api/pipeline/declarations/type-aliases/PipelineHookListener.md","autoDesc":true}');export{k as comp,g as data};
