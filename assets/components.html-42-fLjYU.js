import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-7vCtLRjQ.js";const o={};function p(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<p>In Stone.js, components are <strong>100% React</strong>.</p><p>They are not wrapped, extended, abstracted, or intercepted by the framework. You write them the same way you would in any standalone React project, with hooks, props, state, refs, and whatever libraries you choose.</p><div class="hint-container important"><p class="hint-container-title">Not a limitation</p><p>That’s not a limitation. It’s a design decision, a deliberate boundary drawn by the Continuum Architecture.</p></div><p>Stone.js handles the <strong>functional dimension</strong> of your app: routing, lifecycle, service injection, SSR orchestration, hydration, error handling, and system context. React handles the <strong>view dimension</strong>: rendering, DOM interaction, local state, event delegation, animations, component logic, and user input. Your components live entirely in the view dimension.</p><p>Stone.js never touches them. And that’s exactly why they remain:</p><ul><li>Clean</li><li>Portable</li><li>Reusable</li><li>Easy to test</li><li>Framework-agnostic</li></ul><p>This separation of responsibility means:</p><ul><li>You can use your components in another React app without changes</li><li>You can structure your view layer freely</li><li>You’re never forced into a framework-specific component syntax or lifecycle</li></ul><div class="hint-container info"><p class="hint-container-title">Clean and free.</p><p>If a page is the bridge between system and interface, a component is pure interface, clean and free.</p></div><h3 id="components-stay-framework-free" tabindex="-1"><a class="header-anchor" href="#components-stay-framework-free"><span>Components stay framework-free</span></a></h3><p>Once a page returns a React tree, Stone.js exits the stage. From that point forward, your components are fully in React’s hands, and only React’s.</p><p>This means your components:</p><ul><li>Are never wrapped or intercepted</li><li>Aren’t injected with magic props or decorators</li><li>Stay portable and testable across any project</li></ul><div class="hint-container tip"><p class="hint-container-title">Fact</p><p>Stone.js governs <strong>context</strong>, not rendering. React governs rendering, not <strong>context</strong>.</p></div><p>By keeping your components cleanly outside the system boundary, you get the best of both worlds: <strong>architectural orchestration without UI coupling.</strong></p><h2 id="file-and-folder-structure" tabindex="-1"><a class="header-anchor" href="#file-and-folder-structure"><span>File and Folder Structure</span></a></h2><p>Stone.js doesn’t impose a folder layout. But it encourages a clear architectural separation between:</p><ul><li>Pages → operate in the <strong>functional dimension</strong></li><li>Components → operate in the <strong>view dimension</strong></li></ul><p>This keeps your application modular, testable, and future-proof.</p><h3 id="suggested-structure" tabindex="-1"><a class="header-anchor" href="#suggested-structure"><span>Suggested structure</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">app/</span>
<span class="line">├── components/         <span class="token comment"># React-only components</span></span>
<span class="line">│   ├── Button/</span>
<span class="line">│   │   ├── Button.tsx</span>
<span class="line">│   │   └── Button.css</span>
<span class="line">│   └── LoginForm/</span>
<span class="line">│       ├── LoginForm.tsx</span>
<span class="line">│       └── LoginForm.css</span>
<span class="line">├── pages/              <span class="token comment"># Stone.js pages (handlers)</span></span>
<span class="line">│   ├── LoginPage.tsx</span>
<span class="line">│   └── HomePage.tsx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Fact</p><p>Components are pure React.<br> Pages are where Stone.js meets React.</p></div><h3 id="what-goes-in-a-component" tabindex="-1"><a class="header-anchor" href="#what-goes-in-a-component"><span>What goes in a component?</span></a></h3><p>Anything that is:</p><ul><li>Reusable UI</li><li>Stateless or local-stateful</li><li>Declarative</li><li>React-specific (hooks, effects, JSX)</li></ul><p>✅ Yes:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="app/components/ProfileCard/ProfileCard.tsx"><span>app/components/ProfileCard/ProfileCard.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">ProfileCard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Welcome, </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>❌ No:</p><ul><li>Avoid resolving services here</li><li>Avoid accessing <code>event</code> or system context directly</li><li>Don’t handle app-level logic inside components</li></ul><p>Let the page do that.</p><h3 id="what-goes-in-a-page" tabindex="-1"><a class="header-anchor" href="#what-goes-in-a-page"><span>What goes in a page?</span></a></h3><p>A page is a <strong>Stone.js handler</strong>. It:</p><ul><li>Handles the incoming event</li><li>Fetches data via services</li><li>Manages redirection, errors, and context</li><li>Renders your components</li></ul><div class="code-block-with-title"><div class="code-block-title-bar" data-title="app/pages/ProfilePage.tsx"><span>app/pages/ProfilePage.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ProfilePage</span> <span class="token keyword">implements</span> <span class="token class-name">IComponentEventHandler<span class="token operator">&lt;</span>ReactIncomingEvent<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> userService<span class="token operator">:</span> UserService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">async</span> <span class="token function">handle</span><span class="token punctuation">(</span>event<span class="token operator">:</span> ReactIncomingEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">getProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token operator">:</span> RenderContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ProfileCard</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container tip"><p class="hint-container-title">Fact</p><p>The page gives you logic. The component gives you visuals.</p></div><h2 id="pages-render-components-not-the-other-way-around" tabindex="-1"><a class="header-anchor" href="#pages-render-components-not-the-other-way-around"><span>Pages Render Components, Not the Other Way Around</span></a></h2><p>In Stone.js, your <strong>pages own the orchestration</strong>. They live in the <strong>functional dimension</strong>. They intercept the event, resolve dependencies, process logic, and then, and only then, call React to render the interface.</p><p>That means:</p><ul><li>Your <strong>pages render components</strong></li><li>Your <strong>components don’t call pages</strong>, inject services, or interact with the container</li></ul><p>This clear flow of responsibility keeps both sides clean.</p><h3 id="flow-from-incoming-event-to-ui" tabindex="-1"><a class="header-anchor" href="#flow-from-incoming-event-to-ui"><span>Flow: From Incoming Event to UI</span></a></h3><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt"><pre><code class="language-txt"><span class="line">Incoming Event → handle() → data → render() → React component</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="a-simple-example" tabindex="-1"><a class="header-anchor" href="#a-simple-example"><span>A simple example</span></a></h3><p>Let’s walk through a full example that demonstrates the boundary clearly.</p><h4 id="loginpage-–-stone-js-page" tabindex="-1"><a class="header-anchor" href="#loginpage-–-stone-js-page"><span><code>LoginPage</code> – Stone.js Page</span></a></h4><p>This is where we:</p><ul><li>Intercept the route (<code>/login</code>)</li><li>Inject the <code>AuthService</code></li><li>Handle submission logic</li><li>Manage render lifecycle</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LoginPage</span> <span class="token keyword">implements</span> <span class="token class-name">IComponentEventHandler<span class="token operator">&lt;</span>ReactIncomingEvent<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">readonly</span> auth<span class="token operator">:</span> AuthService</span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>container<span class="token operator">:</span> IContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>auth <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>AuthService<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span>user<span class="token operator">:</span> UserLogin<span class="token punctuation">,</span> setError<span class="token operator">:</span> Dispatch<span class="token operator">&lt;</span>SetStateAction<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>auth<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> setError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>LoginForm</span>
<span class="line">        error<span class="token operator">=</span><span class="token punctuation">{</span>error<span class="token punctuation">}</span></span>
<span class="line">        onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">async</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> setError<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This page does not render any HTML directly. It passes context to a <strong>React component</strong> and lets React take over.</p><h4 id="loginform-–-pure-react-component" tabindex="-1"><a class="header-anchor" href="#loginform-–-pure-react-component"><span><code>LoginForm</code> – Pure React Component</span></a></h4><p>This is a reusable UI component. It has no knowledge of Stone.js, lifecycle hooks, or services.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> LoginForm<span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>LoginFormOptions<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> error<span class="token punctuation">,</span> onSubmit <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>UserLogin<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> password<span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> React<span class="token punctuation">.</span>FormEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">onSubmit</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>error <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&quot;error&quot;</span><span class="token operator">&gt;</span>Login failed<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token operator">&lt;</span>input</span>
<span class="line">        type<span class="token operator">=</span><span class="token string">&quot;email&quot;</span></span>
<span class="line">        placeholder<span class="token operator">=</span><span class="token string">&quot;Email&quot;</span></span>
<span class="line">        onChange<span class="token operator">=</span><span class="token punctuation">{</span>e <span class="token operator">=&gt;</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span>email <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">      <span class="token operator">&lt;</span>input</span>
<span class="line">        type<span class="token operator">=</span><span class="token string">&quot;password&quot;</span></span>
<span class="line">        placeholder<span class="token operator">=</span><span class="token string">&quot;Password&quot;</span></span>
<span class="line">        onChange<span class="token operator">=</span><span class="token punctuation">{</span>e <span class="token operator">=&gt;</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span>password <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">      <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">&quot;submit&quot;</span><span class="token operator">&gt;</span>Login<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This component is portable:</p><ul><li>You can use it in any React project</li><li>It doesn’t rely on decorators, DI, or event logic</li><li>It does one thing: render a form</li></ul><p>Together, they demonstrate the <strong>core principle of the Continuum</strong>:</p><div class="hint-container tip"><p class="hint-container-title">Fact</p><p>The functional dimension prepares the world.<br> The view dimension reflects it.</p></div><p>This is the optimal way to build a Stone.js app. It keeps your components clean, portable, and reusable.<br> But you are free to choose your own structure and flow. Stone.js is flexible and lets you decide how to build your app.</p><h2 id="writing-idiomatic-components" tabindex="-1"><a class="header-anchor" href="#writing-idiomatic-components"><span>Writing Idiomatic Components</span></a></h2><p>Stone.js doesn’t introduce a new component model. It doesn’t replace React. It doesn’t abstract it. It respects it.</p><p>That means your components should follow the same practices you’d use in any high-quality React project.</p><h3 id="use-functional-components" tabindex="-1"><a class="header-anchor" href="#use-functional-components"><span>Use functional components</span></a></h3><p>Stone.js is optimized for <strong>React functional components</strong>, for performance, readability, and compatibility with modern features like hooks, Suspense, and lazy loading.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>No decorators. No magic wrappers. Just React.</p><h3 id="favor-composition-over-inheritance" tabindex="-1"><a class="header-anchor" href="#favor-composition-over-inheritance"><span>Favor composition over inheritance</span></a></h3><p>React is built around composition, and so is Stone.js.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Layout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> children<span class="token operator">:</span> ReactNode <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>layout<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Footer</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can build layout components, shared widgets, context providers, or entire feature modules, just like in any other app.</p><h3 id="use-standard-react-patterns" tabindex="-1"><a class="header-anchor" href="#use-standard-react-patterns"><span>Use standard React patterns</span></a></h3><p>Stone.js does not block or alter:</p><ul><li><code>useState</code>, <code>useEffect</code>, <code>useContext</code></li><li>CSS modules, Emotion, Tailwind, or any styling system</li><li>Third-party component libraries like MUI, Chakra UI, or Headless UI</li></ul><p>You can use them all, because your components are just… React components.</p><h3 id="freedom-anarchy" tabindex="-1"><a class="header-anchor" href="#freedom-anarchy"><span>Freedom ≠ Anarchy</span></a></h3><p>While you’re free to design your view layer however you like, it’s still wise to:</p><ul><li>Keep components focused and declarative</li><li>Avoid side effects inside render methods</li><li>Use hooks instead of class-based logic</li><li>Separate styles, logic, and structure when it improves clarity</li></ul><p>You get the entire React ecosystem. And Stone.js stays out of your way.</p><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>Designing components in a Stone.js application is no different from designing components in a well-structured React project. But the added <strong>architectural clarity</strong> provided by the Continuum means you can make better decisions about what belongs where.</p><p>Here are some guidelines to keep your components clean, maintainable, and fully decoupled from the system layer.</p><h4 id="organize-your-components-outside-of-stone-js" tabindex="-1"><a class="header-anchor" href="#organize-your-components-outside-of-stone-js"><span>Organize your components outside of Stone.js</span></a></h4><ul><li>Keep reusable UI in a <code>components/</code> folder</li><li>Keep Stone.js pages in a separate <code>pages/</code> folder</li><li>Avoid importing services or handlers into your components</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">src/</span>
<span class="line">├── components/</span>
<span class="line">│   └── Button/</span>
<span class="line">├── pages/</span>
<span class="line">│   └── HomePage.tsx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This keeps responsibilities isolated: components render, pages orchestrate.</p><h4 id="make-components-pure-and-declarative" tabindex="-1"><a class="header-anchor" href="#make-components-pure-and-declarative"><span>Make components pure and declarative</span></a></h4><ul><li>Use props to pass data and callbacks</li><li>Avoid direct system access unless explicitly needed</li><li>Favor composability, reusability, and clarity</li></ul><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">WelcomeBanner</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Welcome, </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="use-hooks-for-local-behavior" tabindex="-1"><a class="header-anchor" href="#use-hooks-for-local-behavior"><span>Use hooks for local behavior</span></a></h4><p>Stone.js doesn’t restrict your use of:</p><ul><li><code>useState</code>, <code>useEffect</code>, <code>useRef</code>, <code>useMemo</code>, etc.</li><li><code>useContext</code> for theming or composition</li><li>External hooks libraries like React Query or Zustand (manually integrated)</li></ul><p>You’re free to design your UI logic with modern React patterns.</p><h4 id="don-t-resolve-services-inside-components" tabindex="-1"><a class="header-anchor" href="#don-t-resolve-services-inside-components"><span>Don’t resolve services inside components</span></a></h4><p>Avoid doing this:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// ❌ Bad practice</span></span>
<span class="line"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>StoneContext<span class="token punctuation">)</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Use this sparingly and only when your component truly needs to interact with application context. Prefer passing props instead.</p><h4 id="treat-components-as-portable" tabindex="-1"><a class="header-anchor" href="#treat-components-as-portable"><span>Treat components as portable</span></a></h4><p>Everything inside your <code>components/</code> folder should work:</p><ul><li>In a any React app</li><li>In a plain CRA app</li><li>In a test harness</li><li>In isolation</li></ul><p>That’s the beauty of the view dimension being free from framework constraints.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>In Stone.js, your components are truly your own.</p><p>They live entirely in the <strong>view dimension</strong>, untouched by framework constraints or system logic. You build them using the full power of React, hooks, composition, styling libraries, third-party tools, with zero interference.</p><p>This isn’t a compromise. It’s architecture done right.</p><p>Stone.js governs the system. React governs the view. Pages act as the bridge, and components stay clean.</p><p>By:</p><ul><li>Keeping components outside the system</li><li>Passing data and actions through props</li><li>Writing pure, functional components</li><li>Avoiding tight coupling with system logic</li></ul><p>You gain the flexibility to evolve your UI <strong>independently</strong> of your infrastructure.</p><p>In the Continuum, your React skills are not replaced, they’re <strong>respected</strong>. You stay free. You stay future-proof.</p><p>And your components? They stay <strong>React</strong>.</p>`,108)]))}const r=s(o,[["render",p]]),u=JSON.parse('{"path":"/docs/react/components.html","title":"Components","lang":"en-US","frontmatter":{"title":"Components","description":"In Stone.js, components are 100% React. They are not wrapped, extended, abstracted, or intercepted by the framework. You write them the same way you would in any standalone Reac...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Components\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/docs/react/components.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Components"}],["meta",{"property":"og:description","content":"In Stone.js, components are 100% React. They are not wrapped, extended, abstracted, or intercepted by the framework. You write them the same way you would in any standalone Reac..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":4.91,"words":1473},"filePathRelative":"docs/react/components.md","autoDesc":true}');export{r as comp,u as data};
