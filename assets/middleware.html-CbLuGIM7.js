import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,b as l,a as n,e as i,d as s,w as a,r as p,o as m}from"./app-BJyWHIWB.js";const h={},g={class:"hint-container info"};function v(b,e){const r=p("RouteLink"),c=p("Tabs"),u=p("CodeTabs");return m(),k("div",null,[e[29]||(e[29]=l('<p>In Stone.js, <strong>middleware</strong> is how you participate in the evolution of the context. It is the mechanism that allows you to <strong>intercept</strong>, <strong>transform</strong>, or even <strong>terminate</strong> the flow of execution, across any dimension of the internal context.</p><p>Middleware is <strong>active</strong>. It lives inside the execution pipeline and can control how the system interprets an intention, how it applies domain logic, or how it responds to external inputs.</p><p>This makes middleware fundamentally different from <a href="./lifecycle">hooks</a>, which observe the lifecycle without affecting it. Hooks run outside the flow; middleware runs inside it.</p><p>Each middleware belongs to a specific <strong>dimension</strong> in the Continuum Architecture:</p>',4)),n("ul",null,[n("li",null,[i(r,{to:"/docs/architecture/blueprint.html#use-setup-middleware-for-dynamic-logic"},{default:a(()=>e[0]||(e[0]=[n("strong",null,"Setup middleware",-1)])),_:1,__:[0]}),e[1]||(e[1]=s(" builds and mutates the blueprint before the application is ready"))]),n("li",null,[i(r,{to:"/docs/architecture/adapter.html#adapter-middleware"},{default:a(()=>e[2]||(e[2]=[n("strong",null,"Integration middleware",-1)])),_:1,__:[2]}),e[3]||(e[3]=s(" transforms external inputs (raw requests) into intentions and intentions into effects (responses)"))]),e[4]||(e[4]=n("li",null,[n("strong",null,"Initialization middleware"),s(" controls how an intention is handled by the kernel and domain logic")],-1))]),e[30]||(e[30]=l("<p>This page focuses on <strong>Initialization middleware</strong>, where fully-formed incomingEvents are processed. This is the dimension where most application logic lives, and where middleware becomes your primary tool to:</p><ul><li>Apply validation or authorization</li><li>Modify the execution context</li><li>Transform or replace responses</li><li>Catch and handle errors</li><li>Wrap or override the event handler</li></ul><p>In this phase, middleware gives you full control over <strong>how</strong> the domain is applied to the context.</p>",3)),n("div",g,[e[10]||(e[10]=n("p",{class:"hint-container-title"},"Info",-1)),n("p",null,[e[7]||(e[7]=s("The principles in this page apply to all middleware, regardless of dimension. For dimension-specific behaviors, see the ")),i(r,{to:"/docs/architecture/blueprint.html#use-setup-middleware-for-dynamic-logic"},{default:a(()=>e[5]||(e[5]=[s("Blueprint")])),_:1,__:[5]}),e[8]||(e[8]=s(" and ")),i(r,{to:"/docs/architecture/adapter.html#adapter-middleware"},{default:a(()=>e[6]||(e[6]=[s("Adapter")])),_:1,__:[6]}),e[9]||(e[9]=s(" documentation."))])]),e[31]||(e[31]=l(`<p>In the Continuum, middleware is the tool you use to <strong>shape the context from within</strong>. It gives you leverage over structure and flow, not just observation, but action.</p><h2 id="using-middleware" tabindex="-1"><a class="header-anchor" href="#using-middleware"><span>Using Middleware</span></a></h2><p>In Stone.js, all middleware follow a <strong>shared structure</strong>, no matter which dimension they belong to. This structural consistency is a core part of the Continuum Architecture: <strong>only the context and return type change</strong>, the shape remains the same.</p><p>Whether you&#39;re enriching a blueprint, transforming an adapter’s raw input, or intercepting a request before it reaches the domain, middleware always receives a <strong>context</strong>, a <code>next()</code> function, and must return a result.</p><p>Stone.js supports three interchangeable middleware variants:</p><ul><li><strong>Class-based</strong>, required when using the Declarative API with decorators</li><li><strong>Function-based</strong>, simple, flexible, ideal for functional programming with imperative registration</li><li><strong>Factory-based</strong>, dynamic and dependency-aware, used when function-based middleware needs to be parameterized or contextualized</li></ul><p>You can use any of these shapes in <strong>any dimension</strong>. The continuum doesn’t restrict you, it empowers you to choose what fits best.</p><h3 id="middleware-signature" tabindex="-1"><a class="header-anchor" href="#middleware-signature"><span>Middleware Signature</span></a></h3><p>All middleware in Stone.js share the <strong>same function signature</strong>, regardless of the dimension they operate in:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token operator">&lt;</span>ContextType<span class="token punctuation">,</span> ReturnType<span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">  context<span class="token operator">:</span> ContextType<span class="token punctuation">,</span></span>
<span class="line">  next<span class="token operator">:</span> NextMiddleware<span class="token operator">&lt;</span>ContextType<span class="token punctuation">,</span> ReturnType<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> ReturnType <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each middleware receives:</p><ul><li>A <code>context</code>: the dimension-specific data for that phase (e.g. <code>IncomingHttpEvent</code>, <code>BlueprintContext</code>, etc.)</li><li>A <code>next()</code> function: used to forward the context to the next middleware in the chain</li><li>A return value: either the result of <code>next()</code> or a short-circuited custom response</li></ul><p>The middleware can:</p><ul><li><strong>Mutate</strong> the context before calling <code>next()</code></li><li><strong>Intercept and modify</strong> the result after <code>next()</code> returns</li><li><strong>Short-circuit</strong> the flow by returning early (e.g. an error response)</li><li><strong>Break the chain</strong> entirely by throwing an exception</li></ul><p>This structure makes middleware expressive, composable, and highly controllable, regardless of where it runs in the continuum.</p><h3 id="middleware-variants" tabindex="-1"><a class="header-anchor" href="#middleware-variants"><span>Middleware Variants</span></a></h3><p>Stone.js middleware can be written in three interchangeable forms: <strong>class</strong>, <strong>function</strong>, or <strong>factory</strong>.<br> Each variant provides the same capabilities and can be used in any dimension, choose the shape that best fits your design or context.</p>`,17)),i(c,{data:[{id:"Class-based"},{id:"Function-based"},{id:"Factory-based"}],active:0,"tab-id":"class-factory-function"},{title0:a(({value:t,isActive:o})=>e[11]||(e[11]=[s("Class-based")])),title1:a(({value:t,isActive:o})=>e[12]||(e[12]=[s("Function-based")])),title2:a(({value:t,isActive:o})=>e[13]||(e[13]=[s("Factory-based")])),tab0:a(({value:t,isActive:o})=>e[14]||(e[14]=[n("h4",{id:"class-based-middleware",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-based-middleware"},[n("span",null,"Class-based Middleware")])],-1),n("p",null,[s("In class-based middleware, you implement a "),n("code",null,"handle()"),s(" method."),n("br"),s(" This form is compatible with the Declarative API and supports dependency injection via the constructor.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" IMiddleware"),n("span",{class:"token punctuation"},","),s(" NextMiddleware "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" IncomingHttpEvent"),n("span",{class:"token punctuation"},","),s(" OutgoingHttpResponse "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/http-core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyMiddleware"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},[s("IMiddleware"),n("span",{class:"token operator"},"<"),s("IncomingHttpEvent"),n("span",{class:"token punctuation"},","),s(" OutgoingHttpResponse"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"readonly"),s(" userService"),n("span",{class:"token operator"},":"),s(" UserService")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token comment"},"// Destructuring dependencies injection from the container")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" userService "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" userService"),n("span",{class:"token operator"},":"),s(" UserService "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("userService "),n("span",{class:"token operator"},"="),s(" userService")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("    event"),n("span",{class:"token operator"},":"),s(" IncomingHttpEvent"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    next"),n("span",{class:"token operator"},":"),s(" NextMiddleware"),n("span",{class:"token operator"},"<"),s("IncomingHttpEvent"),n("span",{class:"token punctuation"},","),s(" OutgoingHttpResponse"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"Promise"),n("span",{class:"token operator"},"<"),s("OutgoingHttpResponse"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Add contextual info")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"const"),s(" user "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("userService"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getUser"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'user-id'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setUserResolver"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" user"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Short-circuit if missing header")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasHeader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'X-Request-ID'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token keyword"},"return"),s(" OutgoingHttpResponse"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"create"),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"{"),s(" status"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"400"),n("span",{class:"token punctuation"},","),s(" content"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Missing X-Request-ID header'"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Break the flow completely")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"?."),s("role "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token string"},"'admin'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"UnauthorizedError"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Unauthorized'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Continue")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"const"),s(" response "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Add header to result")]),s(`
`),n("span",{class:"line"},[s("    response"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setHeader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'X-Request-ID'"),n("span",{class:"token punctuation"},","),s(" event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getHeader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'X-Request-ID'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" response")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,"Use this shape when working with decorators or when you want access to constructor-injected dependencies.",-1)])),tab1:a(({value:t,isActive:o})=>e[15]||(e[15]=[n("h4",{id:"function-based-middleware",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#function-based-middleware"},[n("span",null,"Function-based Middleware")])],-1),n("p",null,"Function-based middleware is concise, expressive, and ideal for functional use cases or manual registration.",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" NextMiddleware "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" IncomingHttpEvent"),n("span",{class:"token punctuation"},","),s(" OutgoingHttpResponse "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/http-core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" MyMiddleware "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("  event"),n("span",{class:"token operator"},":"),s(" IncomingHttpEvent"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  next"),n("span",{class:"token operator"},":"),s(" NextMiddleware"),n("span",{class:"token operator"},"<"),s("IncomingHttpEvent"),n("span",{class:"token punctuation"},","),s(" OutgoingHttpResponse"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"Promise"),n("span",{class:"token operator"},"<"),s("OutgoingHttpResponse"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setUserResolver"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'John Doe'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,"Function-based middleware offers full control with minimal boilerplate, and is preferred for most imperative scenarios.",-1)])),tab2:a(({value:t,isActive:o})=>e[16]||(e[16]=[n("h4",{id:"factory-based-middleware",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#factory-based-middleware"},[n("span",null,"Factory-based Middleware")])],-1),n("p",null,"Use a factory when your function-based middleware needs to receive configuration or services from the container.",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" NextMiddleware "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" IncomingHttpEvent"),n("span",{class:"token punctuation"},","),s(" OutgoingHttpResponse "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/http-core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"createUserResolverMiddleware"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" userService "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" userService"),n("span",{class:"token operator"},":"),s(" UserService "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("  event"),n("span",{class:"token operator"},":"),s(" IncomingHttpEvent"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  next"),n("span",{class:"token operator"},":"),s(" NextMiddleware"),n("span",{class:"token operator"},"<"),s("IncomingHttpEvent"),n("span",{class:"token punctuation"},","),s(" OutgoingHttpResponse"),n("span",{class:"token operator"},">")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"Promise"),n("span",{class:"token operator"},"<"),s("OutgoingHttpResponse"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"const"),s(" user "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(" userService"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getUser"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'user-id'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  event"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setUserResolver"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" user"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,"This shape is useful when you need dynamic logic based on runtime conditions, environment, or resolved services, without using a class.",-1)])),_:1}),e[32]||(e[32]=l(`<h3 id="why-call-next" tabindex="-1"><a class="header-anchor" href="#why-call-next"><span>Why call <code>next()</code></span></a></h3><p>Calling <code>next()</code> signals that your middleware has finished its work and the context should proceed to the next middleware in the chain, or to the final handler if none remain.<br> Every middleware <strong>must return a value</strong>, either by returning early, forwarding the result of <code>next()</code>, or throwing an error.</p><p>This mechanism gives you full control over the execution flow:</p><h4 id="_1-modify-the-context-before-continuing" tabindex="-1"><a class="header-anchor" href="#_1-modify-the-context-before-continuing"><span>1. Modify the context before continuing</span></a></h4><p>Mutate the context before forwarding it to the next step.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">event<span class="token punctuation">.</span><span class="token function">setUserResolver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here, we attach the user to the <code>IncomingHttpEvent</code> before it reaches the handler.</p><h4 id="_2-short-circuit-the-middleware-chain" tabindex="-1"><a class="header-anchor" href="#_2-short-circuit-the-middleware-chain"><span>2. Short-circuit the middleware chain</span></a></h4><p>Return early without calling <code>next()</code> to skip the rest of the chain.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>event<span class="token punctuation">.</span><span class="token function">hasHeader</span><span class="token punctuation">(</span><span class="token string">&#39;X-Request-ID&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> OutgoingHttpResponse<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;Missing X-Request-ID header&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Middleware must always return an <code>OutgoingResponse</code> or a subclass of it. In this case, we return a <code>400</code> response and prevent the handler from running.</p><h4 id="_3-break-the-flow-entirely" tabindex="-1"><a class="header-anchor" href="#_3-break-the-flow-entirely"><span>3. Break the flow entirely</span></a></h4><p>Throw an error to stop execution.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span>role <span class="token operator">!==</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnauthorizedError</span><span class="token punctuation">(</span><span class="token string">&#39;Unauthorized&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This halts the pipeline and triggers error handling logic.</p><h4 id="_4-act-after-the-rest-of-the-chain" tabindex="-1"><a class="header-anchor" href="#_4-act-after-the-rest-of-the-chain"><span>4. Act after the rest of the chain</span></a></h4><p>Capture and modify the response after downstream middleware or the handler.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span></span>
<span class="line">response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;X-Request-ID&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&#39;X-Request-ID&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">return</span> response</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This lets you wrap, modify, or augment the final response before it leaves the system.</p><p>This simple yet powerful pattern is what makes middleware composable, interruptible, and expressive across all dimensions.</p><h3 id="sync-or-async-both" tabindex="-1"><a class="header-anchor" href="#sync-or-async-both"><span>Sync or Async? Both.</span></a></h3><p>Middleware can be <strong>synchronous</strong> or <strong>asynchronous</strong>, as long as it returns the appropriate value.<br> Stone.js handles middleware flow seamlessly, so you&#39;re free to mix sync and async styles without friction.</p><h3 id="use-any-variant-in-any-dimension" tabindex="-1"><a class="header-anchor" href="#use-any-variant-in-any-dimension"><span>Use Any Variant, in Any Dimension</span></a></h3><p>Stone.js does not restrict middleware variants by dimension.</p><p>You can use:</p><ul><li><strong>Class-based</strong> middleware</li><li><strong>Function-based</strong> middleware</li><li><strong>Factory-based</strong> middleware</li></ul><p>…in any dimension:</p><ul><li><a href="./blueprint#dynamic-configuration">Setup</a></li><li><a href="./adapter#adapter-middleware">Integration</a></li><li>Initialization</li></ul><p>The only difference is the <strong>context and return type</strong>, which are defined by the dimension itself.</p><p><strong>Continuum means flexibility</strong>, choose the shape that suits your logic, and let the system adapt to it.</p><h2 id="middleware-registration" tabindex="-1"><a class="header-anchor" href="#middleware-registration"><span>Middleware Registration</span></a></h2><p>Once your middleware is defined, it needs to be <strong>registered</strong> so Stone.js can discover and execute it at the appropriate point in the system lifecycle.</p><p>There are two ways to register middleware:</p><ul><li><strong>Declarative API</strong>, via decorators on class-based middleware</li><li><strong>Imperative API</strong>, via the blueprint utilities</li></ul>`,34)),i(c,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:a(({value:t,isActive:o})=>e[17]||(e[17]=[s("Declarative")])),title1:a(({value:t,isActive:o})=>e[18]||(e[18]=[s("Imperative")])),tab0:a(({value:t,isActive:o})=>e[19]||(e[19]=[n("h3",{id:"declarative-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declarative-api"},[n("span",null,"Declarative API")])],-1),n("p",null,[s("To register middleware declaratively, use the "),n("code",null,"@Middleware()"),s(" decorator:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Middleware "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Middleware")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyMiddleware"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("The decorator is only available for "),n("strong",null,"class-based"),s(" middleware and must be used within modules discovered by the blueprint.")],-1),n("p",null,"You can also pass options to control its behavior (see below).",-1)])),tab1:a(({value:t,isActive:o})=>e[20]||(e[20]=[n("h3",{id:"imperative-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imperative-api"},[n("span",null,"Imperative API")])],-1),n("p",null,[s("To register middleware imperatively, you can use the "),n("code",null,"defineMiddleware"),s(" blueprint utility function.")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" defineMiddleware "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"MyMiddlewareHandler"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token comment"},"// Middleware logic here")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" MyMiddleware "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineMiddleware"),n("span",{class:"token punctuation"},"("),s("MyMiddlewareHandler"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("For factory-based middleware, you can pass a factory function that returns the actual middleware function and use the "),n("code",null,"factory"),s(" option to indicate that it should be treated as a factory:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" defineMiddleware "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"MyMiddlewareHandler"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token comment"},"// Middleware logic here")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" MyMiddleware "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineMiddleware"),n("span",{class:"token punctuation"},"("),s("MyMiddlewareHandler"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" factory"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[s("This approach gives you full flexibility and supports "),n("strong",null,"function-based"),s(", "),n("strong",null,"factory-based"),s(", and "),n("strong",null,"class-based"),s(" middleware, with shape metadata.")],-1)])),_:1}),e[33]||(e[33]=l('<h3 id="priority-and-execution-order" tabindex="-1"><a class="header-anchor" href="#priority-and-execution-order"><span>Priority and Execution Order</span></a></h3><p>Stone.js executes middleware in the order they are defined, unless you specify a <code>priority</code>.</p><ul><li>Lower values run first (<code>priority: 0</code> runs before <code>priority: 10</code>)</li><li>If no priority is defined, middleware are executed in registration order</li></ul>',3)),i(u,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:a(({value:t,isActive:o})=>e[21]||(e[21]=[s("Declarative")])),title1:a(({value:t,isActive:o})=>e[22]||(e[22]=[s("Imperative")])),tab0:a(({value:t,isActive:o})=>e[23]||(e[23]=[n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Middleware")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" priority"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"10"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyMiddleware"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:a(({value:t,isActive:o})=>e[24]||(e[24]=[n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" MyMiddleware "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineMiddleware"),n("span",{class:"token punctuation"},"("),s("MyMiddlewareHandler"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" priority"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"10"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1)])),_:1}),e[34]||(e[34]=l(`<h3 id="middleware-options" tabindex="-1"><a class="header-anchor" href="#middleware-options"><span>Middleware Options</span></a></h3><p>Whether registered declaratively or imperatively, you can configure middleware using the following options:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">MiddlewareOptions</span> <span class="token punctuation">{</span></span>
<span class="line">  alias<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  priority<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  global<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>A complete example:</strong></p>`,4)),i(u,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:a(({value:t,isActive:o})=>e[25]||(e[25]=[s("Declarative")])),title1:a(({value:t,isActive:o})=>e[26]||(e[26]=[s("Imperative")])),tab0:a(({value:t,isActive:o})=>e[27]||(e[27]=[n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Middleware")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" priority"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(" alias"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'auth'"),n("span",{class:"token punctuation"},","),s(" global"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyMiddleware"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:a(({value:t,isActive:o})=>e[28]||(e[28]=[n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" MyMiddleware "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"defineMiddleware"),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("  MyMiddlewareHandler"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"{"),s(" priority"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(" alias"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'auth'"),n("span",{class:"token punctuation"},","),s(" global"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),e[35]||(e[35]=l(`<h4 id="alias" tabindex="-1"><a class="header-anchor" href="#alias"><span><code>alias</code></span></a></h4><p>A named identifier you can use to reference the middleware later, for example, in route definitions:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> middleware<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="global" tabindex="-1"><a class="header-anchor" href="#global"><span><code>global</code></span></a></h4><p>Set to <code>true</code> to apply this middleware to <strong>all IncomingEvent executions</strong> by default.<br> If omitted or <code>false</code>, the middleware is considered <strong>route-specific</strong> and must be explicitly referenced.</p><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>Middleware is one of the most flexible and expressive features in Stone.js, but with great power comes great opportunity for chaos. Follow these guidelines to get the most out of your middleware design while keeping your system clean, scalable, and continuum-aligned.</p><h4 id="keep-middleware-single-purpose" tabindex="-1"><a class="header-anchor" href="#keep-middleware-single-purpose"><span>Keep Middleware Single-Purpose</span></a></h4><p>Each middleware should do <strong>one thing well</strong>.</p><p>Good:</p><ul><li>One middleware for authentication</li><li>Another for input validation</li><li>Another for response shaping</li></ul><p>Avoid building &quot;mega-middleware&quot; that tries to handle multiple unrelated concerns.</p><h4 id="don-t-skip-the-return" tabindex="-1"><a class="header-anchor" href="#don-t-skip-the-return"><span>Don’t Skip the Return</span></a></h4><p>Every middleware <strong>must return a value</strong>, either:</p><ul><li>A custom response</li><li>The result of <code>next(context)</code></li><li>Or throw an error</li></ul><p>Returning <code>undefined</code> will break the chain and can result in runtime errors.</p><h4 id="use-next-with-intention" tabindex="-1"><a class="header-anchor" href="#use-next-with-intention"><span>Use <code>next()</code> with Intention</span></a></h4><p>Call <code>next()</code> only when you&#39;re ready to pass control forward.<br> Modify the context before it, and the result after it, but avoid calling it conditionally or in multiple branches unless absolutely necessary.</p><h4 id="use-aliases-for-reusability" tabindex="-1"><a class="header-anchor" href="#use-aliases-for-reusability"><span>Use Aliases for Reusability</span></a></h4><p>Register middleware with an <code>alias</code> to reuse it across routes declaratively.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Middleware</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> alias<span class="token operator">:</span> <span class="token string">&#39;auth&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then reference it in routes:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> middleware<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="use-global-when-appropriate" tabindex="-1"><a class="header-anchor" href="#use-global-when-appropriate"><span>Use <code>global</code> When Appropriate</span></a></h4><p>Global middleware applies to <strong>all intentions</strong>(<code>IncomingEvent</code>). Use this for:</p><ul><li>Logging</li><li>Security headers</li><li>Feature toggles</li></ul><p>Avoid <code>global: true</code> for logic that only applies to a subset of routes or domains.</p><h4 id="choose-the-right-shape" tabindex="-1"><a class="header-anchor" href="#choose-the-right-shape"><span>Choose the Right Shape</span></a></h4><ul><li>Use <strong>class-based middleware</strong> when you rely on the Declarative API</li><li>Use <strong>function-based middleware</strong> for quick, clear logic</li><li>Use <strong>factory-based middleware</strong> for dynamic, parameterized logic or need DI</li></ul><p>All shapes are valid, choose based on context, not preference.</p><h4 id="avoid-cross-dimensional-confusion" tabindex="-1"><a class="header-anchor" href="#avoid-cross-dimensional-confusion"><span>Avoid Cross-Dimensional Confusion</span></a></h4><p>Keep dimension-specific logic in its place:</p><ul><li>Use <strong>Setup middleware</strong> for configuration</li><li>Use <strong>Integration middleware</strong> for transforming raw input</li><li>Use <strong>Initialization middleware</strong> for per-intention logic</li><li>Use <a href="./lifecycle"><strong>Hooks</strong></a> for passive observation</li><li>Use <strong>Middleware</strong> for active transformation</li><li>Use <strong>Blueprint</strong> for system-wide configuration</li><li>Follow the lifecycle, middleware is powerful because it&#39;s scoped</li></ul><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Middleware in Stone.js gives you the power to <strong>actively shape the flow of your system</strong>, from the moment an intention is created to the point a response is returned.</p><p>In this document, we focused on <strong>initialization middleware</strong>, the most common type used to handle per-event logic like authentication, validation, and context enrichment. But the same principles apply across all dimensions.</p><p><strong>Key takeaways:</strong></p><ul><li>Middleware always receives a <code>context</code>, a <code>next()</code> function, and must return a value</li><li>You can write middleware as a <strong>class</strong>, <strong>function</strong>, or <strong>factory</strong></li><li>Stone.js supports both <strong>Declarative</strong> (via decorators) and <strong>Imperative</strong> (via blueprint) registration</li><li>Middleware can mutate, intercept, short-circuit, or wrap the execution, giving you full control</li><li>Always return a result and keep middleware <strong>single-responsibility and focused</strong></li><li>Use <code>alias</code> and <code>global</code> for composability and reuse</li><li>When you need to <strong>transform</strong> the system, use middleware</li><li>When you only need to <strong>observe</strong>, use <a href="./lifecycle">Hooks</a></li></ul><p>The dimension defines the context. The shape is your choice. That’s the continuum.</p>`,39))])}const f=d(h,[["render",v]]),x=JSON.parse('{"path":"/docs/architecture/middleware.html","title":"Middleware","lang":"en-US","frontmatter":{"title":"Middleware","description":"In Stone.js, middleware is how you participate in the evolution of the context. It is the mechanism that allows you to intercept, transform, or even terminate the flow of execut...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Middleware\\",\\"image\\":[\\"/logo_square.png\\"],\\"dateModified\\":\\"2025-06-24T23:25:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/docs/architecture/middleware.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Middleware"}],["meta",{"property":"og:description","content":"In Stone.js, middleware is how you participate in the evolution of the context. It is the mechanism that allows you to intercept, transform, or even terminate the flow of execut..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo_square.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-24T23:25:05.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-24T23:25:05.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750807505000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":7.15,"words":2146},"filePathRelative":"docs/architecture/middleware.md","autoDesc":true}');export{f as comp,x as data};
