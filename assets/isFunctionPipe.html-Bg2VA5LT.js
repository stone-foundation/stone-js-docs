import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as o,a as n,e as i,d as t,w as r,r as c,o as l}from"./app-CIBZQWs4.js";const u={};function d(m,e){const a=c("RouteLink");return l(),p("div",null,[e[8]||(e[8]=o(`<h1 id="function-isfunctionpipe" tabindex="-1"><a class="header-anchor" href="#function-isfunctionpipe"><span>Function: isFunctionPipe()</span></a></h1><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">isFunctionPipe</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">,</span> Args<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>metaPipe<span class="token punctuation">)</span><span class="token operator">:</span> metaPipe <span class="token keyword">is</span> <span class="token punctuation">{</span> module<span class="token operator">:</span> FunctionalPipe<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Check if the meta pipe is a function pipe.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> = <code>unknown</code></p><h3 id="r" tabindex="-1"><a class="header-anchor" href="#r"><span>R</span></a></h3><p><code>R</code> = <code>T</code></p><h3 id="args" tabindex="-1"><a class="header-anchor" href="#args"><span>Args</span></a></h3><p><code>Args</code> <em>extends</em> <code>any</code>[] = <code>any</code>[]</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="metapipe" tabindex="-1"><a class="header-anchor" href="#metapipe"><span>metaPipe</span></a></h3>`,12)),n("p",null,[i(a,{to:"/api/pipeline/declarations/interfaces/MetaPipe.html"},{default:r(()=>e[0]||(e[0]=[n("code",null,"MetaPipe",-1)])),_:1,__:[0]}),e[1]||(e[1]=t("<")),e[2]||(e[2]=n("code",null,"T",-1)),e[3]||(e[3]=t(", ")),e[4]||(e[4]=n("code",null,"R",-1)),e[5]||(e[5]=t(", ")),e[6]||(e[6]=n("code",null,"Args",-1)),e[7]||(e[7]=t(">"))]),e[9]||(e[9]=n("p",null,"The meta pipe to check.",-1)),e[10]||(e[10]=n("h2",{id:"returns",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#returns"},[n("span",null,"Returns")])],-1)),e[11]||(e[11]=n("p",null,[n("code",null,"metaPipe is { module: FunctionalPipe<T, R> }")],-1)),e[12]||(e[12]=n("p",null,[n("code",null,"true"),t(" if the meta pipe is a function pipe, otherwise "),n("code",null,"false"),t(".")],-1))])}const f=s(u,[["render",d]]),k=JSON.parse('{"path":"/api/pipeline/utils/functions/isFunctionPipe.html","title":"Function: isFunctionPipe()","lang":"en-US","frontmatter":{"description":"Function: isFunctionPipe() Check if the meta pipe is a function pipe. Type Parameters T T = unknown R R = T Args Args extends any[] = any[] Parameters metaPipe <T, R, Args> The ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function: isFunctionPipe()\\",\\"image\\":[\\"/logo.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/pipeline/utils/functions/isFunctionPipe.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Function: isFunctionPipe()"}],["meta",{"property":"og:description","content":"Function: isFunctionPipe() Check if the meta pipe is a function pipe. Type Parameters T T = unknown R R = T Args Args extends any[] = any[] Parameters metaPipe <T, R, Args> The ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.23,"words":68},"filePathRelative":"api/pipeline/utils/functions/isFunctionPipe.md","autoDesc":true}');export{f as comp,k as data};
