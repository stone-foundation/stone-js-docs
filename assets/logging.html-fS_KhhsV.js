import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as p,e as i,w as e,r,o as k,a as n,d as s}from"./app-B3SZc_3K.js";const d={};function g(m,a){const l=r("Tabs");return k(),u("div",null,[a[12]||(a[12]=p(`<p>Logging is effortless and extensible in Stone.js.</p><p>At its core, Stone.js provides a built-in logging utility through a console-based singleton logger. This default logger is designed for simplicity, it&#39;s available globally, context-aware, and ready to use without configuration.</p><p>But that&#39;s just the beginning.</p><p>The logger system in Stone.js is fully integrated into the Continuum Architecture, meaning it works seamlessly across all dimensions: setup, initialization, and integration. You can access it from lifecycle hooks, middleware, event handlers, services and so on. The default implementation is perfect for development and prototyping, but when you need more power, you can replace it entirely with your own logger (like <a href="https://getpino.io/#/" target="_blank" rel="noopener noreferrer">pino</a> or <a href="https://github.com/winstonjs/winston" target="_blank" rel="noopener noreferrer">winston</a>).</p><p>Stone.js treats logging like any other part of your internal context: injectable, configurable, and replaceable.</p><p>Logging is not just for debugging, it&#39;s a first-class citizen in the Stone.js ecosystem. Whether you&#39;re building a CLI tool, a backend microservice, or a frontend app, the logger is always there, fluent with your context.</p><h2 id="using-logger" tabindex="-1"><a class="header-anchor" href="#using-logger"><span>Using Logger</span></a></h2><h3 id="access-the-logger" tabindex="-1"><a class="header-anchor" href="#access-the-logger"><span>Access the Logger</span></a></h3><p>Stone.js gives you multiple ways to access the logger, depending on the context you&#39;re in. The default logger is available as a singleton, but itâ€™s also automatically injected into the system&#39;s internal context during setup, so no need for global imports, you can just inject it where you need it.</p><h4 id="global-singleton-anywhere" tabindex="-1"><a class="header-anchor" href="#global-singleton-anywhere"><span>Global Singleton (Anywhere)</span></a></h4><p>The simplest way to log from anywhere in your code is by using the singleton instance:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Logger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">myEventHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  Logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Received event!&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use this approach when you&#39;re not inside an injected context like a function-based service, middleware, or lifecycle hook. But avoid it in constructors if you can inject <code>logger</code> properly.</p><h4 id="contextual-injection-preferred" tabindex="-1"><a class="header-anchor" href="#contextual-injection-preferred"><span>Contextual Injection (Preferred)</span></a></h4><p>In most cases, you should inject the logger into your modules. This is the preferred way to access the logger, as it keeps your code clean and testable.</p>`,15)),i(l,{data:[{id:"Class-based"},{id:"Factory-based"}],active:0,"tab-id":"class-factory-function"},{title0:e(({value:t,isActive:o})=>a[0]||(a[0]=[s("Class-based")])),title1:e(({value:t,isActive:o})=>a[1]||(a[1]=[s("Factory-based")])),tab0:e(({value:t,isActive:o})=>a[2]||(a[2]=[n("h5",{id:"class-based",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-based"},[n("span",null,"Class-based")])],-1),n("p",null,"For class-based modules, like services or event handlers, the logger is injected into the constructor:",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Service"),n("span",{class:"token punctuation"},","),s(" ILogger "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token decorator"},[n("span",{class:"token at operator"},"@"),n("span",{class:"token function"},"Service")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" alias"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'MyService'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyService"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"readonly"),s(" logger"),n("span",{class:"token operator"},":"),s(" ILogger"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" logger "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" logger"),n("span",{class:"token operator"},":"),s(" ILogger "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("logger "),n("span",{class:"token operator"},"="),s(" logger"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"doSomething"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("logger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Service method executed'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("p",null,[n("strong",null,"Tip"),s(": Avoid accessing the global "),n("code",null,"Logger"),s(" singleton in constructors, always prefer injection. This keeps your code clean, testable, and aligned with the Continuum.")],-1)])),tab1:e(({value:t,isActive:o})=>a[3]||(a[3]=[n("h5",{id:"factory-based",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#factory-based"},[n("span",null,"Factory-based")])],-1),n("p",null,[s("For factory-based modules, like a middleware, the logger can be accessed through the "),n("code",null,"context"),s(" parameter:")],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"MyBlueprintMiddleware"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" logger "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    logger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Blueprint middleware triggered'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[13]||(a[13]=p(`<h3 id="logger-api" tabindex="-1"><a class="header-anchor" href="#logger-api"><span>Logger API</span></a></h3><p>The logger in Stone.js follows a minimal and strict contract, defined by the <code>ILogger</code> interface. Whether you&#39;re using the built-in logger or your own, the same interface applies.</p><p>The default implementation is <code>ConsoleLogger</code>, which internally uses the native <code>console</code> methods and respects your blueprint configuration.</p><h4 id="ilogger-interface" tabindex="-1"><a class="header-anchor" href="#ilogger-interface"><span>ILogger Interface</span></a></h4><p>The interface defines the following methods:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ILogger</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">info</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token function">debug</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token function">warn</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  log<span class="token operator">?</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  trace<span class="token operator">?</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>optionalParams<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="default-implementation-consolelogger" tabindex="-1"><a class="header-anchor" href="#default-implementation-consolelogger"><span>Default Implementation: ConsoleLogger</span></a></h4><p>The built-in logger is implemented as <code>ConsoleLogger</code> and is used automatically unless you override it.</p><p>Internally, it:</p><ul><li>Filters messages based on the <code>stone.logger.level</code> set in the blueprint.</li><li>Supports an optional timestamp prefix using <code>stone.logger.useTimestamp</code>.</li><li>Can print colored output when supported via <code>stone.logger.useColors</code>.</li><li>Automatically enables verbose logging when <code>stone.debug</code> is set to <code>true</code>.</li></ul><p>Hereâ€™s a typical usage:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;This will only be shown if log level is debug or lower&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Something went wrong&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> context<span class="token operator">:</span> <span class="token string">&#39;ServiceX&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This logger is available immediately after the blueprint is initialized and is accessible from anywhere in your application.</p><p>The behavior is context-aware, meaning you donâ€™t need to manually check log levels or environment conditions. Stone.js handles that based on your blueprint settings.</p><h3 id="configuring-the-logger" tabindex="-1"><a class="header-anchor" href="#configuring-the-logger"><span>Configuring the Logger</span></a></h3><p>Stone.js uses the blueprint as the single source of truth for all logger configuration. You donâ€™t need to hardcode log levels or timestamps, just define your preferences, and the logger will adapt automatically across your entire application.</p><h4 id="available-configuration-keys" tabindex="-1"><a class="header-anchor" href="#available-configuration-keys"><span>Available Configuration Keys</span></a></h4><p>You can set the following options in your blueprint:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.level&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Minimum log level</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.useTimestamp&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Include timestamps in logs</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.useColors&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Colored output (when supported)</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.debug&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// Force all logs, even in production</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These options work together to determine whether and how logs are shown. For example:</p><ul><li>If <code>stone.logger.level</code> is set to <code>&quot;warn&quot;</code>, then only <code>warn()</code> and <code>error()</code> messages will be printed.</li><li>If <code>stone.debug</code> is set to <code>true</code>, it overrides the level and prints everything regardless of the level setting.</li><li>If <code>stone.logger.useTimestamp</code> is <code>true</code>, each message will be prefixed with the current ISO date.</li></ul><h4 id="supported-log-levels" tabindex="-1"><a class="header-anchor" href="#supported-log-levels"><span>Supported Log Levels</span></a></h4><p>Stone.js uses the following enum for log levels:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">enum</span> LogLevel <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">TRACE</span> <span class="token operator">=</span> <span class="token string">&#39;trace&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">DEBUG</span> <span class="token operator">=</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">INFO</span> <span class="token operator">=</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">WARN</span> <span class="token operator">=</span> <span class="token string">&#39;warn&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">ERROR</span> <span class="token operator">=</span> <span class="token string">&#39;error&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The default level is <code>&quot;error&quot;</code> if no level is specified.</p><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> LogLevel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.level&#39;</span><span class="token punctuation">,</span> LogLevel<span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.useTimestamp&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.useColors&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This setup ensures that your logs are verbose, readable, and timestamped, ideal for development or debugging sessions.</p><h2 id="customizing-the-logger" tabindex="-1"><a class="header-anchor" href="#customizing-the-logger"><span>Customizing the Logger</span></a></h2><p>Stone.js is not opinionated about how you log, it simply defines an interface and lets you plug in whatever tool fits your needs. If the built-in <code>ConsoleLogger</code> doesnâ€™t meet your requirements, you can replace it with your own implementation.</p><p>You might want to customize the logger if:</p><ul><li>You need file-based or remote logging (e.g. writing to disk, HTTP, Elasticsearch).</li><li>You use an external logging system like <code>pino</code>, <code>winston</code>, or <code>bunyan</code>.</li><li>You want to apply custom formatting, redaction, or metadata.</li></ul><p>Stone.js allows you to create a logger using either a <strong>class</strong> or a <strong>factory function</strong>, as long as it implements the <code>ILogger</code> interface.</p><h3 id="defining-a-custom-logger" tabindex="-1"><a class="header-anchor" href="#defining-a-custom-logger"><span>Defining a Custom Logger</span></a></h3>`,34)),i(l,{data:[{id:"Class-based"},{id:"Factory-based"}],active:0,"tab-id":"class-factory-function"},{title0:e(({value:t,isActive:o})=>a[4]||(a[4]=[s("Class-based")])),title1:e(({value:t,isActive:o})=>a[5]||(a[5]=[s("Factory-based")])),tab0:e(({value:t,isActive:o})=>a[6]||(a[6]=[n("h4",{id:"class-based-logger",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-based-logger"},[n("span",null,"Class-based Logger")])],-1),n("p",null,"This approach gives you full control and access to the blueprint.",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" ILogger "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyCustomLogger"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"ILogger"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"readonly"),s(" options"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" blueprint "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),s("message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("params"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"unknown"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// custom info implementation")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"debug"),n("span",{class:"token punctuation"},"("),s("message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("params"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"unknown"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// custom debug implementation")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),s("message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("params"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"unknown"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// custom warn implementation")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"error"),n("span",{class:"token punctuation"},"("),s("message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("params"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"unknown"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// custom error implementation")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:o})=>a[7]||(a[7]=[n("h4",{id:"factory-based-logger",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#factory-based-logger"},[n("span",null,"Factory-based Logger")])],-1),n("p",null,"This is simpler and works well for wrapping third-party libraries.",-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" ILogger "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" MyCustomLogger "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" blueprint "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" ILogger "),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function-variable function"},"info"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),s("msg"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("params"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"/* custom info logic */"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function-variable function"},"debug"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),s("msg"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("params"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"/* custom debug logic */"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function-variable function"},"warn"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),s("msg"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("params"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"/* custom warn logic */"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function-variable function"},"error"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),s("msg"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("params"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"/* custom error logic */"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[14]||(a[14]=p(`<p>Both approaches give you access to the blueprint, so you can conditionally enable logs, pull log levels, or respect other system settings.</p><h3 id="using-a-custom-logger" tabindex="-1"><a class="header-anchor" href="#using-a-custom-logger"><span>Using a Custom Logger</span></a></h3><p>Once your custom logger is defined, either as a class or a factory, you donâ€™t need to change how you use logging in your application.<br> Everything works the same: you can still access the logger via the global singleton or via dependency injection in lifecycle hooks, services, or middleware.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Logger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">myHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  Logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Custom logger is now active&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Under the hood, the <code>Logger</code> singleton will delegate to your custom implementation.<br> So once registered, all logging across your system will automatically route through your logger.</p><p>This makes it easy to swap in advanced loggers like Pino, Winston, or your in-house system without rewriting your application logic.</p><h3 id="registering-a-custom-logger" tabindex="-1"><a class="header-anchor" href="#registering-a-custom-logger"><span>Registering a Custom Logger</span></a></h3><p>To register your custom logger, use the <code>defineLogger()</code> utility provided by Stone.js. This function tells the system which logger to use and how to instantiate it.</p><p>The <code>defineLogger</code> signature is:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span></span>
<span class="line">  logger<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ILogger <span class="token operator">|</span> <span class="token punctuation">(</span>options<span class="token operator">:</span> <span class="token punctuation">{</span> blueprint<span class="token operator">:</span> IBlueprint <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ILogger<span class="token punctuation">,</span></span>
<span class="line">  isFactory<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span></span>
<span class="line">  config<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>logger</code>: your custom logger class or factory function.</li><li><code>isFactory</code>: <code>true</code> if itâ€™s a factory, <code>false</code> if itâ€™s a class.</li><li><code>config</code>: optional additional settings that will be injected into the blueprint before instantiating the logger.</li></ul>`,11)),i(l,{data:[{id:"Class-based"},{id:"Factory-based"}],active:0,"tab-id":"class-factory-function"},{title0:e(({value:t,isActive:o})=>a[8]||(a[8]=[s("Class-based")])),title1:e(({value:t,isActive:o})=>a[9]||(a[9]=[s("Factory-based")])),tab0:e(({value:t,isActive:o})=>a[10]||(a[10]=[n("h4",{id:"class-based-example",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-based-example"},[n("span",null,"Class-based example")])],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" defineLogger "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" MyCustomLogger "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./my-custom-logger'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"defineLogger"),n("span",{class:"token punctuation"},"("),s("MyCustomLogger"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("h4",{id:"registering-with-custom-config",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#registering-with-custom-config"},[n("span",null,"Registering with custom config")])],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[s("blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"defineLogger"),n("span",{class:"token punctuation"},"("),s("MyCustomLogger"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token string-property property"},"'stone.logger.level'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'debug'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token string-property property"},"'stone.logger.useTimestamp'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:o})=>a[11]||(a[11]=[n("h4",{id:"factory-based-example",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#factory-based-example"},[n("span",null,"Factory-based example")])],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" defineLogger "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@stone-js/core'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" MyCustomLogger "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./my-custom-logger'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"defineLogger"),n("span",{class:"token punctuation"},"("),s("MyCustomLogger"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),n("h4",{id:"registering-with-custom-config-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#registering-with-custom-config-1"},[n("span",null,"Registering with custom config")])],-1),n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[n("pre",null,[n("code",{class:"language-typescript"},[n("span",{class:"line"},[s("blueprint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"defineLogger"),n("span",{class:"token punctuation"},"("),s("MyCustomLogger"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token string-property property"},"'stone.logger.level'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'debug'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token string-property property"},"'stone.logger.useTimestamp'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[15]||(a[15]=p(`<p>This allows you to register your custom logger and inject any required configuration upfront, no extra boilerplate, just pure context-driven setup.</p><h2 id="example-using-pino-with-stone-js" tabindex="-1"><a class="header-anchor" href="#example-using-pino-with-stone-js"><span>Example: Using Pino with Stone.js</span></a></h2><p><a href="https://getpino.io/#/" target="_blank" rel="noopener noreferrer">Pino</a> is a high-performance JSON logger, ideal for structured logging in production environments.</p><h3 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> pino</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="factory-based-implementation" tabindex="-1"><a class="header-anchor" href="#factory-based-implementation"><span>Factory-Based Implementation</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// my-pino-logger.ts</span></span>
<span class="line"><span class="token keyword">import</span> pino <span class="token keyword">from</span> <span class="token string">&#39;pino&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ILogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> MyPinoLogger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> blueprint <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> ILogger <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> level <span class="token operator">=</span> blueprint<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.level&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> useTimestamp <span class="token operator">=</span> blueprint<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.useTimestamp&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">pino</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    level<span class="token punctuation">,</span></span>
<span class="line">    timestamp<span class="token operator">:</span> useTimestamp <span class="token operator">?</span> pino<span class="token punctuation">.</span>stdTimeFunctions<span class="token punctuation">.</span>isoTime <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">info</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extra<span class="token operator">:</span> params <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">debug</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extra<span class="token operator">:</span> params <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">warn</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extra<span class="token operator">:</span> params <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extra<span class="token operator">:</span> params <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">trace</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> logger<span class="token punctuation">.</span>trace<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extra<span class="token operator">:</span> params <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">log</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extra<span class="token operator">:</span> params <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="registering-the-factory-based-logger" tabindex="-1"><a class="header-anchor" href="#registering-the-factory-based-logger"><span>Registering the Factory-based Logger</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> MyPinoLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./my-pino-logger&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">defineLogger</span><span class="token punctuation">(</span>MyPinoLogger<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&#39;stone.logger.level&#39;</span><span class="token operator">:</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;stone.logger.useTimestamp&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="example-using-winston-with-stone-js" tabindex="-1"><a class="header-anchor" href="#example-using-winston-with-stone-js"><span>Example: Using Winston with Stone.js</span></a></h2><p><a href="https://github.com/winstonjs/winston" target="_blank" rel="noopener noreferrer">Winston</a> is a flexible logger with support for multiple transports (console, file, HTTP, etc).</p><h3 id="installation-1" tabindex="-1"><a class="header-anchor" href="#installation-1"><span>Installation</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> winston</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="class-based-implementation" tabindex="-1"><a class="header-anchor" href="#class-based-implementation"><span>Class-Based Implementation</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// my-winston-logger.ts</span></span>
<span class="line"><span class="token keyword">import</span> winston <span class="token keyword">from</span> <span class="token string">&#39;winston&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ILogger<span class="token punctuation">,</span> IBlueprint <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyWinstonLogger</span> <span class="token keyword">implements</span> <span class="token class-name">ILogger</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">readonly</span> logger<span class="token operator">:</span> winston<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span> blueprint <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> blueprint<span class="token operator">:</span> IBlueprint <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> level <span class="token operator">=</span> blueprint<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.level&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> useTimestamp <span class="token operator">=</span> blueprint<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.useTimestamp&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>logger <span class="token operator">=</span> winston<span class="token punctuation">.</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      level<span class="token punctuation">,</span></span>
<span class="line">      format<span class="token operator">:</span> winston<span class="token punctuation">.</span>format<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">...</span><span class="token punctuation">(</span>useTimestamp</span>
<span class="line">          <span class="token operator">?</span> <span class="token punctuation">[</span>winston<span class="token punctuation">.</span>format<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> format<span class="token operator">:</span> <span class="token string">&#39;YYYY-MM-DD HH:mm:ss&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">          <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        winston<span class="token punctuation">.</span>format<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> timestamp<span class="token punctuation">,</span> level<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token operator">...</span>meta <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">const</span> base <span class="token operator">=</span> useTimestamp <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>timestamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">const</span> extras <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>base<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>level<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>extras<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      transports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">winston</span><span class="token punctuation">.</span>transports<span class="token punctuation">.</span><span class="token function">Console</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">info</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span> extra<span class="token operator">:</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">debug</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span> extra<span class="token operator">:</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">warn</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span> extra<span class="token operator">:</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span> extra<span class="token operator">:</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  trace<span class="token operator">?</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span>verbose<span class="token operator">?.</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span> extra<span class="token operator">:</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  log<span class="token operator">?</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span> extra<span class="token operator">:</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="registering-the-class-based-logger" tabindex="-1"><a class="header-anchor" href="#registering-the-class-based-logger"><span>Registering the Class-Based Logger</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> MyWinstonLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./my-winston-logger&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">defineLogger</span><span class="token punctuation">(</span>MyWinstonLogger<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&#39;stone.logger.level&#39;</span><span class="token operator">:</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;stone.logger.useTimestamp&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These examples give you real-world logging power while staying fully compatible with Stone.js.</p><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>Use these guidelines to ensure that logging in your Stone.js application remains clean, efficient, and maintainable:</p><h4 id="prefer-dependency-injection-over-global-access" tabindex="-1"><a class="header-anchor" href="#prefer-dependency-injection-over-global-access"><span>Prefer dependency injection over global access</span></a></h4><p>Always use the injected <code>logger</code> when you&#39;re inside:</p><ul><li>a lifecycle hook</li><li>a blueprint middleware</li><li>a service constructor</li></ul><p>Avoid importing and using the <code>Logger</code> singleton in places where dependency injection is possible. This keeps your code decoupled and testable.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// âœ… Preferred</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">readonly</span> logger<span class="token operator">:</span> ILogger<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span> logger <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> logger<span class="token operator">:</span> ILogger <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>logger <span class="token operator">=</span> logger<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;Doing something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ðŸš« Avoid (hard to test and mock)</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Logger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line">Logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Direct usage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="centralize-logging-configuration" tabindex="-1"><a class="header-anchor" href="#centralize-logging-configuration"><span>Centralize logging configuration</span></a></h4><p>Use the blueprint to set all logger-related options. Avoid hardcoding log levels or formatting rules inside your code.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.level&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">blueprint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;stone.logger.useTimestamp&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This ensures consistency across environments and makes it easier to switch logging strategies later.</p><h4 id="be-selective-with-verbosity" tabindex="-1"><a class="header-anchor" href="#be-selective-with-verbosity"><span>Be selective with verbosity</span></a></h4><ul><li>Use <code>debug()</code> for developer-only insights.</li><li>Use <code>info()</code> for general application state.</li><li>Use <code>warn()</code> for unexpected but non-fatal conditions.</li><li>Use <code>error()</code> only when something truly failed and should be investigated.</li><li>Use <code>trace()</code> sparingly, it&#39;s meant for very fine-grained diagnostics.</li></ul><p>Donâ€™t log everything all the time, too much logging can hide real problems in a sea of noise.</p><h4 id="avoid-logging-sensitive-data" tabindex="-1"><a class="header-anchor" href="#avoid-logging-sensitive-data"><span>Avoid logging sensitive data</span></a></h4><p>Even though logs are meant for diagnostics, never log passwords, tokens, personal identifiers, or any confidential business logic. If needed, use redaction libraries or manual masking.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;User login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// âœ… okay</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Token:&#39;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ðŸš« avoid this</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="customize-your-logger-when-needed" tabindex="-1"><a class="header-anchor" href="#customize-your-logger-when-needed"><span>Customize your logger when needed</span></a></h4><p>When you&#39;re ready to move beyond the console:</p><ul><li>Choose <code>pino</code> for speed and structured logs.</li><li>Choose <code>winston</code> for flexibility and multiple output targets.</li><li>Choose your own tool if it fits your ecosystem.</li></ul><p>Stone.js makes swapping the logger easy, just implement the <code>ILogger</code> interface and register it via <code>defineLogger()</code>.</p><h4 id="keep-log-messages-meaningful" tabindex="-1"><a class="header-anchor" href="#keep-log-messages-meaningful"><span>Keep log messages meaningful</span></a></h4><p>Treat log messages like code comments. They should:</p><ul><li>Describe what happened</li><li>Be human-readable</li><li>Help future-you debug an issue</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;User created&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> userId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// âœ…</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;Something happened&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ðŸš« too vague</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Logging in Stone.js is simple, flexible, and built to scale with your application.</p><p>Out of the box, you get a lightweight, console-based logger thatâ€™s fully integrated into the framework. Itâ€™s available globally via a singleton and is automatically injected into your context where appropriate, services, middleware, lifecycle hooks, and more.</p><p>You can configure its behavior through the blueprint, adjusting verbosity, timestamp formatting, and debug mode. When you&#39;re ready to move beyond the basics, you can easily replace the logger with your own class or factory, whether thatâ€™s wrapping a library like Pino or Winston, or building a completely custom solution.</p><p>Stone.js doesnâ€™t lock you into one way of doing things, it gives you a common interface, a clean contract, and the freedom to extend logging in a way that fits your needs.</p><p><strong>Quick recap:</strong></p><ul><li>Use the logger via <code>Logger</code> or inject it where available.</li><li>Configure it with <code>stone.logger.level</code>, <code>useTimestamp</code>, and <code>stone.debug</code>.</li><li>Implement <code>ILogger</code> if you want to customize.</li><li>Register your logger using <code>defineLogger()</code>, class or factory, your choice.</li><li>Log intentionally. Debug confidently. Deploy with traceability.</li></ul><p>That&#39;s it, you&#39;re now fully equipped to tame your logs in the Continuum.</p>`,51))])}const h=c(d,[["render",g]]),y=JSON.parse('{"path":"/docs/essentials/logging.html","title":"Logging","lang":"en-US","frontmatter":{"title":"Logging","next":"../router/","description":"Logging is effortless and extensible in Stone.js. At its core, Stone.js provides a built-in logging utility through a console-based singleton logger. This default logger is desi...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Logging\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-10T06:42:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/docs/essentials/logging.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Logging"}],["meta",{"property":"og:description","content":"Logging is effortless and extensible in Stone.js. At its core, Stone.js provides a built-in logging utility through a console-based singleton logger. This default logger is desi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-10T06:42:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T06:42:23.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749537743000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":7.8,"words":2340},"filePathRelative":"docs/essentials/logging.md","autoDesc":true}');export{h as comp,y as data};
