import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as l,e as i,w as e,r as d,o as u,a,d as n}from"./app-CrbMk51G.js";const h={};function k(m,s){const p=d("Tabs");return u(),r("div",null,[s[8]||(s[8]=l('<p>In Stone.js, a <strong>layout</strong> is a special kind of component that wraps your pages to provide consistent structure and shared elements, like headers, footers, navigation bars, or global wrappers.</p><p>Unlike a <strong>page</strong>, a layout is <strong>not</strong> an event handler. It doesn’t process incoming events or respond to the request lifecycle, it only participates in the <strong>rendering phase</strong>. You can think of a layout as a <strong>view-dimension scaffold</strong>: it receives the output of a page and determines how that page is framed and displayed.</p><h3 id="why-not-treat-a-layout-like-a-page" tabindex="-1"><a class="header-anchor" href="#why-not-treat-a-layout-like-a-page"><span>Why not treat a layout like a page?</span></a></h3><p>Because their responsibilities are different:</p><table><thead><tr><th>Feature</th><th>Page</th><th>Layout</th></tr></thead><tbody><tr><td>Handles events</td><td>✅ Yes (event handler)</td><td>❌ No</td></tr><tr><td>Has <code>handle()</code></td><td>✅ Yes</td><td>❌ No</td></tr><tr><td>Has <code>render()</code></td><td>✅ Yes</td><td>✅ Yes</td></tr><tr><td>Can define metadata</td><td>✅ Yes</td><td>✅ Yes (<code>head()</code> optional)</td></tr><tr><td>Receives lifecycle</td><td>✅ Yes (hooks, middleware)</td><td>❌ No</td></tr><tr><td>Wraps other content</td><td>❌ No</td><td>✅ Yes (via <code>&lt;StoneOutlet /&gt;</code>)</td></tr></tbody></table><p>This separation gives you architectural clarity:</p><ul><li>Pages handle logic, load data, and respond to context</li><li>Layouts provide consistent structure, styling, and UI context</li></ul><h3 id="how-it-fits-in-the-continuum" tabindex="-1"><a class="header-anchor" href="#how-it-fits-in-the-continuum"><span>How it fits in the Continuum</span></a></h3><p>Layouts live entirely in the <strong>view dimension</strong> of your application. They don’t care about transport protocols, event formats, or middleware. They exist to make the visual layer modular, composable, and context-aware, without leaking business logic.</p><p>Stone.js provides a familiar, React-compatible structure for defining and rendering layouts, while ensuring they remain <strong>platform-agnostic</strong> and <strong>easy to manage</strong> across SPA, SSR, and SOR applications.</p><h2 id="defining-layouts" tabindex="-1"><a class="header-anchor" href="#defining-layouts"><span>Defining Layouts</span></a></h2><p>Layouts in Stone.js are defined just like pages, as <strong>classes</strong> or <strong>factories</strong>, but with an important distinction:</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>Layouts do <strong>not</strong> implement a <code>handle()</code> method, because they are <strong>not event handlers</strong>.</p></div><p>Instead, a layout can implement:</p><ul><li><code>render()</code>: to return the layout structure as a React component</li><li><code>head()</code>: optionally, to define layout-wide <code>&lt;title&gt;</code>, <code>&lt;meta&gt;</code>, <code>&lt;link&gt;</code>, etc.</li></ul><p>By design, layouts are <strong>view-only</strong>, and cannot:</p><ul><li>Intercept or modify incoming events</li><li>Use middleware</li><li>Rely on lifecycle hooks</li></ul><p>This keeps their purpose clear and limited: <strong>structure the UI, don’t handle logic</strong>.</p>',18)),i(p,{data:[{id:"Class-based"},{id:"Factory-based"}],active:0,"tab-id":"class-factory-function"},{title0:e(({value:t,isActive:o})=>s[0]||(s[0]=[n("Class-based")])),title1:e(({value:t,isActive:o})=>s[1]||(s[1]=[n("Factory-based")])),tab0:e(({value:t,isActive:o})=>s[2]||(s[2]=[a("h3",{id:"class-based-layouts",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#class-based-layouts"},[a("span",null,"Class-Based Layouts")])],-1),a("p",null,"Class-based layouts provide a declarative structure that pairs perfectly with decorators.",-1),a("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[a("pre",null,[a("code",{class:"language-typescript"},[a("span",{class:"line"},[a("span",{class:"token keyword"},"import"),n(),a("span",{class:"token punctuation"},"{"),n(" IComponentEventHandler"),a("span",{class:"token punctuation"},","),n(" ReactIncomingEvent"),a("span",{class:"token punctuation"},","),n(" RenderLayoutContext"),a("span",{class:"token punctuation"},","),n(" StoneOutlet "),a("span",{class:"token punctuation"},"}"),n(),a("span",{class:"token keyword"},"from"),n(),a("span",{class:"token string"},"'@stone-js/use-react'")]),n(`
`),a("span",{class:"line"}),n(`
`),a("span",{class:"line"},[a("span",{class:"token keyword"},"export"),n(),a("span",{class:"token keyword"},"class"),n(),a("span",{class:"token class-name"},"BaseLayout"),n(),a("span",{class:"token keyword"},"implements"),n(),a("span",{class:"token class-name"},[n("IComponentEventHandler"),a("span",{class:"token operator"},"<"),n("ReactIncomingEvent"),a("span",{class:"token operator"},">")]),n(),a("span",{class:"token punctuation"},"{")]),n(`
`),a("span",{class:"line"},[n("  "),a("span",{class:"token function"},"render"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),n(" children "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},":"),n(" RenderLayoutContext"),a("span",{class:"token operator"},"<"),n("ReactNode"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{")]),n(`
`),a("span",{class:"line"},[n("    "),a("span",{class:"token keyword"},"return"),n(),a("span",{class:"token punctuation"},"(")]),n(`
`),a("span",{class:"line"},[n("      "),a("span",{class:"token operator"},"<"),n("div className"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"layout"'),a("span",{class:"token operator"},">")]),n(`
`),a("span",{class:"line"},[n("        "),a("span",{class:"token operator"},"<"),n("header"),a("span",{class:"token operator"},">"),n("Header"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),n("header"),a("span",{class:"token operator"},">")]),n(`
`),a("span",{class:"line"},[n("        "),a("span",{class:"token operator"},"<"),n("main"),a("span",{class:"token operator"},">"),a("span",{class:"token operator"},"<"),n("StoneOutlet"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},"{"),n("children"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),n("StoneOutlet"),a("span",{class:"token operator"},">"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),n("main"),a("span",{class:"token operator"},">")]),n(`
`),a("span",{class:"line"},[n("        "),a("span",{class:"token operator"},"<"),n("footer"),a("span",{class:"token operator"},">"),n("Footer"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),n("footer"),a("span",{class:"token operator"},">")]),n(`
`),a("span",{class:"line"},[n("      "),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),n("div"),a("span",{class:"token operator"},">")]),n(`
`),a("span",{class:"line"},[n("    "),a("span",{class:"token punctuation"},")")]),n(`
`),a("span",{class:"line"},[n("  "),a("span",{class:"token punctuation"},"}")]),n(`
`),a("span",{class:"line"}),n(`
`),a("span",{class:"line"},[n("  "),a("span",{class:"token function"},"head"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),n(" HeadContext "),a("span",{class:"token punctuation"},"{")]),n(`
`),a("span",{class:"line"},[n("    "),a("span",{class:"token keyword"},"return"),n(),a("span",{class:"token punctuation"},"{")]),n(`
`),a("span",{class:"line"},[n("      title"),a("span",{class:"token operator"},":"),n(),a("span",{class:"token string"},"'My App'"),a("span",{class:"token punctuation"},",")]),n(`
`),a("span",{class:"line"},[n("      description"),a("span",{class:"token operator"},":"),n(),a("span",{class:"token string"},"'The base layout of the application'"),a("span",{class:"token punctuation"},",")]),n(`
`),a("span",{class:"line"},[n("    "),a("span",{class:"token punctuation"},"}")]),n(`
`),a("span",{class:"line"},[n("  "),a("span",{class:"token punctuation"},"}")]),n(`
`),a("span",{class:"line"},[a("span",{class:"token punctuation"},"}")]),n(`
`),a("span",{class:"line"})])]),a("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:o})=>s[3]||(s[3]=[a("h3",{id:"factory-based-layouts",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#factory-based-layouts"},[a("span",null,"Factory-Based Layouts")])],-1),a("p",null,[n("Prefer factories when you want dynamic construction or are using the "),a("strong",null,"imperative API"),n(".")],-1),a("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[a("pre",null,[a("code",{class:"language-typescript"},[a("span",{class:"line"},[a("span",{class:"token keyword"},"import"),n(),a("span",{class:"token punctuation"},"{"),n(" definePageLayout"),a("span",{class:"token punctuation"},","),n(" StoneOutlet "),a("span",{class:"token punctuation"},"}"),n(),a("span",{class:"token keyword"},"from"),n(),a("span",{class:"token string"},"'@stone-js/use-react'")]),n(`
`),a("span",{class:"line"}),n(`
`),a("span",{class:"line"},[a("span",{class:"token keyword"},"export"),n(),a("span",{class:"token keyword"},"const"),n(),a("span",{class:"token function-variable function"},"BaseLayout"),n(),a("span",{class:"token operator"},"="),n(),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token operator"},"=>"),n(),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{")]),n(`
`),a("span",{class:"line"},[n("  "),a("span",{class:"token function"},"render"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),n(" children "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},":"),n(" RenderLayoutContext"),a("span",{class:"token operator"},"<"),n("ReactNode"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{")]),n(`
`),a("span",{class:"line"},[n("    "),a("span",{class:"token keyword"},"return"),n(),a("span",{class:"token punctuation"},"(")]),n(`
`),a("span",{class:"line"},[n("      "),a("span",{class:"token operator"},"<"),n("div className"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"layout"'),a("span",{class:"token operator"},">")]),n(`
`),a("span",{class:"line"},[n("        "),a("span",{class:"token operator"},"<"),n("nav"),a("span",{class:"token operator"},">"),n("Navigation"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),n("nav"),a("span",{class:"token operator"},">")]),n(`
`),a("span",{class:"line"},[n("        "),a("span",{class:"token operator"},"<"),n("StoneOutlet"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},"{"),n("children"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),n("StoneOutlet"),a("span",{class:"token operator"},">")]),n(`
`),a("span",{class:"line"},[n("      "),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),n("div"),a("span",{class:"token operator"},">")]),n(`
`),a("span",{class:"line"},[n("    "),a("span",{class:"token punctuation"},")")]),n(`
`),a("span",{class:"line"},[n("  "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},",")]),n(`
`),a("span",{class:"line"}),n(`
`),a("span",{class:"line"},[n("  "),a("span",{class:"token function"},"head"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),n(" HeadContext "),a("span",{class:"token punctuation"},"{")]),n(`
`),a("span",{class:"line"},[n("    "),a("span",{class:"token keyword"},"return"),n(),a("span",{class:"token punctuation"},"{")]),n(`
`),a("span",{class:"line"},[n("      title"),a("span",{class:"token operator"},":"),n(),a("span",{class:"token string"},"'Base Layout'"),a("span",{class:"token punctuation"},",")]),n(`
`),a("span",{class:"line"},[n("      metas"),a("span",{class:"token operator"},":"),n(),a("span",{class:"token punctuation"},"[")]),n(`
`),a("span",{class:"line"},[n("        "),a("span",{class:"token punctuation"},"{"),n(" name"),a("span",{class:"token operator"},":"),n(),a("span",{class:"token string"},"'viewport'"),a("span",{class:"token punctuation"},","),n(" content"),a("span",{class:"token operator"},":"),n(),a("span",{class:"token string"},"'width=device-width, initial-scale=1'"),n(),a("span",{class:"token punctuation"},"}")]),n(`
`),a("span",{class:"line"},[n("      "),a("span",{class:"token punctuation"},"]")]),n(`
`),a("span",{class:"line"},[n("    "),a("span",{class:"token punctuation"},"}")]),n(`
`),a("span",{class:"line"},[n("  "),a("span",{class:"token punctuation"},"}")]),n(`
`),a("span",{class:"line"},[a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")")]),n(`
`),a("span",{class:"line"})])]),a("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1)])),_:1}),s[9]||(s[9]=l('<div class="hint-container info"><p class="hint-container-title">Info</p><p>Even though the layout implements IComponentEventHandler, only the render() and head() methods are used.</p></div><h2 id="registering-layouts" tabindex="-1"><a class="header-anchor" href="#registering-layouts"><span>Registering Layouts</span></a></h2><p>Just like pages, layouts in Stone.js must be <strong>explicitly registered</strong> so the framework can associate them with your pages.</p><p>You can register a layout using:</p><ul><li>The <strong>declarative API</strong>, with <code>@PageLayout()</code>, for class-based layouts</li><li>The <strong>imperative API</strong>, with <code>definePageLayout()</code>, for any layout shape</li></ul><p>Let’s look at both.</p>',6)),i(p,{data:[{id:"Declarative"},{id:"Imperative"}],active:0,"tab-id":"declarative-imperative"},{title0:e(({value:t,isActive:o})=>s[4]||(s[4]=[n("Declarative")])),title1:e(({value:t,isActive:o})=>s[5]||(s[5]=[n("Imperative")])),tab0:e(({value:t,isActive:o})=>s[6]||(s[6]=[a("h3",{id:"declarative-registration",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#declarative-registration"},[a("span",null,"Declarative Registration")])],-1),a("p",null,[n("If your layout is defined as a class, simply annotate it with the "),a("code",null,"@PageLayout()"),n(" decorator:")],-1),a("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[a("pre",null,[a("code",{class:"language-typescript"},[a("span",{class:"line"},[a("span",{class:"token keyword"},"import"),n(),a("span",{class:"token punctuation"},"{"),n(" PageLayout "),a("span",{class:"token punctuation"},"}"),n(),a("span",{class:"token keyword"},"from"),n(),a("span",{class:"token string"},"'@stone-js/use-react'")]),n(`
`),a("span",{class:"line"}),n(`
`),a("span",{class:"line"},[a("span",{class:"token decorator"},[a("span",{class:"token at operator"},"@"),a("span",{class:"token function"},"PageLayout")]),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),n(" name"),a("span",{class:"token operator"},":"),n(),a("span",{class:"token string"},"'default'"),n(),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")")]),n(`
`),a("span",{class:"line"},[a("span",{class:"token keyword"},"export"),n(),a("span",{class:"token keyword"},"class"),n(),a("span",{class:"token class-name"},"BaseLayout"),n(),a("span",{class:"token punctuation"},"{"),n(),a("span",{class:"token operator"},"..."),n(),a("span",{class:"token punctuation"},"}")]),n(`
`),a("span",{class:"line"})])]),a("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),a("p",null,[n("The "),a("code",null,"name"),n(" parameter allows you to:")],-1),a("ul",null,[a("li",null,[n("Set a default layout for all pages ("),a("code",null,"name: 'default'"),n(")")]),a("li",null,[n("Register multiple named layouts for different sections ("),a("code",null,"'admin'"),n(", "),a("code",null,"'auth'"),n(", etc.)")])],-1),a("p",null,[n("Any page that does "),a("strong",null,"not"),n(" explicitly specify a layout will fall back to the one registered with "),a("code",null,"name: 'default'"),n(".")],-1)])),tab1:e(({value:t,isActive:o})=>s[7]||(s[7]=[a("h3",{id:"imperative-registration",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#imperative-registration"},[a("span",null,"Imperative Registration")])],-1),a("p",null,[n("For factory-based layouts or runtime registration, use "),a("code",null,"definePageLayout()"),n(":")],-1),a("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts"},[a("pre",null,[a("code",{class:"language-typescript"},[a("span",{class:"line"},[a("span",{class:"token keyword"},"import"),n(),a("span",{class:"token punctuation"},"{"),n(" definePageLayout "),a("span",{class:"token punctuation"},"}"),n(),a("span",{class:"token keyword"},"from"),n(),a("span",{class:"token string"},"'@stone-js/use-react'")]),n(`
`),a("span",{class:"line"}),n(`
`),a("span",{class:"line"},[n("blueprint"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"set"),a("span",{class:"token punctuation"},"("),a("span",{class:"token function"},"definePageLayout"),a("span",{class:"token punctuation"},"("),n("BaseLayout"),a("span",{class:"token punctuation"},","),n(),a("span",{class:"token punctuation"},"{"),n(" name"),a("span",{class:"token operator"},":"),n(),a("span",{class:"token string"},"'default'"),n(),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),n(),a("span",{class:"token boolean"},"true"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")")]),n(`
`),a("span",{class:"line"})])]),a("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),a("ul",null,[a("li",null,[n("The second argument is the same "),a("code",null,"PageLayoutOptions"),n(" object as in the decorator.")]),a("li",null,[n("The third "),a("code",null,"true"),n(" flag indicates this is a factory layout (not a class).")])],-1)])),_:1}),s[10]||(s[10]=l(`<p>You can define as many layouts as needed, then assign them per-page using their <code>name</code>.</p><h2 id="rendering-with-stoneoutlet" tabindex="-1"><a class="header-anchor" href="#rendering-with-stoneoutlet"><span>Rendering with <code>&lt;StoneOutlet /&gt;</code></span></a></h2><p>Layouts are wrappers, and every wrapper needs a place to render the wrapped content.</p><p>That’s the job of the <code>&lt;StoneOutlet /&gt;</code> component.</p><p>It acts as a placeholder in your layout where the <strong>page content will be injected</strong> during rendering. Without it, the layout renders, but the page disappears.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token operator">:</span> RenderLayoutContext<span class="token operator">&lt;</span>ReactNode<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app-shell<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Global Header</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StoneOutlet</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StoneOutlet</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Global Footer</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>children</code> prop holds the output of the matched page&#39;s <code>render()</code> method. <code>&lt;StoneOutlet /&gt;</code> simply renders those children in the correct place, enabling layout nesting across navigations.</p><h3 id="what-happens-without-stoneoutlet" tabindex="-1"><a class="header-anchor" href="#what-happens-without-stoneoutlet"><span>What happens without <code>&lt;StoneOutlet /&gt;</code>?</span></a></h3><p>If you omit <code>&lt;StoneOutlet /&gt;</code>, your layout will render, but the current page will <strong>not</strong> appear. This is not an error, it’s just missing the bridge between layout and page.</p><p>So always include <code>&lt;StoneOutlet /&gt;</code> where you want the page content to appear.</p><h2 id="choosing-layouts-per-page" tabindex="-1"><a class="header-anchor" href="#choosing-layouts-per-page"><span>Choosing Layouts Per Page</span></a></h2><p>Once you’ve defined and registered your layouts, you can assign them to individual pages using the <code>layout</code> option.</p><p>This works the same way whether you’re using the declarative API (<code>@Page()</code>) or the imperative API (<code>definePage()</code>).</p><h3 id="declarative-example" tabindex="-1"><a class="header-anchor" href="#declarative-example"><span>Declarative Example</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Page</span></span><span class="token punctuation">(</span><span class="token string">&#39;/dashboard&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;dashboard.view&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  layout<span class="token operator">:</span> <span class="token string">&#39;default&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DashboardPage</span> <span class="token keyword">implements</span> <span class="token class-name">IComponentEventHandler<span class="token operator">&lt;</span>ReactIncomingEvent<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Welcome to the dashboard<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="imperative-example" tabindex="-1"><a class="header-anchor" href="#imperative-example"><span>Imperative Example</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">definePage</span><span class="token punctuation">(</span>DashboardPage<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  path<span class="token operator">:</span> <span class="token string">&#39;/dashboard&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;dashboard.view&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  layout<span class="token operator">:</span> <span class="token string">&#39;default&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="layout-selection-logic" tabindex="-1"><a class="header-anchor" href="#layout-selection-logic"><span>Layout selection logic</span></a></h3><ul><li>If a page defines a <code>layout</code>, it will use that layout.</li><li>If not, and a layout with <code>name: &#39;default&#39;</code> is registered, that layout is used.</li><li>If no layout is set and no default exists, the page renders without a layout.</li></ul><p>This gives you full control while maintaining sensible defaults.</p><p>You can also create multiple layouts for different app sections (e.g., <code>default</code>, <code>auth</code>, <code>admin</code>) and assign them per page.</p><h2 id="defining-metadata-in-layouts" tabindex="-1"><a class="header-anchor" href="#defining-metadata-in-layouts"><span>Defining Metadata in Layouts</span></a></h2><p>Layouts aren’t just visual wrappers, they can also define shared <strong>HTML head tags</strong> like <code>&lt;title&gt;</code>, <code>&lt;meta&gt;</code>, <code>&lt;link&gt;</code>, and more.</p><p>This is useful when:</p><ul><li>You want consistent metadata across a group of pages</li><li>You want to provide a base <code>&lt;title&gt;</code> or <code>&lt;description&gt;</code> that pages can override or extend</li></ul><p>To do this, implement a <code>head()</code> method in your layout.</p><h3 id="example-layout-with-head-metadata" tabindex="-1"><a class="header-anchor" href="#example-layout-with-head-metadata"><span>Example: Layout with <code>head()</code> metadata</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> HeadContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@stone-js/use-react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> HeadContext <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    title<span class="token operator">:</span> <span class="token string">&#39;My App - Powered by Stone.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    description<span class="token operator">:</span> <span class="token string">&#39;A fast, universal app using Continuum Architecture&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    metas<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;viewport&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;width=device-width, initial-scale=1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;theme-color&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;#ffffff&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    links<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span> rel<span class="token operator">:</span> <span class="token string">&#39;icon&#39;</span><span class="token punctuation">,</span> href<span class="token operator">:</span> <span class="token string">&#39;/favicon.ico&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This metadata will be applied when the layout is active, even before any page-specific <code>head()</code> runs.</p><h3 id="page-layout-metadata" tabindex="-1"><a class="header-anchor" href="#page-layout-metadata"><span>Page + Layout metadata</span></a></h3><p>When both a <strong>page</strong> and a <strong>layout</strong> define metadata:</p><ul><li>The layout’s <code>head()</code> runs first</li><li>The page’s <code>head()</code> can <strong>override or extend</strong> the result</li></ul><p>This gives you fine-grained control over how your app’s metadata evolves across routes, without duplication.</p><p>Stone.js manages this automatically during SSR and hydration.</p><h2 id="renderlayoutcontext-reference" tabindex="-1"><a class="header-anchor" href="#renderlayoutcontext-reference"><span>RenderLayoutContext Reference</span></a></h2><p>The <code>render()</code> method of a layout receives a special context object: <code>RenderLayoutContext</code>.</p><p>It extends the standard <code>RenderContext</code> used in pages, but adds one important property: <code>children</code>.</p><p>This is how layouts can wrap the content rendered by the active page.</p><h3 id="type-definition" tabindex="-1"><a class="header-anchor" href="#type-definition"><span>Type definition</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">RenderContext<span class="token operator">&lt;</span>TData <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  data<span class="token operator">?</span><span class="token operator">:</span> TData</span>
<span class="line">  container<span class="token operator">:</span> IContainer</span>
<span class="line">  event<span class="token operator">:</span> ReactIncomingEvent</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">RenderLayoutContext<span class="token operator">&lt;</span>TChildren <span class="token operator">=</span> ReactNode<span class="token punctuation">,</span> UData <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span>
<span class="line">  <span class="token keyword">extends</span> <span class="token class-name">RenderContext<span class="token operator">&lt;</span>UData<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  children<span class="token operator">:</span> TChildren</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="key-properties" tabindex="-1"><a class="header-anchor" href="#key-properties"><span>Key properties</span></a></h3><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td><code>data</code></td><td>The data returned by the page handler (SSR-safe)</td></tr><tr><td><code>container</code></td><td>The DI container, to resolve services</td></tr><tr><td><code>event</code></td><td>The current incoming event (SSR-safe)</td></tr><tr><td><code>children</code></td><td>The page content that should be rendered inside layout</td></tr></tbody></table><p>You’ll use <code>children</code> with <code>&lt;StoneOutlet /&gt;</code> and <code>container</code> to resolve things like <code>Router</code>, <code>Config</code>, or <code>Logger</code> if needed.</p><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><p>Layouts are a powerful way to organize your UI, but their simplicity is what makes them effective. These practices will help you keep them clean, consistent, and efficient.</p><h4 id="keep-layouts-presentation-only" tabindex="-1"><a class="header-anchor" href="#keep-layouts-presentation-only"><span>Keep layouts presentation-only</span></a></h4><p>A layout should never fetch data, modify state, or implement logic. Its only job is to wrap page content in a reusable UI shell. If you need layout-wide data (e.g., user info, settings), resolve it in the <strong>page handler</strong> or through middleware, and pass it down through context.</p><h4 id="always-include-stoneoutlet" tabindex="-1"><a class="header-anchor" href="#always-include-stoneoutlet"><span>Always include <code>&lt;StoneOutlet /&gt;</code></span></a></h4><p>It’s the single most important element of your layout.</p><p>If you don’t include it, no page will render inside the layout. Use it precisely where you want your page content to appear, usually inside a <code>&lt;main&gt;</code> block or central wrapper.</p><h4 id="use-the-head-method-for-layout-wide-metadata" tabindex="-1"><a class="header-anchor" href="#use-the-head-method-for-layout-wide-metadata"><span>Use the <code>head()</code> method for layout-wide metadata</span></a></h4><p>If all your pages share the same title, description, or meta tags, define them in the layout using <code>head()</code>. You’ll avoid repetition and ensure consistency across pages.</p><h4 id="name-layouts-clearly-and-consistently" tabindex="-1"><a class="header-anchor" href="#name-layouts-clearly-and-consistently"><span>Name layouts clearly and consistently</span></a></h4><p>Use layout names that reflect their purpose: <code>default</code>, <code>auth</code>, <code>admin</code>, etc. Avoid ambiguous names like <code>main</code> or <code>wrapper</code>.</p><p>This makes it easier to assign layouts declaratively and track them across the codebase.</p><h4 id="keep-logic-out-keep-structure-in" tabindex="-1"><a class="header-anchor" href="#keep-logic-out-keep-structure-in"><span>Keep logic out, keep structure in</span></a></h4><p>Avoid this:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* logic here */</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Prefer this:</p><ul><li>Move logic to the page</li><li>Pass down flags via <code>StoneContext</code> or props</li><li>Keep layout code declarative</li></ul><p>Layouts should <strong>never surprise you</strong>, their output should be predictable and consistent.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Layouts in Stone.js are simple by design, but powerful in impact.</p><p>They provide a clean, reusable way to wrap your pages with consistent UI, structure, and metadata, without mixing in business logic or event handling.</p><h3 id="key-takeaways" tabindex="-1"><a class="header-anchor" href="#key-takeaways"><span>Key takeaways:</span></a></h3><ul><li><p>Layouts are <strong>not event handlers</strong>, they don’t have <code>handle()</code>, middleware, or lifecycle hooks.</p></li><li><p>They implement only <code>render()</code> (required) and optionally <code>head()</code> for setting metadata.</p></li><li><p>You can define them as <strong>classes</strong> or <strong>factories</strong>, and register them using:</p><ul><li><code>@PageLayout()</code> (declarative)</li><li><code>definePageLayout()</code> (imperative)</li></ul></li><li><p>Use <code>&lt;StoneOutlet /&gt;</code> to inject page content where needed.</p></li><li><p>Assign layouts to pages using the <code>layout</code> property in your page definition.</p></li><li><p>Layout metadata is combined with page metadata during rendering.</p></li><li><p>Keep layouts <strong>clean, declarative, and logic-free</strong>, focus only on structure.</p></li></ul><p>Stone.js gives you total control over your view architecture, without polluting your logic layer, and without reinventing the wheel.</p><p>That’s the power of separation by dimension. That’s the <strong>Continuum</strong>.</p>`,69))])}const v=c(h,[["render",k]]),b=JSON.parse('{"path":"/docs/react/layout.html","title":"Layout","lang":"en-US","frontmatter":{"title":"Layout","description":"In Stone.js, a layout is a special kind of component that wraps your pages to provide consistent structure and shared elements, like headers, footers, navigation bars, or global...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Layout\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/docs/react/layout.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Layout"}],["meta",{"property":"og:description","content":"In Stone.js, a layout is a special kind of component that wraps your pages to provide consistent structure and shared elements, like headers, footers, navigation bars, or global..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":5.63,"words":1690},"filePathRelative":"docs/react/layout.md","autoDesc":true}');export{v as comp,b as data};
