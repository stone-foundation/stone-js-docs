import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as n,b as r,e as t,w as o,d as s,r as c,o as l}from"./app-7vCtLRjQ.js";const d={};function u(y,e){const a=c("RouteLink");return l(),p("div",null,[n("p",null,[t(a,{to:"/api/service-container/"},{default:o(()=>e[0]||(e[0]=[n("strong",null,"Service Container Documentation v0.0.44",-1)])),_:1,__:[0]})]),e[5]||(e[5]=n("hr",null,null,-1)),n("p",null,[t(a,{to:"/api/service-container/modules.html"},{default:o(()=>e[1]||(e[1]=[s("Service Container Documentation")])),_:1,__:[1]}),e[3]||(e[3]=s(" / ")),t(a,{to:"/api/service-container/declarations/"},{default:o(()=>e[2]||(e[2]=[s("declarations")])),_:1,__:[2]}),e[4]||(e[4]=s(" / BindingKey"))]),e[6]||(e[6]=r(`<h1 id="type-alias-bindingkey" tabindex="-1"><a class="header-anchor" href="#type-alias-bindingkey"><span>Type Alias: BindingKey</span></a></h1><blockquote><p><strong>BindingKey</strong>: <code>number</code> | <code>boolean</code> | <code>string</code> | <code>Function</code> | <code>object</code> | <code>symbol</code></p></blockquote><p>Defined in: <a href="https://github.com/stonemjs/service-container/blob/249b060f7936ebb0ea1e26fa167dc5f8fc0b9bc3/src/declarations.ts#L40" target="_blank" rel="noopener noreferrer">declarations.ts:40</a></p><p>A union type representing the possible keys that can be used to bind values in the container.</p><p>Binding keys can be of various types, such as numbers, booleans, strings, functions, objects, or symbols. These types are used because they provide a broad range of ways to uniquely identify a binding.</p><ul><li><code>number</code>, <code>boolean</code>, <code>string</code>: These are basic types that are easy to use and uniquely identify a binding.</li><li><code>Function</code>: Useful for identifying bindings by constructor or other functions.</li><li><code>object</code>: Allows more complex key types, like instances of classes.</li><li><code>symbol</code>: Guarantees a unique identifier, which can prevent conflicts.</li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> key1<span class="token operator">:</span> BindingKey <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// Using a number as a key</span></span>
<span class="line"><span class="token keyword">const</span> key2<span class="token operator">:</span> BindingKey <span class="token operator">=</span> <span class="token string">&#39;serviceName&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Using a string as a key</span></span>
<span class="line"><span class="token keyword">const</span> key3<span class="token operator">:</span> BindingKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;uniqueKey&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Using a symbol for uniqueness</span></span>
<span class="line"><span class="token keyword">const</span> key4<span class="token operator">:</span> BindingKey <span class="token operator">=</span> MyServiceClass<span class="token punctuation">;</span> <span class="token comment">// Using a function (constructor) as a key</span></span>
<span class="line"><span class="token keyword">const</span> key5<span class="token operator">:</span> BindingKey <span class="token operator">=</span> <span class="token punctuation">{</span> custom<span class="token operator">:</span> <span class="token string">&#39;objectKey&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Using an object as a key</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8))])}const b=i(d,[["render",u]]),k=JSON.parse('{"path":"/api/service-container/declarations/type-aliases/BindingKey.html","title":"Type Alias: BindingKey","lang":"en-US","frontmatter":{"description":"/ / BindingKey Type Alias: BindingKey BindingKey: number | boolean | string | Function | object | symbol Defined in: declarations.ts:40 A union type representing the possible ke...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type Alias: BindingKey\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-07T20:31:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.com/api/service-container/declarations/type-aliases/BindingKey.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Type Alias: BindingKey"}],["meta",{"property":"og:description","content":"/ / BindingKey Type Alias: BindingKey BindingKey: number | boolean | string | Function | object | symbol Defined in: declarations.ts:40 A union type representing the possible ke..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-07T20:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-07T20:31:21.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1749328281000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1}]},"readingTime":{"minutes":0.62,"words":187},"filePathRelative":"api/service-container/declarations/type-aliases/BindingKey.md","autoDesc":true}');export{b as comp,k as data};
