import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as s,a,e as t,w as o,d as p,r as l,o as c}from"./app-CIBZQWs4.js";const u={};function d(g,n){const e=l("RouteLink");return c(),i("div",null,[n[10]||(n[10]=s(`<h1 id="function-definelogger" tabindex="-1"><a class="header-anchor" href="#function-definelogger"><span>Function: defineLogger()</span></a></h1><p>Registers a logger (class-based or factory-based) into the Stone blueprint.</p><h2 id="param" tabindex="-1"><a class="header-anchor" href="#param"><span>Param</span></a></h2><p>Either a logger class or factory function.</p><h2 id="param-1" tabindex="-1"><a class="header-anchor" href="#param-1"><span>Param</span></a></h2><p>Optional configuration, including log level and isFactory flag.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span>MyLogger<span class="token punctuation">,</span> <span class="token punctuation">{</span> level<span class="token operator">:</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">,</span> isClass<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">MyLogger</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> level<span class="token operator">:</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span> isFactory<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="call-signature" tabindex="-1"><a class="header-anchor" href="#call-signature"><span>Call Signature</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token function">defineLogger</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>StoneBlueprint<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Registers a <strong>class-based logger</strong> into the Stone blueprint.</p><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h3><h4 id="module" tabindex="-1"><a class="header-anchor" href="#module"><span>module</span></a></h4>`,13)),a("p",null,[t(e,{to:"/api/core/declarations/type-aliases/ILoggerClass.html"},{default:o(()=>n[0]||(n[0]=[a("code",null,"ILoggerClass",-1)])),_:1,__:[0]})]),n[11]||(n[11]=s('<p>The logger class that implements <code>ILogger</code>.</p><h4 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>options</span></a></h4><p><code>object</code> &amp; <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p><p>Optional configuration (must include <code>isClass: true</code> if specified).</p><h3 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h3>',5)),a("p",null,[n[2]||(n[2]=a("code",null,"Partial",-1)),n[3]||(n[3]=p("<")),t(e,{to:"/api/core/options/StoneBlueprint/interfaces/StoneBlueprint.html"},{default:o(()=>n[1]||(n[1]=[a("code",null,"StoneBlueprint",-1)])),_:1,__:[1]}),n[4]||(n[4]=p(">"))]),n[12]||(n[12]=s(`<p>A partial StoneBlueprint with the logger resolver and settings.</p><h3 id="param-2" tabindex="-1"><a class="header-anchor" href="#param-2"><span>Param</span></a></h3><p>Either a logger class or factory function.</p><h3 id="param-3" tabindex="-1"><a class="header-anchor" href="#param-3"><span>Param</span></a></h3><p>Optional configuration, including log level and isFactory flag.</p><h3 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span>MyLogger<span class="token punctuation">,</span> <span class="token punctuation">{</span> level<span class="token operator">:</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">,</span> isClass<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">MyLogger</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> level<span class="token operator">:</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span> isFactory<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="call-signature-1" tabindex="-1"><a class="header-anchor" href="#call-signature-1"><span>Call Signature</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token function">defineLogger</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>StoneBlueprint<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Registers a <strong>factory-based logger</strong> into the Stone blueprint.</p><h3 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h3><h4 id="module-1" tabindex="-1"><a class="header-anchor" href="#module-1"><span>module</span></a></h4>`,12)),a("p",null,[t(e,{to:"/api/core/declarations/type-aliases/FactoryLogger.html"},{default:o(()=>n[5]||(n[5]=[a("code",null,"FactoryLogger",-1)])),_:1,__:[5]})]),n[13]||(n[13]=s('<p>The logger factory function.</p><h4 id="options-1" tabindex="-1"><a class="header-anchor" href="#options-1"><span>options</span></a></h4><p><code>object</code> &amp; <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p><p>Optional configuration (must include <code>isFactory: true</code> if specified).</p><h3 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h3>',5)),a("p",null,[n[7]||(n[7]=a("code",null,"Partial",-1)),n[8]||(n[8]=p("<")),t(e,{to:"/api/core/options/StoneBlueprint/interfaces/StoneBlueprint.html"},{default:o(()=>n[6]||(n[6]=[a("code",null,"StoneBlueprint",-1)])),_:1,__:[6]}),n[9]||(n[9]=p(">"))]),n[14]||(n[14]=s(`<p>A partial StoneBlueprint with the logger resolver and settings.</p><h3 id="param-4" tabindex="-1"><a class="header-anchor" href="#param-4"><span>Param</span></a></h3><p>Either a logger class or factory function.</p><h3 id="param-5" tabindex="-1"><a class="header-anchor" href="#param-5"><span>Param</span></a></h3><p>Optional configuration, including log level and isFactory flag.</p><h3 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2"><span>Example</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span>MyLogger<span class="token punctuation">,</span> <span class="token punctuation">{</span> level<span class="token operator">:</span> <span class="token string">&#39;debug&#39;</span><span class="token punctuation">,</span> isClass<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">defineLogger</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">MyLogger</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> level<span class="token operator">:</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span> isFactory<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,7))])}const k=r(u,[["render",d]]),f=JSON.parse('{"path":"/api/core/blueprint/KernelUtils/functions/defineLogger.html","title":"Function: defineLogger()","lang":"en-US","frontmatter":{"description":"Function: defineLogger() Registers a logger (class-based or factory-based) into the Stone blueprint. Param Either a logger class or factory function. Param Optional configuratio...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function: defineLogger()\\",\\"image\\":[\\"/logo.png\\"],\\"dateModified\\":\\"2025-06-18T04:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Stone\\"}]}"],["meta",{"property":"og:url","content":"https://stonejs.dev/api/core/blueprint/KernelUtils/functions/defineLogger.html"}],["meta",{"property":"og:site_name","content":"Stone.js"}],["meta",{"property":"og:title","content":"Function: defineLogger()"}],["meta",{"property":"og:description","content":"Function: defineLogger() Registers a logger (class-based or factory-based) into the Stone blueprint. Param Either a logger class or factory function. Param Optional configuratio..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/logo.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-18T04:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-18T04:17:07.000Z"}]]},"git":{"createdTime":1749328281000,"updatedTime":1750220227000,"contributors":[{"name":"Mr Stone","username":"","email":"pierre.evens16@gmail.com","commits":1},{"name":"Mr. Stone","username":"","email":"pierrevensy@gmail.com","commits":1}]},"readingTime":{"minutes":0.76,"words":227},"filePathRelative":"api/core/blueprint/KernelUtils/functions/defineLogger.md","autoDesc":true}');export{k as comp,f as data};
